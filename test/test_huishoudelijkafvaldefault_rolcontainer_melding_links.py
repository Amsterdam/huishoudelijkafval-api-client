# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_rolcontainer_melding_links import HuishoudelijkafvaldefaultRolcontainerMeldingLinks

class TestHuishoudelijkafvaldefaultRolcontainerMeldingLinks(unittest.TestCase):
    """HuishoudelijkafvaldefaultRolcontainerMeldingLinks unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HuishoudelijkafvaldefaultRolcontainerMeldingLinks:
        """Test HuishoudelijkafvaldefaultRolcontainerMeldingLinks
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HuishoudelijkafvaldefaultRolcontainerMeldingLinks`
        """
        model = HuishoudelijkafvaldefaultRolcontainerMeldingLinks()
        if include_optional:
            return HuishoudelijkafvaldefaultRolcontainerMeldingLinks(
                var_schema = '',
                var_self = huishoudelijkafval_api_client.models.huishoudelijkafvalrolcontainer_melding_link.Huishoudelijkafvalrolcontainer_meldingLink(
                    href = '', 
                    title = '', 
                    id = -9223372036854775808, ),
                rolcontainer = huishoudelijkafval_api_client.models.huishoudelijkafvalrolcontainer_link.HuishoudelijkafvalrolcontainerLink(
                    href = '', 
                    title = '', 
                    id = -9223372036854775808, ),
                bag_verblijfsobject = huishoudelijkafval_api_client.models.bag_verblijfsobjecten_raw_identifier.BagVerblijfsobjectenRawIdentifier(
                    href = '', 
                    title = '', 
                    identificatie = '', ),
                bag_nummeraanduiding = huishoudelijkafval_api_client.models.bag_nummeraanduidingen_raw_identifier.BagNummeraanduidingenRawIdentifier(
                    href = '', 
                    title = '', 
                    identificatie = '', )
            )
        else:
            return HuishoudelijkafvaldefaultRolcontainerMeldingLinks(
                var_schema = '',
                var_self = huishoudelijkafval_api_client.models.huishoudelijkafvalrolcontainer_melding_link.Huishoudelijkafvalrolcontainer_meldingLink(
                    href = '', 
                    title = '', 
                    id = -9223372036854775808, ),
                rolcontainer = huishoudelijkafval_api_client.models.huishoudelijkafvalrolcontainer_link.HuishoudelijkafvalrolcontainerLink(
                    href = '', 
                    title = '', 
                    id = -9223372036854775808, ),
                bag_verblijfsobject = huishoudelijkafval_api_client.models.bag_verblijfsobjecten_raw_identifier.BagVerblijfsobjectenRawIdentifier(
                    href = '', 
                    title = '', 
                    identificatie = '', ),
                bag_nummeraanduiding = huishoudelijkafval_api_client.models.bag_nummeraanduidingen_raw_identifier.BagNummeraanduidingenRawIdentifier(
                    href = '', 
                    title = '', 
                    identificatie = '', ),
        )
        """

    def testHuishoudelijkafvaldefaultRolcontainerMeldingLinks(self):
        """Test HuishoudelijkafvaldefaultRolcontainerMeldingLinks"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
