# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvalv0_afvoermomenten_links import Huishoudelijkafvalv0AfvoermomentenLinks
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalafvoermomenten(BaseModel):
    """
    Bevat gegevens over wat en hoeveel is aangeboden bij verschillende afvalwerkers
    """ # noqa: E501
    links: Huishoudelijkafvalv0AfvoermomentenLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Unieke aanduiding van het record. Combinatie verwerker en bon nummer")
    verwerker: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam van de verwerker")
    bon_nummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke identificatie voor de afvalverwerking van de afvalverwerker.", alias="bonNummer")
    datum: Optional[date] = Field(default=None, description="Datum van de afvalverwerking of registratie.")
    tijd: Optional[StrictStr] = Field(default=None, description="Tijdstip van de verwerking of registratie.")
    ontvangst_locatie: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Locatie waar het afval wordt ontvangen.", alias="ontvangstLocatie")
    afvalstroom_nummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Afvalstroomnummer, een unieke code voor de afvalstroom.", alias="afvalstroomNummer")
    aanbieder: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam van de afvalaanbieder (klant, bedrijf of gemeente).")
    aanbieder_standplaats: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Locatie waar het afval is opgehaald.", alias="aanbiederStandplaats")
    aanbieder_standplaats_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Beschrijving van de ophaallocatie.", alias="aanbiederStandplaatsOmschrijving")
    aanbieder_adres: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Adres van de afvalaanbieder.", alias="aanbiederAdres")
    aanbieder_postcode: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Postcode van de afvalaanbieder.", alias="aanbiederPostcode")
    aanbieder_plaatsnaam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Plaatsnaam van de afvalaanbieder.", alias="aanbiederPlaatsnaam")
    afval_soort: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Beschrijving van het afval of de activiteit.", alias="afvalSoort")
    geaccepteerd: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Status of het afval is geaccepteerd bij de ontvangstlocatie.")
    opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Aanvullende informatie over de afvalverwerking.")
    kenteken: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description=" Kenteken van het voertuig dat het afval vervoert.")
    kenteken_kort: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Kenteken zonder '-'. Ten behove van koppeling met wagenpark_voertuig", alias="kentekenKort")
    weeg_bon: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Nummer van de weegbon van de aanbieder voor het geregistreerde gewicht.", alias="weegBon")
    weeg_datum: Optional[date] = Field(default=None, description="Datum waarop het afval is gewogen.", alias="weegDatum")
    weeg_tijdstip: Optional[StrictStr] = Field(default=None, description="Tijdstip waarop het afval is gewogen.", alias="weegTijdstip")
    inweging: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Gewicht van het voertuig inclusief lading bij binnenkomst.")
    uitweging: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Gewicht van het voertuig zonder lading bij vertrek.")
    netto_gewicht: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Verschil tussen vol en leeg gewicht, oftewel het gewicht van het afval.", alias="nettoGewicht")
    afvalstof_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Code die het type afvalstof identificeert.", alias="afvalstofCode")
    afvalstof_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Kenteken van het voertuig dat het afval vervoert.", alias="afvalstofOmschrijving")
    __properties: ClassVar[List[str]] = ["_links", "id", "verwerker", "bonNummer", "datum", "tijd", "ontvangstLocatie", "afvalstroomNummer", "aanbieder", "aanbiederStandplaats", "aanbiederStandplaatsOmschrijving", "aanbiederAdres", "aanbiederPostcode", "aanbiederPlaatsnaam", "afvalSoort", "geaccepteerd", "opmerking", "kenteken", "kentekenKort", "weegBon", "weegDatum", "weegTijdstip", "inweging", "uitweging", "nettoGewicht", "afvalstofCode", "afvalstofOmschrijving"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalafvoermomenten from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if verwerker (nullable) is None
        # and model_fields_set contains the field
        if self.verwerker is None and "verwerker" in self.model_fields_set:
            _dict['verwerker'] = None

        # set to None if bon_nummer (nullable) is None
        # and model_fields_set contains the field
        if self.bon_nummer is None and "bon_nummer" in self.model_fields_set:
            _dict['bonNummer'] = None

        # set to None if datum (nullable) is None
        # and model_fields_set contains the field
        if self.datum is None and "datum" in self.model_fields_set:
            _dict['datum'] = None

        # set to None if tijd (nullable) is None
        # and model_fields_set contains the field
        if self.tijd is None and "tijd" in self.model_fields_set:
            _dict['tijd'] = None

        # set to None if ontvangst_locatie (nullable) is None
        # and model_fields_set contains the field
        if self.ontvangst_locatie is None and "ontvangst_locatie" in self.model_fields_set:
            _dict['ontvangstLocatie'] = None

        # set to None if afvalstroom_nummer (nullable) is None
        # and model_fields_set contains the field
        if self.afvalstroom_nummer is None and "afvalstroom_nummer" in self.model_fields_set:
            _dict['afvalstroomNummer'] = None

        # set to None if aanbieder (nullable) is None
        # and model_fields_set contains the field
        if self.aanbieder is None and "aanbieder" in self.model_fields_set:
            _dict['aanbieder'] = None

        # set to None if aanbieder_standplaats (nullable) is None
        # and model_fields_set contains the field
        if self.aanbieder_standplaats is None and "aanbieder_standplaats" in self.model_fields_set:
            _dict['aanbiederStandplaats'] = None

        # set to None if aanbieder_standplaats_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.aanbieder_standplaats_omschrijving is None and "aanbieder_standplaats_omschrijving" in self.model_fields_set:
            _dict['aanbiederStandplaatsOmschrijving'] = None

        # set to None if aanbieder_adres (nullable) is None
        # and model_fields_set contains the field
        if self.aanbieder_adres is None and "aanbieder_adres" in self.model_fields_set:
            _dict['aanbiederAdres'] = None

        # set to None if aanbieder_postcode (nullable) is None
        # and model_fields_set contains the field
        if self.aanbieder_postcode is None and "aanbieder_postcode" in self.model_fields_set:
            _dict['aanbiederPostcode'] = None

        # set to None if aanbieder_plaatsnaam (nullable) is None
        # and model_fields_set contains the field
        if self.aanbieder_plaatsnaam is None and "aanbieder_plaatsnaam" in self.model_fields_set:
            _dict['aanbiederPlaatsnaam'] = None

        # set to None if afval_soort (nullable) is None
        # and model_fields_set contains the field
        if self.afval_soort is None and "afval_soort" in self.model_fields_set:
            _dict['afvalSoort'] = None

        # set to None if geaccepteerd (nullable) is None
        # and model_fields_set contains the field
        if self.geaccepteerd is None and "geaccepteerd" in self.model_fields_set:
            _dict['geaccepteerd'] = None

        # set to None if opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.opmerking is None and "opmerking" in self.model_fields_set:
            _dict['opmerking'] = None

        # set to None if kenteken (nullable) is None
        # and model_fields_set contains the field
        if self.kenteken is None and "kenteken" in self.model_fields_set:
            _dict['kenteken'] = None

        # set to None if kenteken_kort (nullable) is None
        # and model_fields_set contains the field
        if self.kenteken_kort is None and "kenteken_kort" in self.model_fields_set:
            _dict['kentekenKort'] = None

        # set to None if weeg_bon (nullable) is None
        # and model_fields_set contains the field
        if self.weeg_bon is None and "weeg_bon" in self.model_fields_set:
            _dict['weegBon'] = None

        # set to None if weeg_datum (nullable) is None
        # and model_fields_set contains the field
        if self.weeg_datum is None and "weeg_datum" in self.model_fields_set:
            _dict['weegDatum'] = None

        # set to None if weeg_tijdstip (nullable) is None
        # and model_fields_set contains the field
        if self.weeg_tijdstip is None and "weeg_tijdstip" in self.model_fields_set:
            _dict['weegTijdstip'] = None

        # set to None if inweging (nullable) is None
        # and model_fields_set contains the field
        if self.inweging is None and "inweging" in self.model_fields_set:
            _dict['inweging'] = None

        # set to None if uitweging (nullable) is None
        # and model_fields_set contains the field
        if self.uitweging is None and "uitweging" in self.model_fields_set:
            _dict['uitweging'] = None

        # set to None if netto_gewicht (nullable) is None
        # and model_fields_set contains the field
        if self.netto_gewicht is None and "netto_gewicht" in self.model_fields_set:
            _dict['nettoGewicht'] = None

        # set to None if afvalstof_code (nullable) is None
        # and model_fields_set contains the field
        if self.afvalstof_code is None and "afvalstof_code" in self.model_fields_set:
            _dict['afvalstofCode'] = None

        # set to None if afvalstof_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.afvalstof_omschrijving is None and "afvalstof_omschrijving" in self.model_fields_set:
            _dict['afvalstofOmschrijving'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalafvoermomenten from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": Huishoudelijkafvalv0AfvoermomentenLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "verwerker": obj.get("verwerker"),
            "bonNummer": obj.get("bonNummer"),
            "datum": obj.get("datum"),
            "tijd": obj.get("tijd"),
            "ontvangstLocatie": obj.get("ontvangstLocatie"),
            "afvalstroomNummer": obj.get("afvalstroomNummer"),
            "aanbieder": obj.get("aanbieder"),
            "aanbiederStandplaats": obj.get("aanbiederStandplaats"),
            "aanbiederStandplaatsOmschrijving": obj.get("aanbiederStandplaatsOmschrijving"),
            "aanbiederAdres": obj.get("aanbiederAdres"),
            "aanbiederPostcode": obj.get("aanbiederPostcode"),
            "aanbiederPlaatsnaam": obj.get("aanbiederPlaatsnaam"),
            "afvalSoort": obj.get("afvalSoort"),
            "geaccepteerd": obj.get("geaccepteerd"),
            "opmerking": obj.get("opmerking"),
            "kenteken": obj.get("kenteken"),
            "kentekenKort": obj.get("kentekenKort"),
            "weegBon": obj.get("weegBon"),
            "weegDatum": obj.get("weegDatum"),
            "weegTijdstip": obj.get("weegTijdstip"),
            "inweging": obj.get("inweging"),
            "uitweging": obj.get("uitweging"),
            "nettoGewicht": obj.get("nettoGewicht"),
            "afvalstofCode": obj.get("afvalstofCode"),
            "afvalstofOmschrijving": obj.get("afvalstofOmschrijving")
        })
        return _obj


