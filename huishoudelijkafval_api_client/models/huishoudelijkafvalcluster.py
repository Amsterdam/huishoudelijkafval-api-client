# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_cluster_links import HuishoudelijkafvaldefaultClusterLinks
from huishoudelijkafval_api_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalcluster(BaseModel):
    """
    cluster
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultClusterLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Uniek identificerend kenmerk van cluster")
    subcluster_indicatie: Optional[StrictBool] = Field(default=None, description="Indicatie of het een cluster betreft dat is gesplitst door een weg", alias="subclusterIndicatie")
    geometrie: Optional[Point] = None
    datum_opvoer: Optional[datetime] = Field(default=None, description="Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016", alias="datumOpvoer")
    datum_ontstaan: Optional[date] = Field(default=None, description="Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016", alias="datumOntstaan")
    datum_einde: Optional[date] = Field(default=None, description="Datum wanneer het cluster geen relaties meer heeft met containers met status=1.", alias="datumEinde")
    wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="Datum waarop het object is gewijzigd", alias="wijzigingsdatumDp")
    verwijderd_dp: Optional[StrictBool] = Field(default=None, description="Indicatie of het object verwijderd is bij de bronhouder", alias="verwijderdDp")
    status: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Status van het cluster (0 - inactief , 1 - actief)")
    bag_hoofdadres_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagHoofdadresVerblijfsobjectId")
    gbd_buurt_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object", alias="gbdBuurtId")
    bag_openbareruimte_id: Optional[StrictStr] = Field(description="Openbare ruimte identificatie", alias="bagOpenbareruimteId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="Identificatie nummeraanduiding", alias="bagNummeraanduidingId")
    bronadres: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Adres van het cluster zoals die in bron geregistreerd is.")
    opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Extra aanwijzing van de locatie voor de bestuurder.")
    __properties: ClassVar[List[str]] = ["_links", "id", "subclusterIndicatie", "geometrie", "datumOpvoer", "datumOntstaan", "datumEinde", "wijzigingsdatumDp", "verwijderdDp", "status", "bagHoofdadresVerblijfsobjectId", "gbdBuurtId", "bagOpenbareruimteId", "bagNummeraanduidingId", "bronadres", "opmerking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bag_hoofdadres_verblijfsobject_id",
            "gbd_buurt_id",
            "bag_openbareruimte_id",
            "bag_nummeraanduiding_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if subcluster_indicatie (nullable) is None
        # and model_fields_set contains the field
        if self.subcluster_indicatie is None and "subcluster_indicatie" in self.model_fields_set:
            _dict['subclusterIndicatie'] = None

        # set to None if datum_opvoer (nullable) is None
        # and model_fields_set contains the field
        if self.datum_opvoer is None and "datum_opvoer" in self.model_fields_set:
            _dict['datumOpvoer'] = None

        # set to None if datum_ontstaan (nullable) is None
        # and model_fields_set contains the field
        if self.datum_ontstaan is None and "datum_ontstaan" in self.model_fields_set:
            _dict['datumOntstaan'] = None

        # set to None if datum_einde (nullable) is None
        # and model_fields_set contains the field
        if self.datum_einde is None and "datum_einde" in self.model_fields_set:
            _dict['datumEinde'] = None

        # set to None if wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum_dp is None and "wijzigingsdatum_dp" in self.model_fields_set:
            _dict['wijzigingsdatumDp'] = None

        # set to None if verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.verwijderd_dp is None and "verwijderd_dp" in self.model_fields_set:
            _dict['verwijderdDp'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if bag_hoofdadres_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_hoofdadres_verblijfsobject_id is None and "bag_hoofdadres_verblijfsobject_id" in self.model_fields_set:
            _dict['bagHoofdadresVerblijfsobjectId'] = None

        # set to None if gbd_buurt_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_id is None and "gbd_buurt_id" in self.model_fields_set:
            _dict['gbdBuurtId'] = None

        # set to None if bag_openbareruimte_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_openbareruimte_id is None and "bag_openbareruimte_id" in self.model_fields_set:
            _dict['bagOpenbareruimteId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        # set to None if bronadres (nullable) is None
        # and model_fields_set contains the field
        if self.bronadres is None and "bronadres" in self.model_fields_set:
            _dict['bronadres'] = None

        # set to None if opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.opmerking is None and "opmerking" in self.model_fields_set:
            _dict['opmerking'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultClusterLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "subclusterIndicatie": obj.get("subclusterIndicatie"),
            "geometrie": Point.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "datumOpvoer": obj.get("datumOpvoer"),
            "datumOntstaan": obj.get("datumOntstaan"),
            "datumEinde": obj.get("datumEinde"),
            "wijzigingsdatumDp": obj.get("wijzigingsdatumDp"),
            "verwijderdDp": obj.get("verwijderdDp"),
            "status": obj.get("status"),
            "bagHoofdadresVerblijfsobjectId": obj.get("bagHoofdadresVerblijfsobjectId"),
            "gbdBuurtId": obj.get("gbdBuurtId"),
            "bagOpenbareruimteId": obj.get("bagOpenbareruimteId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId"),
            "bronadres": obj.get("bronadres"),
            "opmerking": obj.get("opmerking")
        })
        return _obj


