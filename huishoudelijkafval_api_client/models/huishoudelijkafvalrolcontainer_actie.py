# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_rolcontainer_actie_links import HuishoudelijkafvaldefaultRolcontainerActieLinks
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvalrolcontainerActie(BaseModel):
    """
    Deze tabel bevat informatie over onderhoud handelingen.
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultRolcontainerActieLinks = Field(alias="_links")
    id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)] = Field(description="Unieke aanduiding van een onderhoudsactie")
    rolcontainer_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(description="Unieke aanduiding van een rolcontainer. (foreign key)", alias="rolcontainerId")
    actie_type_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut beschrijft de code van de actie type", alias="actieTypeCode")
    actie_type_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut beschrijft de aard van de actie type", alias="actieTypeNaam")
    interventie_datum: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De geplande datum voor een bepaalde actie.", alias="interventieDatum")
    status: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft de actuele status van een rolcontainer aan. De volgende statussen zijn mogelijk.  Active, inactive en blocked.")
    ronde: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = None
    bezoek: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Het aantal bezoeken dat is afgelegd om het verzoek te realiseren.")
    afkomst_verzoek: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Deze attribuut geeft aan of de actie door intern of extern verzoek is tot stand gekomen.", alias="afkomstVerzoek")
    soort_verzoek: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft aan welk communicatiemiddel is gebruikt om het verzoek te registreren..", alias="soortVerzoek")
    team: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het team dat verantwoordelijk is voor het afhandelen van het verzoek.")
    chip_nummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke aanduiding van de chip dat aan de rolcontainer is bevestigd. Het chipnummer is van buitenaf niet leesbaar.", alias="chipNummer")
    soort_container: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft een aantal kenmerken (materieel, inhoud in liter en fractie) van een rolcontainer. Bijvoorbeeld: GFE/T 140 Kunststof.", alias="soortContainer")
    aanmaakdatum: Optional[datetime] = Field(default=None, description="Datum tijd waarop de rolcontainer in het systeem is aangemaakt")
    wijzigingsdatum: Optional[datetime] = Field(default=None, description="Datum tijd waarop de rolcontainer in het systeem voor het laatst is aangepast")
    bag_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagVerblijfsobjectId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="BAG Identificatie nummeraanduiding", alias="bagNummeraanduidingId")
    __properties: ClassVar[List[str]] = ["_links", "id", "rolcontainerId", "actieTypeCode", "actieTypeNaam", "interventieDatum", "status", "ronde", "bezoek", "afkomstVerzoek", "soortVerzoek", "team", "chipNummer", "soortContainer", "aanmaakdatum", "wijzigingsdatum", "bagVerblijfsobjectId", "bagNummeraanduidingId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalrolcontainerActie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "rolcontainer_id",
            "bag_verblijfsobject_id",
            "bag_nummeraanduiding_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if rolcontainer_id (nullable) is None
        # and model_fields_set contains the field
        if self.rolcontainer_id is None and "rolcontainer_id" in self.model_fields_set:
            _dict['rolcontainerId'] = None

        # set to None if actie_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.actie_type_code is None and "actie_type_code" in self.model_fields_set:
            _dict['actieTypeCode'] = None

        # set to None if actie_type_naam (nullable) is None
        # and model_fields_set contains the field
        if self.actie_type_naam is None and "actie_type_naam" in self.model_fields_set:
            _dict['actieTypeNaam'] = None

        # set to None if interventie_datum (nullable) is None
        # and model_fields_set contains the field
        if self.interventie_datum is None and "interventie_datum" in self.model_fields_set:
            _dict['interventieDatum'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if ronde (nullable) is None
        # and model_fields_set contains the field
        if self.ronde is None and "ronde" in self.model_fields_set:
            _dict['ronde'] = None

        # set to None if bezoek (nullable) is None
        # and model_fields_set contains the field
        if self.bezoek is None and "bezoek" in self.model_fields_set:
            _dict['bezoek'] = None

        # set to None if afkomst_verzoek (nullable) is None
        # and model_fields_set contains the field
        if self.afkomst_verzoek is None and "afkomst_verzoek" in self.model_fields_set:
            _dict['afkomstVerzoek'] = None

        # set to None if soort_verzoek (nullable) is None
        # and model_fields_set contains the field
        if self.soort_verzoek is None and "soort_verzoek" in self.model_fields_set:
            _dict['soortVerzoek'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['team'] = None

        # set to None if chip_nummer (nullable) is None
        # and model_fields_set contains the field
        if self.chip_nummer is None and "chip_nummer" in self.model_fields_set:
            _dict['chipNummer'] = None

        # set to None if soort_container (nullable) is None
        # and model_fields_set contains the field
        if self.soort_container is None and "soort_container" in self.model_fields_set:
            _dict['soortContainer'] = None

        # set to None if aanmaakdatum (nullable) is None
        # and model_fields_set contains the field
        if self.aanmaakdatum is None and "aanmaakdatum" in self.model_fields_set:
            _dict['aanmaakdatum'] = None

        # set to None if wijzigingsdatum (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum is None and "wijzigingsdatum" in self.model_fields_set:
            _dict['wijzigingsdatum'] = None

        # set to None if bag_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_verblijfsobject_id is None and "bag_verblijfsobject_id" in self.model_fields_set:
            _dict['bagVerblijfsobjectId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalrolcontainerActie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultRolcontainerActieLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "rolcontainerId": obj.get("rolcontainerId"),
            "actieTypeCode": obj.get("actieTypeCode"),
            "actieTypeNaam": obj.get("actieTypeNaam"),
            "interventieDatum": obj.get("interventieDatum"),
            "status": obj.get("status"),
            "ronde": obj.get("ronde"),
            "bezoek": obj.get("bezoek"),
            "afkomstVerzoek": obj.get("afkomstVerzoek"),
            "soortVerzoek": obj.get("soortVerzoek"),
            "team": obj.get("team"),
            "chipNummer": obj.get("chipNummer"),
            "soortContainer": obj.get("soortContainer"),
            "aanmaakdatum": obj.get("aanmaakdatum"),
            "wijzigingsdatum": obj.get("wijzigingsdatum"),
            "bagVerblijfsobjectId": obj.get("bagVerblijfsobjectId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId")
        })
        return _obj


