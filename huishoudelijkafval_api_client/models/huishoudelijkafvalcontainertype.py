# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_containertype_links import HuishoudelijkafvaldefaultContainertypeLinks
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalcontainertype(BaseModel):
    """
    containertype
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultContainertypeLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Unieke aanduiding objecttype")
    naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam van het containertype")
    volume_m3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Het volume (m3) aan afval wat de container kan bevatten", alias="volumeM3")
    gewicht_kg: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Het volume (m3) aan afval wat de container kan bevatten", alias="gewichtKg")
    wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="Datum waarop het object is gewijzigd", alias="wijzigingsdatumDp")
    verwijderd_dp: Optional[StrictBool] = Field(default=None, description="Indicatie of het object verwijderd is bij de bronhouder", alias="verwijderdDp")
    containertype_artikelcode: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Artikelcodevan het het containertype.", alias="containertypeArtikelcode")
    containertype_hijskraantype_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam van het type hijskraantype.", alias="containertypeHijskraantypeNaam")
    containertype_hijskraan_opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Opmerking over het hijskraantype", alias="containertypeHijskraanOpmerking")
    containertype_container_type: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het type van de container type", alias="containertypeContainerType")
    containertype_compressie_container_ind: Optional[StrictBool] = Field(default=None, description="Indicatie voor aanwezigheid van compressie instrument.", alias="containertypeCompressieContainerInd")
    containertype_compressiefactor: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De compressiefactor van compressie instrument", alias="containertypeCompressiefactor")
    __properties: ClassVar[List[str]] = ["_links", "id", "naam", "volumeM3", "gewichtKg", "wijzigingsdatumDp", "verwijderdDp", "containertypeArtikelcode", "containertypeHijskraantypeNaam", "containertypeHijskraanOpmerking", "containertypeContainerType", "containertypeCompressieContainerInd", "containertypeCompressiefactor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcontainertype from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if naam (nullable) is None
        # and model_fields_set contains the field
        if self.naam is None and "naam" in self.model_fields_set:
            _dict['naam'] = None

        # set to None if volume_m3 (nullable) is None
        # and model_fields_set contains the field
        if self.volume_m3 is None and "volume_m3" in self.model_fields_set:
            _dict['volumeM3'] = None

        # set to None if gewicht_kg (nullable) is None
        # and model_fields_set contains the field
        if self.gewicht_kg is None and "gewicht_kg" in self.model_fields_set:
            _dict['gewichtKg'] = None

        # set to None if wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum_dp is None and "wijzigingsdatum_dp" in self.model_fields_set:
            _dict['wijzigingsdatumDp'] = None

        # set to None if verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.verwijderd_dp is None and "verwijderd_dp" in self.model_fields_set:
            _dict['verwijderdDp'] = None

        # set to None if containertype_artikelcode (nullable) is None
        # and model_fields_set contains the field
        if self.containertype_artikelcode is None and "containertype_artikelcode" in self.model_fields_set:
            _dict['containertypeArtikelcode'] = None

        # set to None if containertype_hijskraantype_naam (nullable) is None
        # and model_fields_set contains the field
        if self.containertype_hijskraantype_naam is None and "containertype_hijskraantype_naam" in self.model_fields_set:
            _dict['containertypeHijskraantypeNaam'] = None

        # set to None if containertype_hijskraan_opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.containertype_hijskraan_opmerking is None and "containertype_hijskraan_opmerking" in self.model_fields_set:
            _dict['containertypeHijskraanOpmerking'] = None

        # set to None if containertype_container_type (nullable) is None
        # and model_fields_set contains the field
        if self.containertype_container_type is None and "containertype_container_type" in self.model_fields_set:
            _dict['containertypeContainerType'] = None

        # set to None if containertype_compressie_container_ind (nullable) is None
        # and model_fields_set contains the field
        if self.containertype_compressie_container_ind is None and "containertype_compressie_container_ind" in self.model_fields_set:
            _dict['containertypeCompressieContainerInd'] = None

        # set to None if containertype_compressiefactor (nullable) is None
        # and model_fields_set contains the field
        if self.containertype_compressiefactor is None and "containertype_compressiefactor" in self.model_fields_set:
            _dict['containertypeCompressiefactor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcontainertype from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultContainertypeLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "naam": obj.get("naam"),
            "volumeM3": obj.get("volumeM3"),
            "gewichtKg": obj.get("gewichtKg"),
            "wijzigingsdatumDp": obj.get("wijzigingsdatumDp"),
            "verwijderdDp": obj.get("verwijderdDp"),
            "containertypeArtikelcode": obj.get("containertypeArtikelcode"),
            "containertypeHijskraantypeNaam": obj.get("containertypeHijskraantypeNaam"),
            "containertypeHijskraanOpmerking": obj.get("containertypeHijskraanOpmerking"),
            "containertypeContainerType": obj.get("containertypeContainerType"),
            "containertypeCompressieContainerInd": obj.get("containertypeCompressieContainerInd"),
            "containertypeCompressiefactor": obj.get("containertypeCompressiefactor")
        })
        return _obj


