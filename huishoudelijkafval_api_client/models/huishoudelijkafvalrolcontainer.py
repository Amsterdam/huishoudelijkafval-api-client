# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_rolcontainer_links import HuishoudelijkafvaldefaultRolcontainerLinks
from huishoudelijkafval_api_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalrolcontainer(BaseModel):
    """
    Deze tabel bevat informatie over de stanmgegevens van de rolcontainers in Gemeente Amsterdam
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultRolcontainerLinks = Field(alias="_links")
    id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)] = Field(description="Unieke aanduiding van een rolcontainer")
    fractie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Container fractieomschrijving zoals door leverancier is geleverd.", alias="fractieOmschrijving")
    chip_nummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke aanduiding van de chip dat aan de rolcontainer is bevestigd. Het chipnummer is van buitenaf niet leesbaar.", alias="chipNummer")
    chip_type: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het type van de chip dat aan de rolcontainer is bevestigd.", alias="chipType")
    heeft_chip_sinds: Optional[date] = Field(default=None, description="Datum waarop de chip aan de rolcontainer is bevestigd. ", alias="heeftChipSinds")
    barcode: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De barcode van de chip dat van buitenaf leesbaar is.")
    heeft_barcode_sinds: Optional[date] = Field(default=None, description="Dit attribuut, heeft_barcode_sinds, geeft de datum aan waarop de chip is voorzien van een barcode..", alias="heeftBarcodeSinds")
    status: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft de actuele status van een rolcontainer aan. De volgende statussen zijn mogelijk.  Active, inactive en blocked.")
    status_sinds: Optional[date] = Field(default=None, description="Datum waarop de laatste status van een rolcontainer van toepassing is", alias="statusSinds")
    aanmaakdatum: Optional[datetime] = Field(default=None, description="Datum tijd waarop de rolcontainer in het systeem is aangemaakt")
    wijzigingsdatum: Optional[datetime] = Field(default=None, description="Datum tijd waarop de rolcontainer in het systeem voor het laatst is aangepast")
    soort_container: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft een aantal kenmerken (materieel, inhoud in liter en fractie) van een rolcontainer. Bijvoorbeeld: GFE/T 140 Kunststof.", alias="soortContainer")
    straatnaam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam van de straat")
    huisnummer: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="De numerieke aanduiding zoals deze door het gemeente bestuur aan het object is toegekend dan wel een door of namens het bevoegde gemeentelijke orgaan ten aanzien van een adresseerbaar object toegekende nummering.")
    huisletter: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Een alfabetisch teken achter het huisnummer zoals dit door het gemeentebestuur is toegekend dan wel een door of namens het bevoegde gemeentelijke orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfabetisch teken.")
    huisnummertoevoeging: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Die let­ters of te­kens die nood­za­ke­lijk zijn om, naast huis­num­mer en -let­ter, de brie­ven­bus te vin­den dan wel een door of na­mens het be­voeg­de ge­meen­te­lij­ke or­gaan ten aan­zien van een adres­seer­baar ob­ject toe­ge­ken­de toe­voe­ging aan een huis­num­mer of een com­bi­na­tie van huis­let­ter en huis­num­mer")
    postcode: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De door de Post NL vast­ge­stel­de code be­ho­rend bij de straat­naam en het huis­num­mer dan wel de door Post NL vast­ge­stel­de code be­ho­ren­de bij een be­paal­de com­bi­na­tie van een naam open­ba­re ruim­te en een huis­num­mer.")
    woonplaats_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Een Woonplaats is een door het bevoegde gemeentelijke orgaan als zodanig aangewezen en van een naam voorzien gedeelte van het grondgebied van de gemeente.", alias="woonplaatsNaam")
    geometrie: Optional[Point] = None
    typeadresseerbaarobject: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Een Adresseerbaar object is een (abstract) object waaraan adressen kunnen worden toegekend")
    gebruiksdoel: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Een categorisering van de gebruiksdoelen van het betreffende adreseerbareobject, zoals dit door de overheid als zodanig is toegestaan")
    bag_woonplaats_id: Optional[StrictStr] = Field(description="Officiële naam woonplaats", alias="bagWoonplaatsId")
    bag_openbareruimte_id: Optional[StrictStr] = Field(description="BAG Openbare ruimte identificatie", alias="bagOpenbareruimteId")
    bag_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagVerblijfsobjectId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="BAG Nummeraanduiding identificatie", alias="bagNummeraanduidingId")
    gebied_buurt_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het object", alias="gebiedBuurtNaam")
    gebied_buurt_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke code (hier in zie je de Stadsdeel- en Wijkcode terug)", alias="gebiedBuurtCode")
    gebied_buurt_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object (naam van het kenmerk wijzigt van ID naar Identificatie in 2019)", alias="gebiedBuurtId")
    gebied_wijk_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van de wijk", alias="gebiedWijkNaam")
    gebied_wijk_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Volledige, samengestelde, code, bestaande uit stadsdeelcode en wijkcode", alias="gebiedWijkCode")
    gebied_wijk_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object (In 2019 wijzigt de naam van het kenmerk van ID naar Identificatie)", alias="gebiedWijkId")
    gebied_stadsdeel_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het stadsdeel.", alias="gebiedStadsdeelNaam")
    gebied_stadsdeel_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Officile code van het stadsdeel", alias="gebiedStadsdeelCode")
    gebied_stadsdeel_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object (in 2019 wijzigt de naam van het kenmerk van ID naar Identificatie)", alias="gebiedStadsdeelId")
    gebied_ggw_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het gebiedsgericht werken gebied", alias="gebiedGgwNaam")
    gebied_ggw_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De unieke code van het gebiedsgericht werken gebied", alias="gebiedGgwCode")
    gebied_ggw_id: Optional[StrictStr] = Field(description="De unieke identificatie van het gebiedsgericht werken gebied", alias="gebiedGgwId")
    __properties: ClassVar[List[str]] = ["_links", "id", "fractieOmschrijving", "chipNummer", "chipType", "heeftChipSinds", "barcode", "heeftBarcodeSinds", "status", "statusSinds", "aanmaakdatum", "wijzigingsdatum", "soortContainer", "straatnaam", "huisnummer", "huisletter", "huisnummertoevoeging", "postcode", "woonplaatsNaam", "geometrie", "typeadresseerbaarobject", "gebruiksdoel", "bagWoonplaatsId", "bagOpenbareruimteId", "bagVerblijfsobjectId", "bagNummeraanduidingId", "gebiedBuurtNaam", "gebiedBuurtCode", "gebiedBuurtId", "gebiedWijkNaam", "gebiedWijkCode", "gebiedWijkId", "gebiedStadsdeelNaam", "gebiedStadsdeelCode", "gebiedStadsdeelId", "gebiedGgwNaam", "gebiedGgwCode", "gebiedGgwId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalrolcontainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bag_woonplaats_id",
            "bag_openbareruimte_id",
            "bag_verblijfsobject_id",
            "bag_nummeraanduiding_id",
            "gebied_buurt_id",
            "gebied_wijk_id",
            "gebied_stadsdeel_id",
            "gebied_ggw_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if fractie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_omschrijving is None and "fractie_omschrijving" in self.model_fields_set:
            _dict['fractieOmschrijving'] = None

        # set to None if chip_nummer (nullable) is None
        # and model_fields_set contains the field
        if self.chip_nummer is None and "chip_nummer" in self.model_fields_set:
            _dict['chipNummer'] = None

        # set to None if chip_type (nullable) is None
        # and model_fields_set contains the field
        if self.chip_type is None and "chip_type" in self.model_fields_set:
            _dict['chipType'] = None

        # set to None if heeft_chip_sinds (nullable) is None
        # and model_fields_set contains the field
        if self.heeft_chip_sinds is None and "heeft_chip_sinds" in self.model_fields_set:
            _dict['heeftChipSinds'] = None

        # set to None if barcode (nullable) is None
        # and model_fields_set contains the field
        if self.barcode is None and "barcode" in self.model_fields_set:
            _dict['barcode'] = None

        # set to None if heeft_barcode_sinds (nullable) is None
        # and model_fields_set contains the field
        if self.heeft_barcode_sinds is None and "heeft_barcode_sinds" in self.model_fields_set:
            _dict['heeftBarcodeSinds'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if status_sinds (nullable) is None
        # and model_fields_set contains the field
        if self.status_sinds is None and "status_sinds" in self.model_fields_set:
            _dict['statusSinds'] = None

        # set to None if aanmaakdatum (nullable) is None
        # and model_fields_set contains the field
        if self.aanmaakdatum is None and "aanmaakdatum" in self.model_fields_set:
            _dict['aanmaakdatum'] = None

        # set to None if wijzigingsdatum (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum is None and "wijzigingsdatum" in self.model_fields_set:
            _dict['wijzigingsdatum'] = None

        # set to None if soort_container (nullable) is None
        # and model_fields_set contains the field
        if self.soort_container is None and "soort_container" in self.model_fields_set:
            _dict['soortContainer'] = None

        # set to None if straatnaam (nullable) is None
        # and model_fields_set contains the field
        if self.straatnaam is None and "straatnaam" in self.model_fields_set:
            _dict['straatnaam'] = None

        # set to None if huisnummer (nullable) is None
        # and model_fields_set contains the field
        if self.huisnummer is None and "huisnummer" in self.model_fields_set:
            _dict['huisnummer'] = None

        # set to None if huisletter (nullable) is None
        # and model_fields_set contains the field
        if self.huisletter is None and "huisletter" in self.model_fields_set:
            _dict['huisletter'] = None

        # set to None if huisnummertoevoeging (nullable) is None
        # and model_fields_set contains the field
        if self.huisnummertoevoeging is None and "huisnummertoevoeging" in self.model_fields_set:
            _dict['huisnummertoevoeging'] = None

        # set to None if postcode (nullable) is None
        # and model_fields_set contains the field
        if self.postcode is None and "postcode" in self.model_fields_set:
            _dict['postcode'] = None

        # set to None if woonplaats_naam (nullable) is None
        # and model_fields_set contains the field
        if self.woonplaats_naam is None and "woonplaats_naam" in self.model_fields_set:
            _dict['woonplaatsNaam'] = None

        # set to None if typeadresseerbaarobject (nullable) is None
        # and model_fields_set contains the field
        if self.typeadresseerbaarobject is None and "typeadresseerbaarobject" in self.model_fields_set:
            _dict['typeadresseerbaarobject'] = None

        # set to None if gebruiksdoel (nullable) is None
        # and model_fields_set contains the field
        if self.gebruiksdoel is None and "gebruiksdoel" in self.model_fields_set:
            _dict['gebruiksdoel'] = None

        # set to None if bag_woonplaats_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_woonplaats_id is None and "bag_woonplaats_id" in self.model_fields_set:
            _dict['bagWoonplaatsId'] = None

        # set to None if bag_openbareruimte_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_openbareruimte_id is None and "bag_openbareruimte_id" in self.model_fields_set:
            _dict['bagOpenbareruimteId'] = None

        # set to None if bag_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_verblijfsobject_id is None and "bag_verblijfsobject_id" in self.model_fields_set:
            _dict['bagVerblijfsobjectId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        # set to None if gebied_buurt_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_buurt_naam is None and "gebied_buurt_naam" in self.model_fields_set:
            _dict['gebiedBuurtNaam'] = None

        # set to None if gebied_buurt_code (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_buurt_code is None and "gebied_buurt_code" in self.model_fields_set:
            _dict['gebiedBuurtCode'] = None

        # set to None if gebied_buurt_id (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_buurt_id is None and "gebied_buurt_id" in self.model_fields_set:
            _dict['gebiedBuurtId'] = None

        # set to None if gebied_wijk_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_wijk_naam is None and "gebied_wijk_naam" in self.model_fields_set:
            _dict['gebiedWijkNaam'] = None

        # set to None if gebied_wijk_code (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_wijk_code is None and "gebied_wijk_code" in self.model_fields_set:
            _dict['gebiedWijkCode'] = None

        # set to None if gebied_wijk_id (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_wijk_id is None and "gebied_wijk_id" in self.model_fields_set:
            _dict['gebiedWijkId'] = None

        # set to None if gebied_stadsdeel_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_stadsdeel_naam is None and "gebied_stadsdeel_naam" in self.model_fields_set:
            _dict['gebiedStadsdeelNaam'] = None

        # set to None if gebied_stadsdeel_code (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_stadsdeel_code is None and "gebied_stadsdeel_code" in self.model_fields_set:
            _dict['gebiedStadsdeelCode'] = None

        # set to None if gebied_stadsdeel_id (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_stadsdeel_id is None and "gebied_stadsdeel_id" in self.model_fields_set:
            _dict['gebiedStadsdeelId'] = None

        # set to None if gebied_ggw_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_ggw_naam is None and "gebied_ggw_naam" in self.model_fields_set:
            _dict['gebiedGgwNaam'] = None

        # set to None if gebied_ggw_code (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_ggw_code is None and "gebied_ggw_code" in self.model_fields_set:
            _dict['gebiedGgwCode'] = None

        # set to None if gebied_ggw_id (nullable) is None
        # and model_fields_set contains the field
        if self.gebied_ggw_id is None and "gebied_ggw_id" in self.model_fields_set:
            _dict['gebiedGgwId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalrolcontainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultRolcontainerLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "fractieOmschrijving": obj.get("fractieOmschrijving"),
            "chipNummer": obj.get("chipNummer"),
            "chipType": obj.get("chipType"),
            "heeftChipSinds": obj.get("heeftChipSinds"),
            "barcode": obj.get("barcode"),
            "heeftBarcodeSinds": obj.get("heeftBarcodeSinds"),
            "status": obj.get("status"),
            "statusSinds": obj.get("statusSinds"),
            "aanmaakdatum": obj.get("aanmaakdatum"),
            "wijzigingsdatum": obj.get("wijzigingsdatum"),
            "soortContainer": obj.get("soortContainer"),
            "straatnaam": obj.get("straatnaam"),
            "huisnummer": obj.get("huisnummer"),
            "huisletter": obj.get("huisletter"),
            "huisnummertoevoeging": obj.get("huisnummertoevoeging"),
            "postcode": obj.get("postcode"),
            "woonplaatsNaam": obj.get("woonplaatsNaam"),
            "geometrie": Point.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "typeadresseerbaarobject": obj.get("typeadresseerbaarobject"),
            "gebruiksdoel": obj.get("gebruiksdoel"),
            "bagWoonplaatsId": obj.get("bagWoonplaatsId"),
            "bagOpenbareruimteId": obj.get("bagOpenbareruimteId"),
            "bagVerblijfsobjectId": obj.get("bagVerblijfsobjectId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId"),
            "gebiedBuurtNaam": obj.get("gebiedBuurtNaam"),
            "gebiedBuurtCode": obj.get("gebiedBuurtCode"),
            "gebiedBuurtId": obj.get("gebiedBuurtId"),
            "gebiedWijkNaam": obj.get("gebiedWijkNaam"),
            "gebiedWijkCode": obj.get("gebiedWijkCode"),
            "gebiedWijkId": obj.get("gebiedWijkId"),
            "gebiedStadsdeelNaam": obj.get("gebiedStadsdeelNaam"),
            "gebiedStadsdeelCode": obj.get("gebiedStadsdeelCode"),
            "gebiedStadsdeelId": obj.get("gebiedStadsdeelId"),
            "gebiedGgwNaam": obj.get("gebiedGgwNaam"),
            "gebiedGgwCode": obj.get("gebiedGgwCode"),
            "gebiedGgwId": obj.get("gebiedGgwId")
        })
        return _obj


