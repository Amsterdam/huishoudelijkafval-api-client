# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_ticket_links import HuishoudelijkafvaldefaultTicketLinks
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalticket(BaseModel):
    """
    ticket
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultTicketLinks = Field(alias="_links")
    id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)] = Field(description="Identificerend kenmerk van het ticket.")
    container_id: Optional[StrictStr] = Field(description="Identificerend kenmerk van de container.", alias="containerId")
    containerlocatie_id: Optional[StrictStr] = Field(description="Identificerend kenmerk van de containerlocatie.", alias="containerlocatieId")
    datum_creatie: Optional[datetime] = Field(default=None, description="De datum waarop het ticket aangemaakt is.", alias="datumCreatie")
    datum_factuur: Optional[datetime] = Field(default=None, description="De datum waarop het ticket gefactureerd is.", alias="datumFactuur")
    factuur_nummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het nummer van de factuur.", alias="factuurNummer")
    datum_wijziging: Optional[datetime] = Field(default=None, description="De datum waarop het ticket is gewijzigd.", alias="datumWijziging")
    referentienummer_leverancier: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het referentienummer dat door de leverancier aan het ticket gegeven wordt.", alias="referentienummerLeverancier")
    prioriteit_opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Een opmerking die toegevoegd wordt om de prioritering te verduidelijken.", alias="prioriteitOpmerking")
    prioriteit_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam die de soort prioriteit weergeeft.", alias="prioriteitNaam")
    prioriteit_responstijd: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="De toegestane responsetijd voor deze prioriteit. ", alias="prioriteitResponstijd")
    probleem_module_naam: Optional[List[Annotated[str, Field(strict=True, max_length=2147483647)]]] = Field(default=None, alias="probleemModuleNaam")
    probleem: Optional[List[Annotated[str, Field(strict=True, max_length=2147483647)]]] = None
    oorzaak: Optional[List[Annotated[str, Field(strict=True, max_length=2147483647)]]] = None
    oplossing: Optional[List[Annotated[str, Field(strict=True, max_length=2147483647)]]] = None
    onderhoudsbedrijf: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het onderhoudsbedrijf.")
    eigenaar: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van de eigenaar van de container.")
    ticketstatus: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De status van het ticket.")
    tickettype: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het type ticket.")
    rangorde_nummer_tickettype: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Het rangordenummer van het type ticket.", alias="rangordeNummerTickettype")
    datum_workflow_start: Optional[datetime] = Field(default=None, description="De datum waarop de workflow start.", alias="datumWorkflowStart")
    datum_geaccepteerd: Optional[datetime] = Field(default=None, description="De datum waarop het ticket geaccepteerd is door het onderhoudsbedrijf.", alias="datumGeaccepteerd")
    datum_offerte: Optional[datetime] = Field(default=None, description="De datum waarop de offerte is aangemaakt .", alias="datumOfferte")
    datum_gepland: Optional[datetime] = Field(default=None, description="De datum waarop de uitvoering van de werkzaamheden is ingepland.", alias="datumGepland")
    datum_gereed: Optional[datetime] = Field(default=None, description="De datum waarop de werkzaamheden uitgevoerd zijn.", alias="datumGereed")
    datum_afgerond: Optional[datetime] = Field(default=None, description="De datum waarop de werkzaamheden als gereed aangegeven zijn door het onderhoudsbedrijf.", alias="datumAfgerond")
    datum_technische_goedkeuring: Optional[datetime] = Field(default=None, description="De datum waarop de technische aspecten van de werkzaamheden goed- of afgekeurd zijn.", alias="datumTechnischeGoedkeuring")
    datum_financiele_goedkeuring: Optional[datetime] = Field(default=None, description="De datum waarop de financiale aspecten van de werkzaamheden goed- of afgekeurd zijn.", alias="datumFinancieleGoedkeuring")
    datum_gefactureerd: Optional[datetime] = Field(default=None, description="De datum waarop de factuur in het systeem de status 'gefactureerd' krijgt.", alias="datumGefactureerd")
    datum_afgewezen: Optional[datetime] = Field(default=None, description="De datum waarop het ticket de status 'afgewezen' krijgt.", alias="datumAfgewezen")
    reden_afgewezen: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De reden waarom het ticket de status 'afgewezen' heeft gekregen.", alias="redenAfgewezen")
    prijs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De totale prijs van de gebruikte onderdelen en de uitgevoerde werkzaamheden.")
    prijs_offerte: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De totale prijs op de offerte voor de te gebruiken onderdelen en de uit te voeren werkzaamheden.", alias="prijsOfferte")
    doorlooptijd: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De tijdsspanne in werkdagen tussen de 'datumCreatie'en de 'datumAfgerond' of de tijdsspanne in werkdagen tussen de 'datumCreatie' en de laatste statuswijziging in het geval het ticket nog niet afgerond is.")
    items_definitief: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De onderdelen en de werkzaamheden zoals deze op de factuur vermeld worden.", alias="itemsDefinitief")
    items_offerte: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De onderdelen en de werkzaamheden zoals deze op de offerte vermeld worden.", alias="itemsOfferte")
    gbd_buurt_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object", alias="gbdBuurtId")
    gbd_buurt_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het object.", alias="gbdBuurtNaam")
    gbd_buurt_volgnummer: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Uniek volgnummer van de toestand van het object.", alias="gbdBuurtVolgnummer")
    gbd_buurt_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke code.", alias="gbdBuurtCode")
    gbd_wijk_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object.", alias="gbdWijkId")
    gbd_wijk_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het object.", alias="gbdWijkNaam")
    gbd_wijk_volgnummer: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Uniek volgnummer van de toestand van het object.", alias="gbdWijkVolgnummer")
    gbd_stadsdeel_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object.", alias="gbdStadsdeelId")
    gbd_stadsdeel_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het object.", alias="gbdStadsdeelNaam")
    gbd_stadsdeel_volgnummer: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Uniek volgnummer van de toestand van het object.", alias="gbdStadsdeelVolgnummer")
    gbd_ggw_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object.", alias="gbdGgwId")
    gbd_ggw_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het object.", alias="gbdGgwNaam")
    gbd_ggw_volgnummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Uniek volgnummer van de toestand van het object.", alias="gbdGgwVolgnummer")
    __properties: ClassVar[List[str]] = ["_links", "id", "containerId", "containerlocatieId", "datumCreatie", "datumFactuur", "factuurNummer", "datumWijziging", "referentienummerLeverancier", "prioriteitOpmerking", "prioriteitNaam", "prioriteitResponstijd", "probleemModuleNaam", "probleem", "oorzaak", "oplossing", "onderhoudsbedrijf", "eigenaar", "ticketstatus", "tickettype", "rangordeNummerTickettype", "datumWorkflowStart", "datumGeaccepteerd", "datumOfferte", "datumGepland", "datumGereed", "datumAfgerond", "datumTechnischeGoedkeuring", "datumFinancieleGoedkeuring", "datumGefactureerd", "datumAfgewezen", "redenAfgewezen", "prijs", "prijsOfferte", "doorlooptijd", "itemsDefinitief", "itemsOfferte", "gbdBuurtId", "gbdBuurtNaam", "gbdBuurtVolgnummer", "gbdBuurtCode", "gbdWijkId", "gbdWijkNaam", "gbdWijkVolgnummer", "gbdStadsdeelId", "gbdStadsdeelNaam", "gbdStadsdeelVolgnummer", "gbdGgwId", "gbdGgwNaam", "gbdGgwVolgnummer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalticket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "container_id",
            "containerlocatie_id",
            "gbd_buurt_id",
            "gbd_wijk_id",
            "gbd_stadsdeel_id",
            "gbd_ggw_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if container_id (nullable) is None
        # and model_fields_set contains the field
        if self.container_id is None and "container_id" in self.model_fields_set:
            _dict['containerId'] = None

        # set to None if containerlocatie_id (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_id is None and "containerlocatie_id" in self.model_fields_set:
            _dict['containerlocatieId'] = None

        # set to None if datum_creatie (nullable) is None
        # and model_fields_set contains the field
        if self.datum_creatie is None and "datum_creatie" in self.model_fields_set:
            _dict['datumCreatie'] = None

        # set to None if datum_factuur (nullable) is None
        # and model_fields_set contains the field
        if self.datum_factuur is None and "datum_factuur" in self.model_fields_set:
            _dict['datumFactuur'] = None

        # set to None if factuur_nummer (nullable) is None
        # and model_fields_set contains the field
        if self.factuur_nummer is None and "factuur_nummer" in self.model_fields_set:
            _dict['factuurNummer'] = None

        # set to None if datum_wijziging (nullable) is None
        # and model_fields_set contains the field
        if self.datum_wijziging is None and "datum_wijziging" in self.model_fields_set:
            _dict['datumWijziging'] = None

        # set to None if referentienummer_leverancier (nullable) is None
        # and model_fields_set contains the field
        if self.referentienummer_leverancier is None and "referentienummer_leverancier" in self.model_fields_set:
            _dict['referentienummerLeverancier'] = None

        # set to None if prioriteit_opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.prioriteit_opmerking is None and "prioriteit_opmerking" in self.model_fields_set:
            _dict['prioriteitOpmerking'] = None

        # set to None if prioriteit_naam (nullable) is None
        # and model_fields_set contains the field
        if self.prioriteit_naam is None and "prioriteit_naam" in self.model_fields_set:
            _dict['prioriteitNaam'] = None

        # set to None if prioriteit_responstijd (nullable) is None
        # and model_fields_set contains the field
        if self.prioriteit_responstijd is None and "prioriteit_responstijd" in self.model_fields_set:
            _dict['prioriteitResponstijd'] = None

        # set to None if probleem_module_naam (nullable) is None
        # and model_fields_set contains the field
        if self.probleem_module_naam is None and "probleem_module_naam" in self.model_fields_set:
            _dict['probleemModuleNaam'] = None

        # set to None if probleem (nullable) is None
        # and model_fields_set contains the field
        if self.probleem is None and "probleem" in self.model_fields_set:
            _dict['probleem'] = None

        # set to None if oorzaak (nullable) is None
        # and model_fields_set contains the field
        if self.oorzaak is None and "oorzaak" in self.model_fields_set:
            _dict['oorzaak'] = None

        # set to None if oplossing (nullable) is None
        # and model_fields_set contains the field
        if self.oplossing is None and "oplossing" in self.model_fields_set:
            _dict['oplossing'] = None

        # set to None if onderhoudsbedrijf (nullable) is None
        # and model_fields_set contains the field
        if self.onderhoudsbedrijf is None and "onderhoudsbedrijf" in self.model_fields_set:
            _dict['onderhoudsbedrijf'] = None

        # set to None if eigenaar (nullable) is None
        # and model_fields_set contains the field
        if self.eigenaar is None and "eigenaar" in self.model_fields_set:
            _dict['eigenaar'] = None

        # set to None if ticketstatus (nullable) is None
        # and model_fields_set contains the field
        if self.ticketstatus is None and "ticketstatus" in self.model_fields_set:
            _dict['ticketstatus'] = None

        # set to None if tickettype (nullable) is None
        # and model_fields_set contains the field
        if self.tickettype is None and "tickettype" in self.model_fields_set:
            _dict['tickettype'] = None

        # set to None if rangorde_nummer_tickettype (nullable) is None
        # and model_fields_set contains the field
        if self.rangorde_nummer_tickettype is None and "rangorde_nummer_tickettype" in self.model_fields_set:
            _dict['rangordeNummerTickettype'] = None

        # set to None if datum_workflow_start (nullable) is None
        # and model_fields_set contains the field
        if self.datum_workflow_start is None and "datum_workflow_start" in self.model_fields_set:
            _dict['datumWorkflowStart'] = None

        # set to None if datum_geaccepteerd (nullable) is None
        # and model_fields_set contains the field
        if self.datum_geaccepteerd is None and "datum_geaccepteerd" in self.model_fields_set:
            _dict['datumGeaccepteerd'] = None

        # set to None if datum_offerte (nullable) is None
        # and model_fields_set contains the field
        if self.datum_offerte is None and "datum_offerte" in self.model_fields_set:
            _dict['datumOfferte'] = None

        # set to None if datum_gepland (nullable) is None
        # and model_fields_set contains the field
        if self.datum_gepland is None and "datum_gepland" in self.model_fields_set:
            _dict['datumGepland'] = None

        # set to None if datum_gereed (nullable) is None
        # and model_fields_set contains the field
        if self.datum_gereed is None and "datum_gereed" in self.model_fields_set:
            _dict['datumGereed'] = None

        # set to None if datum_afgerond (nullable) is None
        # and model_fields_set contains the field
        if self.datum_afgerond is None and "datum_afgerond" in self.model_fields_set:
            _dict['datumAfgerond'] = None

        # set to None if datum_technische_goedkeuring (nullable) is None
        # and model_fields_set contains the field
        if self.datum_technische_goedkeuring is None and "datum_technische_goedkeuring" in self.model_fields_set:
            _dict['datumTechnischeGoedkeuring'] = None

        # set to None if datum_financiele_goedkeuring (nullable) is None
        # and model_fields_set contains the field
        if self.datum_financiele_goedkeuring is None and "datum_financiele_goedkeuring" in self.model_fields_set:
            _dict['datumFinancieleGoedkeuring'] = None

        # set to None if datum_gefactureerd (nullable) is None
        # and model_fields_set contains the field
        if self.datum_gefactureerd is None and "datum_gefactureerd" in self.model_fields_set:
            _dict['datumGefactureerd'] = None

        # set to None if datum_afgewezen (nullable) is None
        # and model_fields_set contains the field
        if self.datum_afgewezen is None and "datum_afgewezen" in self.model_fields_set:
            _dict['datumAfgewezen'] = None

        # set to None if reden_afgewezen (nullable) is None
        # and model_fields_set contains the field
        if self.reden_afgewezen is None and "reden_afgewezen" in self.model_fields_set:
            _dict['redenAfgewezen'] = None

        # set to None if prijs (nullable) is None
        # and model_fields_set contains the field
        if self.prijs is None and "prijs" in self.model_fields_set:
            _dict['prijs'] = None

        # set to None if prijs_offerte (nullable) is None
        # and model_fields_set contains the field
        if self.prijs_offerte is None and "prijs_offerte" in self.model_fields_set:
            _dict['prijsOfferte'] = None

        # set to None if doorlooptijd (nullable) is None
        # and model_fields_set contains the field
        if self.doorlooptijd is None and "doorlooptijd" in self.model_fields_set:
            _dict['doorlooptijd'] = None

        # set to None if items_definitief (nullable) is None
        # and model_fields_set contains the field
        if self.items_definitief is None and "items_definitief" in self.model_fields_set:
            _dict['itemsDefinitief'] = None

        # set to None if items_offerte (nullable) is None
        # and model_fields_set contains the field
        if self.items_offerte is None and "items_offerte" in self.model_fields_set:
            _dict['itemsOfferte'] = None

        # set to None if gbd_buurt_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_id is None and "gbd_buurt_id" in self.model_fields_set:
            _dict['gbdBuurtId'] = None

        # set to None if gbd_buurt_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_naam is None and "gbd_buurt_naam" in self.model_fields_set:
            _dict['gbdBuurtNaam'] = None

        # set to None if gbd_buurt_volgnummer (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_volgnummer is None and "gbd_buurt_volgnummer" in self.model_fields_set:
            _dict['gbdBuurtVolgnummer'] = None

        # set to None if gbd_buurt_code (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_code is None and "gbd_buurt_code" in self.model_fields_set:
            _dict['gbdBuurtCode'] = None

        # set to None if gbd_wijk_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_wijk_id is None and "gbd_wijk_id" in self.model_fields_set:
            _dict['gbdWijkId'] = None

        # set to None if gbd_wijk_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_wijk_naam is None and "gbd_wijk_naam" in self.model_fields_set:
            _dict['gbdWijkNaam'] = None

        # set to None if gbd_wijk_volgnummer (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_wijk_volgnummer is None and "gbd_wijk_volgnummer" in self.model_fields_set:
            _dict['gbdWijkVolgnummer'] = None

        # set to None if gbd_stadsdeel_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_stadsdeel_id is None and "gbd_stadsdeel_id" in self.model_fields_set:
            _dict['gbdStadsdeelId'] = None

        # set to None if gbd_stadsdeel_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_stadsdeel_naam is None and "gbd_stadsdeel_naam" in self.model_fields_set:
            _dict['gbdStadsdeelNaam'] = None

        # set to None if gbd_stadsdeel_volgnummer (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_stadsdeel_volgnummer is None and "gbd_stadsdeel_volgnummer" in self.model_fields_set:
            _dict['gbdStadsdeelVolgnummer'] = None

        # set to None if gbd_ggw_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_ggw_id is None and "gbd_ggw_id" in self.model_fields_set:
            _dict['gbdGgwId'] = None

        # set to None if gbd_ggw_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_ggw_naam is None and "gbd_ggw_naam" in self.model_fields_set:
            _dict['gbdGgwNaam'] = None

        # set to None if gbd_ggw_volgnummer (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_ggw_volgnummer is None and "gbd_ggw_volgnummer" in self.model_fields_set:
            _dict['gbdGgwVolgnummer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalticket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultTicketLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "containerId": obj.get("containerId"),
            "containerlocatieId": obj.get("containerlocatieId"),
            "datumCreatie": obj.get("datumCreatie"),
            "datumFactuur": obj.get("datumFactuur"),
            "factuurNummer": obj.get("factuurNummer"),
            "datumWijziging": obj.get("datumWijziging"),
            "referentienummerLeverancier": obj.get("referentienummerLeverancier"),
            "prioriteitOpmerking": obj.get("prioriteitOpmerking"),
            "prioriteitNaam": obj.get("prioriteitNaam"),
            "prioriteitResponstijd": obj.get("prioriteitResponstijd"),
            "probleemModuleNaam": obj.get("probleemModuleNaam"),
            "probleem": obj.get("probleem"),
            "oorzaak": obj.get("oorzaak"),
            "oplossing": obj.get("oplossing"),
            "onderhoudsbedrijf": obj.get("onderhoudsbedrijf"),
            "eigenaar": obj.get("eigenaar"),
            "ticketstatus": obj.get("ticketstatus"),
            "tickettype": obj.get("tickettype"),
            "rangordeNummerTickettype": obj.get("rangordeNummerTickettype"),
            "datumWorkflowStart": obj.get("datumWorkflowStart"),
            "datumGeaccepteerd": obj.get("datumGeaccepteerd"),
            "datumOfferte": obj.get("datumOfferte"),
            "datumGepland": obj.get("datumGepland"),
            "datumGereed": obj.get("datumGereed"),
            "datumAfgerond": obj.get("datumAfgerond"),
            "datumTechnischeGoedkeuring": obj.get("datumTechnischeGoedkeuring"),
            "datumFinancieleGoedkeuring": obj.get("datumFinancieleGoedkeuring"),
            "datumGefactureerd": obj.get("datumGefactureerd"),
            "datumAfgewezen": obj.get("datumAfgewezen"),
            "redenAfgewezen": obj.get("redenAfgewezen"),
            "prijs": obj.get("prijs"),
            "prijsOfferte": obj.get("prijsOfferte"),
            "doorlooptijd": obj.get("doorlooptijd"),
            "itemsDefinitief": obj.get("itemsDefinitief"),
            "itemsOfferte": obj.get("itemsOfferte"),
            "gbdBuurtId": obj.get("gbdBuurtId"),
            "gbdBuurtNaam": obj.get("gbdBuurtNaam"),
            "gbdBuurtVolgnummer": obj.get("gbdBuurtVolgnummer"),
            "gbdBuurtCode": obj.get("gbdBuurtCode"),
            "gbdWijkId": obj.get("gbdWijkId"),
            "gbdWijkNaam": obj.get("gbdWijkNaam"),
            "gbdWijkVolgnummer": obj.get("gbdWijkVolgnummer"),
            "gbdStadsdeelId": obj.get("gbdStadsdeelId"),
            "gbdStadsdeelNaam": obj.get("gbdStadsdeelNaam"),
            "gbdStadsdeelVolgnummer": obj.get("gbdStadsdeelVolgnummer"),
            "gbdGgwId": obj.get("gbdGgwId"),
            "gbdGgwNaam": obj.get("gbdGgwNaam"),
            "gbdGgwVolgnummer": obj.get("gbdGgwVolgnummer")
        })
        return _obj


