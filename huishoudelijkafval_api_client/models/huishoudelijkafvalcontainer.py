# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_container_links import HuishoudelijkafvaldefaultContainerLinks
from huishoudelijkafval_api_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalcontainer(BaseModel):
    """
    Bevat een overzicht van alle onder- en bovengronds afvalcontainers in Gemeente Amsterdam
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultContainerLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Unieke aanduiding objecttype")
    id_nummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Identificatie dat door de fabrikant aan het object is gegeven", alias="idNummer")
    serienummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="serienummer uitgegeven door de fabrikant")
    cluster_id: Optional[StrictStr] = Field(description="Uniek identificerend kenmerk van cluster waaraan de container is gerelateerd", alias="clusterId")
    eigenaar_id: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Identificerend kenmerk eigenaar", alias="eigenaarId")
    eigenaar_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam eigenaar", alias="eigenaarNaam")
    status: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Status van de container,0 - inactief, 1 - actief, 2 - gepland")
    fractie_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Type afvalfractie code waarvoor de container is bedoeld: 1 - Rest, 2 - Glas, 3 - Papier, 4 - Plastic, 5 - Textiel, 6 - GFT, 9 - Brood", alias="fractieCode")
    fractie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Container fractieomschrijving zoals door leverancier is geleverd.", alias="fractieOmschrijving")
    datum_creatie: Optional[date] = Field(default=None, description="Datum waarop het object is gecreÃ«erd in container management systeem", alias="datumCreatie")
    datum_plaatsing: Optional[date] = Field(default=None, description="Datum waarop het object op de locatie is geplaatst", alias="datumPlaatsing")
    datum_operationeel: Optional[date] = Field(default=None, description="Datum dat de container operationeel is voor het aanbieden van afval", alias="datumOperationeel")
    datum_aflopen_garantie: Optional[date] = Field(default=None, description="Datum waarop de garantie verloopt", alias="datumAflopenGarantie")
    datum_oplevering: Optional[date] = Field(default=None, description="Datum waarop het object is geleverd", alias="datumOplevering")
    wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="Datum waarop het object is gewijzigd", alias="wijzigingsdatumDp")
    verwijderd_dp: Optional[StrictBool] = Field(default=None, description="Indicatie of het object verwijderd is bij de bronhouder", alias="verwijderdDp")
    geadopteerd_ind: Optional[StrictBool] = Field(default=None, description="indicatie of het object door een bewoner geadopteerd is", alias="geadopteerdInd")
    locatie_id: Optional[StrictStr] = Field(description="Identificerend kenmerk van de put waarin de container is geplaatst", alias="locatieId")
    geometrie: Optional[Point] = None
    type_id: Optional[StrictStr] = Field(description="Identificerend kenmerk van het containertype", alias="typeId")
    bag_hoofdadres_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagHoofdadresVerblijfsobjectId")
    gbd_buurt_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object", alias="gbdBuurtId")
    bag_openbareruimte_id: Optional[StrictStr] = Field(description="Openbare ruimte identificatie", alias="bagOpenbareruimteId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="Identificatie nummeraanduiding", alias="bagNummeraanduidingId")
    container_ral_kleur_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van de ralkleur", alias="containerRalKleurNaam")
    container_ral_kleur_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De internationale ralkleurcode.", alias="containerRalKleurCode")
    container_ral_kleur_hexcode: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De hexcode van de ralkleur.", alias="containerRalKleurHexcode")
    container_chip_nummber: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het identificatienummer van de chip die registreert wanneer de container wordt geleegd.", alias="containerChipNummber")
    container_unit_card_lezer_id: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het identificatienummer van de kaartlezer.", alias="containerUnitCardLezerId")
    container_kleur: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van de kleur", alias="containerKleur")
    container_mark: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Definitie volgt nog", alias="containerMark")
    container_datum_vervanging: Optional[date] = Field(default=None, description="De datum waarop de container wordt vervangen.", alias="containerDatumVervanging")
    container_datum_wijziging: Optional[datetime] = Field(default=None, description="Datum waarop de container is gewijzigd.", alias="containerDatumWijziging")
    container_end_of_life: Optional[date] = Field(default=None, description="Datum waarop het object het einde van zijn levenscyclus heeft bereikt.", alias="containerEndOfLife")
    container_eigenaarschap: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De soort eigenaarschap van het object.", alias="containerEigenaarschap")
    container_eigenaarschap_opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Beschrijving van  het type eigenaarschap.", alias="containerEigenaarschapOpmerking")
    container_opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Opmerking over het object door de betrokken medewerker.", alias="containerOpmerking")
    __properties: ClassVar[List[str]] = ["_links", "id", "idNummer", "serienummer", "clusterId", "eigenaarId", "eigenaarNaam", "status", "fractieCode", "fractieOmschrijving", "datumCreatie", "datumPlaatsing", "datumOperationeel", "datumAflopenGarantie", "datumOplevering", "wijzigingsdatumDp", "verwijderdDp", "geadopteerdInd", "locatieId", "geometrie", "typeId", "bagHoofdadresVerblijfsobjectId", "gbdBuurtId", "bagOpenbareruimteId", "bagNummeraanduidingId", "containerRalKleurNaam", "containerRalKleurCode", "containerRalKleurHexcode", "containerChipNummber", "containerUnitCardLezerId", "containerKleur", "containerMark", "containerDatumVervanging", "containerDatumWijziging", "containerEndOfLife", "containerEigenaarschap", "containerEigenaarschapOpmerking", "containerOpmerking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcontainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_id",
            "locatie_id",
            "type_id",
            "bag_hoofdadres_verblijfsobject_id",
            "gbd_buurt_id",
            "bag_openbareruimte_id",
            "bag_nummeraanduiding_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if id_nummer (nullable) is None
        # and model_fields_set contains the field
        if self.id_nummer is None and "id_nummer" in self.model_fields_set:
            _dict['idNummer'] = None

        # set to None if serienummer (nullable) is None
        # and model_fields_set contains the field
        if self.serienummer is None and "serienummer" in self.model_fields_set:
            _dict['serienummer'] = None

        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if eigenaar_id (nullable) is None
        # and model_fields_set contains the field
        if self.eigenaar_id is None and "eigenaar_id" in self.model_fields_set:
            _dict['eigenaarId'] = None

        # set to None if eigenaar_naam (nullable) is None
        # and model_fields_set contains the field
        if self.eigenaar_naam is None and "eigenaar_naam" in self.model_fields_set:
            _dict['eigenaarNaam'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if fractie_code (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_code is None and "fractie_code" in self.model_fields_set:
            _dict['fractieCode'] = None

        # set to None if fractie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_omschrijving is None and "fractie_omschrijving" in self.model_fields_set:
            _dict['fractieOmschrijving'] = None

        # set to None if datum_creatie (nullable) is None
        # and model_fields_set contains the field
        if self.datum_creatie is None and "datum_creatie" in self.model_fields_set:
            _dict['datumCreatie'] = None

        # set to None if datum_plaatsing (nullable) is None
        # and model_fields_set contains the field
        if self.datum_plaatsing is None and "datum_plaatsing" in self.model_fields_set:
            _dict['datumPlaatsing'] = None

        # set to None if datum_operationeel (nullable) is None
        # and model_fields_set contains the field
        if self.datum_operationeel is None and "datum_operationeel" in self.model_fields_set:
            _dict['datumOperationeel'] = None

        # set to None if datum_aflopen_garantie (nullable) is None
        # and model_fields_set contains the field
        if self.datum_aflopen_garantie is None and "datum_aflopen_garantie" in self.model_fields_set:
            _dict['datumAflopenGarantie'] = None

        # set to None if datum_oplevering (nullable) is None
        # and model_fields_set contains the field
        if self.datum_oplevering is None and "datum_oplevering" in self.model_fields_set:
            _dict['datumOplevering'] = None

        # set to None if wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum_dp is None and "wijzigingsdatum_dp" in self.model_fields_set:
            _dict['wijzigingsdatumDp'] = None

        # set to None if verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.verwijderd_dp is None and "verwijderd_dp" in self.model_fields_set:
            _dict['verwijderdDp'] = None

        # set to None if geadopteerd_ind (nullable) is None
        # and model_fields_set contains the field
        if self.geadopteerd_ind is None and "geadopteerd_ind" in self.model_fields_set:
            _dict['geadopteerdInd'] = None

        # set to None if locatie_id (nullable) is None
        # and model_fields_set contains the field
        if self.locatie_id is None and "locatie_id" in self.model_fields_set:
            _dict['locatieId'] = None

        # set to None if type_id (nullable) is None
        # and model_fields_set contains the field
        if self.type_id is None and "type_id" in self.model_fields_set:
            _dict['typeId'] = None

        # set to None if bag_hoofdadres_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_hoofdadres_verblijfsobject_id is None and "bag_hoofdadres_verblijfsobject_id" in self.model_fields_set:
            _dict['bagHoofdadresVerblijfsobjectId'] = None

        # set to None if gbd_buurt_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_id is None and "gbd_buurt_id" in self.model_fields_set:
            _dict['gbdBuurtId'] = None

        # set to None if bag_openbareruimte_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_openbareruimte_id is None and "bag_openbareruimte_id" in self.model_fields_set:
            _dict['bagOpenbareruimteId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        # set to None if container_ral_kleur_naam (nullable) is None
        # and model_fields_set contains the field
        if self.container_ral_kleur_naam is None and "container_ral_kleur_naam" in self.model_fields_set:
            _dict['containerRalKleurNaam'] = None

        # set to None if container_ral_kleur_code (nullable) is None
        # and model_fields_set contains the field
        if self.container_ral_kleur_code is None and "container_ral_kleur_code" in self.model_fields_set:
            _dict['containerRalKleurCode'] = None

        # set to None if container_ral_kleur_hexcode (nullable) is None
        # and model_fields_set contains the field
        if self.container_ral_kleur_hexcode is None and "container_ral_kleur_hexcode" in self.model_fields_set:
            _dict['containerRalKleurHexcode'] = None

        # set to None if container_chip_nummber (nullable) is None
        # and model_fields_set contains the field
        if self.container_chip_nummber is None and "container_chip_nummber" in self.model_fields_set:
            _dict['containerChipNummber'] = None

        # set to None if container_unit_card_lezer_id (nullable) is None
        # and model_fields_set contains the field
        if self.container_unit_card_lezer_id is None and "container_unit_card_lezer_id" in self.model_fields_set:
            _dict['containerUnitCardLezerId'] = None

        # set to None if container_kleur (nullable) is None
        # and model_fields_set contains the field
        if self.container_kleur is None and "container_kleur" in self.model_fields_set:
            _dict['containerKleur'] = None

        # set to None if container_mark (nullable) is None
        # and model_fields_set contains the field
        if self.container_mark is None and "container_mark" in self.model_fields_set:
            _dict['containerMark'] = None

        # set to None if container_datum_vervanging (nullable) is None
        # and model_fields_set contains the field
        if self.container_datum_vervanging is None and "container_datum_vervanging" in self.model_fields_set:
            _dict['containerDatumVervanging'] = None

        # set to None if container_datum_wijziging (nullable) is None
        # and model_fields_set contains the field
        if self.container_datum_wijziging is None and "container_datum_wijziging" in self.model_fields_set:
            _dict['containerDatumWijziging'] = None

        # set to None if container_end_of_life (nullable) is None
        # and model_fields_set contains the field
        if self.container_end_of_life is None and "container_end_of_life" in self.model_fields_set:
            _dict['containerEndOfLife'] = None

        # set to None if container_eigenaarschap (nullable) is None
        # and model_fields_set contains the field
        if self.container_eigenaarschap is None and "container_eigenaarschap" in self.model_fields_set:
            _dict['containerEigenaarschap'] = None

        # set to None if container_eigenaarschap_opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.container_eigenaarschap_opmerking is None and "container_eigenaarschap_opmerking" in self.model_fields_set:
            _dict['containerEigenaarschapOpmerking'] = None

        # set to None if container_opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.container_opmerking is None and "container_opmerking" in self.model_fields_set:
            _dict['containerOpmerking'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcontainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultContainerLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "idNummer": obj.get("idNummer"),
            "serienummer": obj.get("serienummer"),
            "clusterId": obj.get("clusterId"),
            "eigenaarId": obj.get("eigenaarId"),
            "eigenaarNaam": obj.get("eigenaarNaam"),
            "status": obj.get("status"),
            "fractieCode": obj.get("fractieCode"),
            "fractieOmschrijving": obj.get("fractieOmschrijving"),
            "datumCreatie": obj.get("datumCreatie"),
            "datumPlaatsing": obj.get("datumPlaatsing"),
            "datumOperationeel": obj.get("datumOperationeel"),
            "datumAflopenGarantie": obj.get("datumAflopenGarantie"),
            "datumOplevering": obj.get("datumOplevering"),
            "wijzigingsdatumDp": obj.get("wijzigingsdatumDp"),
            "verwijderdDp": obj.get("verwijderdDp"),
            "geadopteerdInd": obj.get("geadopteerdInd"),
            "locatieId": obj.get("locatieId"),
            "geometrie": Point.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "typeId": obj.get("typeId"),
            "bagHoofdadresVerblijfsobjectId": obj.get("bagHoofdadresVerblijfsobjectId"),
            "gbdBuurtId": obj.get("gbdBuurtId"),
            "bagOpenbareruimteId": obj.get("bagOpenbareruimteId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId"),
            "containerRalKleurNaam": obj.get("containerRalKleurNaam"),
            "containerRalKleurCode": obj.get("containerRalKleurCode"),
            "containerRalKleurHexcode": obj.get("containerRalKleurHexcode"),
            "containerChipNummber": obj.get("containerChipNummber"),
            "containerUnitCardLezerId": obj.get("containerUnitCardLezerId"),
            "containerKleur": obj.get("containerKleur"),
            "containerMark": obj.get("containerMark"),
            "containerDatumVervanging": obj.get("containerDatumVervanging"),
            "containerDatumWijziging": obj.get("containerDatumWijziging"),
            "containerEndOfLife": obj.get("containerEndOfLife"),
            "containerEigenaarschap": obj.get("containerEigenaarschap"),
            "containerEigenaarschapOpmerking": obj.get("containerEigenaarschapOpmerking"),
            "containerOpmerking": obj.get("containerOpmerking")
        })
        return _obj


