# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_servicegebieden_links import HuishoudelijkafvaldefaultServicegebiedenLinks
from huishoudelijkafval_api_client.models.polygon import Polygon
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalservicegebieden(BaseModel):
    """
    Een afvalservicegebied is een verzameling van panden die dicht bij elkaar liggen op basis van hun loopafstand tot een afvalophaal locatie. De bewoners van deze panden maken gebruik van het dichtstbijzijnde afvalservicepunt.
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultServicegebiedenLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Unieke identificatie van een afval servicegebied")
    bag_object_id: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke BAG object (pand, ligplaats en standplaats) identificatie", alias="bagObjectId")
    bag_object_type: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Type BAG object (pand, ligplaats en standplaats)", alias="bagObjectType")
    servicegebieden_locatie_id: Optional[StrictStr] = Field(description="Identificatie van een servicegebied locatie. De Servicegebieden locaties correspenderen met de afvalcluster", alias="servicegebiedenLocatieId")
    fractie_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Type afvalfractie code waarvoor de container is bedoeld: 1 - Rest, 2 - Glas, 3 - Papier, 4 - Plastic, 5 - Textiel, 6 - GFT, 9 - Brood", alias="fractieCode")
    fractie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Afvalcontainer fractieomschrijving zoals door leverancier is geleverd.", alias="fractieOmschrijving")
    loopafstand_categorie_id: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke identificatie van loopafstanden categoriÃ«n", alias="loopafstandCategorieId")
    loopafstand_categorie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De loopafstanden zijn volgens een vastgestelde indelijng gecategoriseerd. Bijvoorbeeld: 30 - 90 meter", alias="loopafstandCategorieOmschrijving")
    loopafstand_categorie_vanaf: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De loopafstand vanaf een bepaalde meter. Volgens de loopafstand categorisatie.", alias="loopafstandCategorieVanaf")
    loopafstand_categorie_tot: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De loopafstand tot een bepaalde meter volgens de loopafstandcategorisatie.", alias="loopafstandCategorieTot")
    categorie_wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="De datum waarop de loopafstandcategorie in de datapijplijn is gewijzigd", alias="categorieWijzigingsdatumDp")
    categorie_verwijderd_dp: Optional[StrictBool] = Field(default=None, description="De datum waarop de loopafstandcategorie in de datapijplijn is verwijderd.", alias="categorieVerwijderdDp")
    geometrie: Optional[Polygon] = None
    __properties: ClassVar[List[str]] = ["_links", "id", "bagObjectId", "bagObjectType", "servicegebiedenLocatieId", "fractieCode", "fractieOmschrijving", "loopafstandCategorieId", "loopafstandCategorieOmschrijving", "loopafstandCategorieVanaf", "loopafstandCategorieTot", "categorieWijzigingsdatumDp", "categorieVerwijderdDp", "geometrie"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalservicegebieden from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "servicegebieden_locatie_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if bag_object_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_object_id is None and "bag_object_id" in self.model_fields_set:
            _dict['bagObjectId'] = None

        # set to None if bag_object_type (nullable) is None
        # and model_fields_set contains the field
        if self.bag_object_type is None and "bag_object_type" in self.model_fields_set:
            _dict['bagObjectType'] = None

        # set to None if servicegebieden_locatie_id (nullable) is None
        # and model_fields_set contains the field
        if self.servicegebieden_locatie_id is None and "servicegebieden_locatie_id" in self.model_fields_set:
            _dict['servicegebiedenLocatieId'] = None

        # set to None if fractie_code (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_code is None and "fractie_code" in self.model_fields_set:
            _dict['fractieCode'] = None

        # set to None if fractie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_omschrijving is None and "fractie_omschrijving" in self.model_fields_set:
            _dict['fractieOmschrijving'] = None

        # set to None if loopafstand_categorie_id (nullable) is None
        # and model_fields_set contains the field
        if self.loopafstand_categorie_id is None and "loopafstand_categorie_id" in self.model_fields_set:
            _dict['loopafstandCategorieId'] = None

        # set to None if loopafstand_categorie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.loopafstand_categorie_omschrijving is None and "loopafstand_categorie_omschrijving" in self.model_fields_set:
            _dict['loopafstandCategorieOmschrijving'] = None

        # set to None if loopafstand_categorie_vanaf (nullable) is None
        # and model_fields_set contains the field
        if self.loopafstand_categorie_vanaf is None and "loopafstand_categorie_vanaf" in self.model_fields_set:
            _dict['loopafstandCategorieVanaf'] = None

        # set to None if loopafstand_categorie_tot (nullable) is None
        # and model_fields_set contains the field
        if self.loopafstand_categorie_tot is None and "loopafstand_categorie_tot" in self.model_fields_set:
            _dict['loopafstandCategorieTot'] = None

        # set to None if categorie_wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.categorie_wijzigingsdatum_dp is None and "categorie_wijzigingsdatum_dp" in self.model_fields_set:
            _dict['categorieWijzigingsdatumDp'] = None

        # set to None if categorie_verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.categorie_verwijderd_dp is None and "categorie_verwijderd_dp" in self.model_fields_set:
            _dict['categorieVerwijderdDp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalservicegebieden from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultServicegebiedenLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "bagObjectId": obj.get("bagObjectId"),
            "bagObjectType": obj.get("bagObjectType"),
            "servicegebiedenLocatieId": obj.get("servicegebiedenLocatieId"),
            "fractieCode": obj.get("fractieCode"),
            "fractieOmschrijving": obj.get("fractieOmschrijving"),
            "loopafstandCategorieId": obj.get("loopafstandCategorieId"),
            "loopafstandCategorieOmschrijving": obj.get("loopafstandCategorieOmschrijving"),
            "loopafstandCategorieVanaf": obj.get("loopafstandCategorieVanaf"),
            "loopafstandCategorieTot": obj.get("loopafstandCategorieTot"),
            "categorieWijzigingsdatumDp": obj.get("categorieWijzigingsdatumDp"),
            "categorieVerwijderdDp": obj.get("categorieVerwijderdDp"),
            "geometrie": Polygon.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None
        })
        return _obj


