# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from huishoudelijkafval_api_client.models.bag_nummeraanduidingen_raw_identifier import BagNummeraanduidingenRawIdentifier
from huishoudelijkafval_api_client.models.bag_openbareruimtes_raw_identifier import BagOpenbareruimtesRawIdentifier
from huishoudelijkafval_api_client.models.bag_verblijfsobjecten_raw_identifier import BagVerblijfsobjectenRawIdentifier
from huishoudelijkafval_api_client.models.gebieden_buurten_raw_identifier import GebiedenBuurtenRawIdentifier
from huishoudelijkafval_api_client.models.huishoudelijkafvalcluster_link import HuishoudelijkafvalclusterLink
from huishoudelijkafval_api_client.models.huishoudelijkafvalcontainer_link import HuishoudelijkafvalcontainerLink
from huishoudelijkafval_api_client.models.huishoudelijkafvalcontainerlocatie_link import HuishoudelijkafvalcontainerlocatieLink
from huishoudelijkafval_api_client.models.huishoudelijkafvalcontainertype_link import HuishoudelijkafvalcontainertypeLink
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvaldefaultContainerLinks(BaseModel):
    """
    The contents of the `container._links` field. It contains all relationships with objects.
    """ # noqa: E501
    var_schema: StrictStr = Field(description="The schema field is exposed with every record", alias="schema")
    var_self: HuishoudelijkafvalcontainerLink = Field(alias="self")
    cluster: HuishoudelijkafvalclusterLink
    locatie: HuishoudelijkafvalcontainerlocatieLink
    type: HuishoudelijkafvalcontainertypeLink
    bag_hoofdadres_verblijfsobject: BagVerblijfsobjectenRawIdentifier = Field(alias="bagHoofdadresVerblijfsobject")
    gbd_buurt: GebiedenBuurtenRawIdentifier = Field(alias="gbdBuurt")
    bag_openbareruimte: BagOpenbareruimtesRawIdentifier = Field(alias="bagOpenbareruimte")
    bag_nummeraanduiding: BagNummeraanduidingenRawIdentifier = Field(alias="bagNummeraanduiding")
    __properties: ClassVar[List[str]] = ["schema", "self", "cluster", "locatie", "type", "bagHoofdadresVerblijfsobject", "gbdBuurt", "bagOpenbareruimte", "bagNummeraanduiding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvaldefaultContainerLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_schema",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster
        if self.cluster:
            _dict['cluster'] = self.cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locatie
        if self.locatie:
            _dict['locatie'] = self.locatie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bag_hoofdadres_verblijfsobject
        if self.bag_hoofdadres_verblijfsobject:
            _dict['bagHoofdadresVerblijfsobject'] = self.bag_hoofdadres_verblijfsobject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gbd_buurt
        if self.gbd_buurt:
            _dict['gbdBuurt'] = self.gbd_buurt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bag_openbareruimte
        if self.bag_openbareruimte:
            _dict['bagOpenbareruimte'] = self.bag_openbareruimte.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bag_nummeraanduiding
        if self.bag_nummeraanduiding:
            _dict['bagNummeraanduiding'] = self.bag_nummeraanduiding.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvaldefaultContainerLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "self": HuishoudelijkafvalcontainerLink.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "cluster": HuishoudelijkafvalclusterLink.from_dict(obj["cluster"]) if obj.get("cluster") is not None else None,
            "locatie": HuishoudelijkafvalcontainerlocatieLink.from_dict(obj["locatie"]) if obj.get("locatie") is not None else None,
            "type": HuishoudelijkafvalcontainertypeLink.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "bagHoofdadresVerblijfsobject": BagVerblijfsobjectenRawIdentifier.from_dict(obj["bagHoofdadresVerblijfsobject"]) if obj.get("bagHoofdadresVerblijfsobject") is not None else None,
            "gbdBuurt": GebiedenBuurtenRawIdentifier.from_dict(obj["gbdBuurt"]) if obj.get("gbdBuurt") is not None else None,
            "bagOpenbareruimte": BagOpenbareruimtesRawIdentifier.from_dict(obj["bagOpenbareruimte"]) if obj.get("bagOpenbareruimte") is not None else None,
            "bagNummeraanduiding": BagNummeraanduidingenRawIdentifier.from_dict(obj["bagNummeraanduiding"]) if obj.get("bagNummeraanduiding") is not None else None
        })
        return _obj


