# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_bijplaatsingen_links import HuishoudelijkafvaldefaultBijplaatsingenLinks
from huishoudelijkafval_api_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalbijplaatsingen(BaseModel):
    """
    De Aanpak Bijplaatsingen (ABP) richt zich op afval dat op onjuiste wijze buiten wordt geplaatst. Momenteel wordt dit door de Gemeente Amsterdam op wijkniveau aangepakt via de ABP. Door communicatiemiddelen en interventies in te zetten rondom de meest vervuilde containerlocaties, neemt de netheid toe en daalt het aantal bijplaatsingen. Dit dataproduct bevat de registratie van bijplaatsingen zoals vastgelegd door de bevoegde medewerkers.
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultBijplaatsingenLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Unieke aanduiding van het record.")
    datum_waarneming: Optional[date] = Field(default=None, description="De datum waarop de waarneming is geregistreerd.", alias="datumWaarneming")
    tijd_waarneming: Optional[StrictStr] = Field(default=None, description="De tijdstip waarop de waarneming is geregistreerd.", alias="tijdWaarneming")
    cluster_id: Optional[StrictStr] = Field(description="Uniek identificerend kenmerk van cluster", alias="clusterId")
    gbd_buurt_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)", alias="gbdBuurtCode")
    gbd_buurt_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object (naam van het kenmerk wijzigt van ID naar Identificatie in 2019)", alias="gbdBuurtId")
    bag_openbareruimte_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object", alias="bagOpenbareruimteId")
    bag_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagVerblijfsobjectId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="Identificatie nummeraanduiding", alias="bagNummeraanduidingId")
    bag_woonplaats_id: Optional[StrictStr] = Field(description="Identificatie woonplaats", alias="bagWoonplaatsId")
    geometrie: Optional[Point] = None
    bruingoed: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (bruingoed) rondom de container(s)")
    containervies: Optional[StrictBool] = Field(default=None, description="De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt")
    crow_score: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks", alias="crowScore")
    glas: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (glas afval) rondom de container(s)")
    glasgestremd: Optional[StrictBool] = Field(default=None, description="De glascontainer is gestremd")
    glastoegankelijk: Optional[StrictBool] = Field(default=None, description="De glascontainer is toegangelijk")
    glasvol: Optional[StrictBool] = Field(default=None, description="De glascontainer is vol")
    grof: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (grofvuil) rondom de container(s)")
    handhaving: Optional[StrictBool] = Field(default=None, description="Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig")
    waarde_handhaving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Hoe veel items met adresgegevens zijn er aangetroffen?", alias="waardeHandhaving")
    huisvuil: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (huisvuil) rondom de container(s)")
    karton: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (karton) rondom de container(s)")
    overig: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (overig) rondom de container(s)")
    papiervol: Optional[StrictBool] = Field(default=None, description="De papiercontainer is vol")
    papiergestremd: Optional[StrictBool] = Field(default=None, description="De papiercontainer is gestremd")
    papiertoegankelijk: Optional[StrictBool] = Field(default=None, description="De papiercontainer is toegankelijk")
    restgestremd: Optional[StrictBool] = Field(default=None, description="De restcontainer is gestremd")
    resttoegankelijk: Optional[StrictBool] = Field(default=None, description="De restcontainer is toegankelijk")
    restvol: Optional[StrictBool] = Field(default=None, description="De restcontainer is vol")
    veegvuil: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (veegvuil) rondom de container(s)")
    zwerfafval: Optional[StrictBool] = Field(default=None, description="Aangetroffen afvalsoort (zwerfafval) rondom de container(s)")
    waarnemer_rol: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De rol van de melder", alias="waarnemerRol")
    gbd_stadsdeel_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).", alias="gbdStadsdeelNaam")
    postcode: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")
    straatnaam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).")
    locatie_waarnemer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.", alias="locatieWaarnemer")
    type_waarneming: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Geeft aan of de waarneming een CROW waarneming is.", alias="typeWaarneming")
    grofvuildagen: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.")
    adres_type: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. ", alias="adresType")
    dumpplek: Optional[StrictBool] = Field(default=None, description="Het geeft aan of de locatie een dumpplek is.")
    melding_door_collega_doorgezet: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het geeft aan of de waarneming door een collega is doorgezet.", alias="meldingDoorCollegaDoorgezet")
    naam_melding_doorgezet: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Soort doorgezette waarneming.", alias="naamMeldingDoorgezet")
    gebruikers_rol: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De rol van de gebruiker in de applicatie.", alias="gebruikersRol")
    __properties: ClassVar[List[str]] = ["_links", "id", "datumWaarneming", "tijdWaarneming", "clusterId", "gbdBuurtCode", "gbdBuurtId", "bagOpenbareruimteId", "bagVerblijfsobjectId", "bagNummeraanduidingId", "bagWoonplaatsId", "geometrie", "bruingoed", "containervies", "crowScore", "glas", "glasgestremd", "glastoegankelijk", "glasvol", "grof", "handhaving", "waardeHandhaving", "huisvuil", "karton", "overig", "papiervol", "papiergestremd", "papiertoegankelijk", "restgestremd", "resttoegankelijk", "restvol", "veegvuil", "zwerfafval", "waarnemerRol", "gbdStadsdeelNaam", "postcode", "straatnaam", "locatieWaarnemer", "typeWaarneming", "grofvuildagen", "adresType", "dumpplek", "meldingDoorCollegaDoorgezet", "naamMeldingDoorgezet", "gebruikersRol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalbijplaatsingen from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "cluster_id",
            "gbd_buurt_id",
            "bag_openbareruimte_id",
            "bag_verblijfsobject_id",
            "bag_nummeraanduiding_id",
            "bag_woonplaats_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if datum_waarneming (nullable) is None
        # and model_fields_set contains the field
        if self.datum_waarneming is None and "datum_waarneming" in self.model_fields_set:
            _dict['datumWaarneming'] = None

        # set to None if tijd_waarneming (nullable) is None
        # and model_fields_set contains the field
        if self.tijd_waarneming is None and "tijd_waarneming" in self.model_fields_set:
            _dict['tijdWaarneming'] = None

        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if gbd_buurt_code (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_code is None and "gbd_buurt_code" in self.model_fields_set:
            _dict['gbdBuurtCode'] = None

        # set to None if gbd_buurt_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_id is None and "gbd_buurt_id" in self.model_fields_set:
            _dict['gbdBuurtId'] = None

        # set to None if bag_openbareruimte_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_openbareruimte_id is None and "bag_openbareruimte_id" in self.model_fields_set:
            _dict['bagOpenbareruimteId'] = None

        # set to None if bag_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_verblijfsobject_id is None and "bag_verblijfsobject_id" in self.model_fields_set:
            _dict['bagVerblijfsobjectId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        # set to None if bag_woonplaats_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_woonplaats_id is None and "bag_woonplaats_id" in self.model_fields_set:
            _dict['bagWoonplaatsId'] = None

        # set to None if bruingoed (nullable) is None
        # and model_fields_set contains the field
        if self.bruingoed is None and "bruingoed" in self.model_fields_set:
            _dict['bruingoed'] = None

        # set to None if containervies (nullable) is None
        # and model_fields_set contains the field
        if self.containervies is None and "containervies" in self.model_fields_set:
            _dict['containervies'] = None

        # set to None if crow_score (nullable) is None
        # and model_fields_set contains the field
        if self.crow_score is None and "crow_score" in self.model_fields_set:
            _dict['crowScore'] = None

        # set to None if glas (nullable) is None
        # and model_fields_set contains the field
        if self.glas is None and "glas" in self.model_fields_set:
            _dict['glas'] = None

        # set to None if glasgestremd (nullable) is None
        # and model_fields_set contains the field
        if self.glasgestremd is None and "glasgestremd" in self.model_fields_set:
            _dict['glasgestremd'] = None

        # set to None if glastoegankelijk (nullable) is None
        # and model_fields_set contains the field
        if self.glastoegankelijk is None and "glastoegankelijk" in self.model_fields_set:
            _dict['glastoegankelijk'] = None

        # set to None if glasvol (nullable) is None
        # and model_fields_set contains the field
        if self.glasvol is None and "glasvol" in self.model_fields_set:
            _dict['glasvol'] = None

        # set to None if grof (nullable) is None
        # and model_fields_set contains the field
        if self.grof is None and "grof" in self.model_fields_set:
            _dict['grof'] = None

        # set to None if handhaving (nullable) is None
        # and model_fields_set contains the field
        if self.handhaving is None and "handhaving" in self.model_fields_set:
            _dict['handhaving'] = None

        # set to None if waarde_handhaving (nullable) is None
        # and model_fields_set contains the field
        if self.waarde_handhaving is None and "waarde_handhaving" in self.model_fields_set:
            _dict['waardeHandhaving'] = None

        # set to None if huisvuil (nullable) is None
        # and model_fields_set contains the field
        if self.huisvuil is None and "huisvuil" in self.model_fields_set:
            _dict['huisvuil'] = None

        # set to None if karton (nullable) is None
        # and model_fields_set contains the field
        if self.karton is None and "karton" in self.model_fields_set:
            _dict['karton'] = None

        # set to None if overig (nullable) is None
        # and model_fields_set contains the field
        if self.overig is None and "overig" in self.model_fields_set:
            _dict['overig'] = None

        # set to None if papiervol (nullable) is None
        # and model_fields_set contains the field
        if self.papiervol is None and "papiervol" in self.model_fields_set:
            _dict['papiervol'] = None

        # set to None if papiergestremd (nullable) is None
        # and model_fields_set contains the field
        if self.papiergestremd is None and "papiergestremd" in self.model_fields_set:
            _dict['papiergestremd'] = None

        # set to None if papiertoegankelijk (nullable) is None
        # and model_fields_set contains the field
        if self.papiertoegankelijk is None and "papiertoegankelijk" in self.model_fields_set:
            _dict['papiertoegankelijk'] = None

        # set to None if restgestremd (nullable) is None
        # and model_fields_set contains the field
        if self.restgestremd is None and "restgestremd" in self.model_fields_set:
            _dict['restgestremd'] = None

        # set to None if resttoegankelijk (nullable) is None
        # and model_fields_set contains the field
        if self.resttoegankelijk is None and "resttoegankelijk" in self.model_fields_set:
            _dict['resttoegankelijk'] = None

        # set to None if restvol (nullable) is None
        # and model_fields_set contains the field
        if self.restvol is None and "restvol" in self.model_fields_set:
            _dict['restvol'] = None

        # set to None if veegvuil (nullable) is None
        # and model_fields_set contains the field
        if self.veegvuil is None and "veegvuil" in self.model_fields_set:
            _dict['veegvuil'] = None

        # set to None if zwerfafval (nullable) is None
        # and model_fields_set contains the field
        if self.zwerfafval is None and "zwerfafval" in self.model_fields_set:
            _dict['zwerfafval'] = None

        # set to None if waarnemer_rol (nullable) is None
        # and model_fields_set contains the field
        if self.waarnemer_rol is None and "waarnemer_rol" in self.model_fields_set:
            _dict['waarnemerRol'] = None

        # set to None if gbd_stadsdeel_naam (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_stadsdeel_naam is None and "gbd_stadsdeel_naam" in self.model_fields_set:
            _dict['gbdStadsdeelNaam'] = None

        # set to None if postcode (nullable) is None
        # and model_fields_set contains the field
        if self.postcode is None and "postcode" in self.model_fields_set:
            _dict['postcode'] = None

        # set to None if straatnaam (nullable) is None
        # and model_fields_set contains the field
        if self.straatnaam is None and "straatnaam" in self.model_fields_set:
            _dict['straatnaam'] = None

        # set to None if locatie_waarnemer (nullable) is None
        # and model_fields_set contains the field
        if self.locatie_waarnemer is None and "locatie_waarnemer" in self.model_fields_set:
            _dict['locatieWaarnemer'] = None

        # set to None if type_waarneming (nullable) is None
        # and model_fields_set contains the field
        if self.type_waarneming is None and "type_waarneming" in self.model_fields_set:
            _dict['typeWaarneming'] = None

        # set to None if grofvuildagen (nullable) is None
        # and model_fields_set contains the field
        if self.grofvuildagen is None and "grofvuildagen" in self.model_fields_set:
            _dict['grofvuildagen'] = None

        # set to None if adres_type (nullable) is None
        # and model_fields_set contains the field
        if self.adres_type is None and "adres_type" in self.model_fields_set:
            _dict['adresType'] = None

        # set to None if dumpplek (nullable) is None
        # and model_fields_set contains the field
        if self.dumpplek is None and "dumpplek" in self.model_fields_set:
            _dict['dumpplek'] = None

        # set to None if melding_door_collega_doorgezet (nullable) is None
        # and model_fields_set contains the field
        if self.melding_door_collega_doorgezet is None and "melding_door_collega_doorgezet" in self.model_fields_set:
            _dict['meldingDoorCollegaDoorgezet'] = None

        # set to None if naam_melding_doorgezet (nullable) is None
        # and model_fields_set contains the field
        if self.naam_melding_doorgezet is None and "naam_melding_doorgezet" in self.model_fields_set:
            _dict['naamMeldingDoorgezet'] = None

        # set to None if gebruikers_rol (nullable) is None
        # and model_fields_set contains the field
        if self.gebruikers_rol is None and "gebruikers_rol" in self.model_fields_set:
            _dict['gebruikersRol'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalbijplaatsingen from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultBijplaatsingenLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "datumWaarneming": obj.get("datumWaarneming"),
            "tijdWaarneming": obj.get("tijdWaarneming"),
            "clusterId": obj.get("clusterId"),
            "gbdBuurtCode": obj.get("gbdBuurtCode"),
            "gbdBuurtId": obj.get("gbdBuurtId"),
            "bagOpenbareruimteId": obj.get("bagOpenbareruimteId"),
            "bagVerblijfsobjectId": obj.get("bagVerblijfsobjectId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId"),
            "bagWoonplaatsId": obj.get("bagWoonplaatsId"),
            "geometrie": Point.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "bruingoed": obj.get("bruingoed"),
            "containervies": obj.get("containervies"),
            "crowScore": obj.get("crowScore"),
            "glas": obj.get("glas"),
            "glasgestremd": obj.get("glasgestremd"),
            "glastoegankelijk": obj.get("glastoegankelijk"),
            "glasvol": obj.get("glasvol"),
            "grof": obj.get("grof"),
            "handhaving": obj.get("handhaving"),
            "waardeHandhaving": obj.get("waardeHandhaving"),
            "huisvuil": obj.get("huisvuil"),
            "karton": obj.get("karton"),
            "overig": obj.get("overig"),
            "papiervol": obj.get("papiervol"),
            "papiergestremd": obj.get("papiergestremd"),
            "papiertoegankelijk": obj.get("papiertoegankelijk"),
            "restgestremd": obj.get("restgestremd"),
            "resttoegankelijk": obj.get("resttoegankelijk"),
            "restvol": obj.get("restvol"),
            "veegvuil": obj.get("veegvuil"),
            "zwerfafval": obj.get("zwerfafval"),
            "waarnemerRol": obj.get("waarnemerRol"),
            "gbdStadsdeelNaam": obj.get("gbdStadsdeelNaam"),
            "postcode": obj.get("postcode"),
            "straatnaam": obj.get("straatnaam"),
            "locatieWaarnemer": obj.get("locatieWaarnemer"),
            "typeWaarneming": obj.get("typeWaarneming"),
            "grofvuildagen": obj.get("grofvuildagen"),
            "adresType": obj.get("adresType"),
            "dumpplek": obj.get("dumpplek"),
            "meldingDoorCollegaDoorgezet": obj.get("meldingDoorCollegaDoorgezet"),
            "naamMeldingDoorgezet": obj.get("naamMeldingDoorgezet"),
            "gebruikersRol": obj.get("gebruikersRol")
        })
        return _obj


