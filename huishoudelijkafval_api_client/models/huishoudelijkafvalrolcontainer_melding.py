# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_rolcontainer_melding_links import HuishoudelijkafvaldefaultRolcontainerMeldingLinks
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvalrolcontainerMelding(BaseModel):
    """
    Deze tabel bevat informatie over de meldingen die door de bewoners zijn gedaan. De meldingen gaan over een of meer containers.
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultRolcontainerMeldingLinks = Field(alias="_links")
    id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)] = Field(description="Unieke aanduiding van een melding")
    rolcontainer_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(description="Unieke aanduiding van een rolcontainer. (foreign key)", alias="rolcontainerId")
    melding_type: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het type van een melding. Bijvoorbeeld: Algemene informatie", alias="meldingType")
    afkomst_verzoek: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft aan of de melding intern of extern is gedaan.", alias="afkomstVerzoek")
    soort_verzoek: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft aan welk communicatiemiddel is gebruikt om de melding te registreren.", alias="soortVerzoek")
    aanmaakdatum: Optional[datetime] = Field(default=None, description="De datum en tijd waarop de registratie van de melding in het systeem is vastgelegd")
    wijzigingsdatum: Optional[datetime] = Field(default=None, description="De datum en tijd waarop de registratie van de melding voor het laatst in het systeem is aangepast")
    bag_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagVerblijfsobjectId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="BAG Nummeraanduiding identificatie", alias="bagNummeraanduidingId")
    __properties: ClassVar[List[str]] = ["_links", "id", "rolcontainerId", "meldingType", "afkomstVerzoek", "soortVerzoek", "aanmaakdatum", "wijzigingsdatum", "bagVerblijfsobjectId", "bagNummeraanduidingId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalrolcontainerMelding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "rolcontainer_id",
            "bag_verblijfsobject_id",
            "bag_nummeraanduiding_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if rolcontainer_id (nullable) is None
        # and model_fields_set contains the field
        if self.rolcontainer_id is None and "rolcontainer_id" in self.model_fields_set:
            _dict['rolcontainerId'] = None

        # set to None if melding_type (nullable) is None
        # and model_fields_set contains the field
        if self.melding_type is None and "melding_type" in self.model_fields_set:
            _dict['meldingType'] = None

        # set to None if afkomst_verzoek (nullable) is None
        # and model_fields_set contains the field
        if self.afkomst_verzoek is None and "afkomst_verzoek" in self.model_fields_set:
            _dict['afkomstVerzoek'] = None

        # set to None if soort_verzoek (nullable) is None
        # and model_fields_set contains the field
        if self.soort_verzoek is None and "soort_verzoek" in self.model_fields_set:
            _dict['soortVerzoek'] = None

        # set to None if aanmaakdatum (nullable) is None
        # and model_fields_set contains the field
        if self.aanmaakdatum is None and "aanmaakdatum" in self.model_fields_set:
            _dict['aanmaakdatum'] = None

        # set to None if wijzigingsdatum (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum is None and "wijzigingsdatum" in self.model_fields_set:
            _dict['wijzigingsdatum'] = None

        # set to None if bag_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_verblijfsobject_id is None and "bag_verblijfsobject_id" in self.model_fields_set:
            _dict['bagVerblijfsobjectId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalrolcontainerMelding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultRolcontainerMeldingLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "rolcontainerId": obj.get("rolcontainerId"),
            "meldingType": obj.get("meldingType"),
            "afkomstVerzoek": obj.get("afkomstVerzoek"),
            "soortVerzoek": obj.get("soortVerzoek"),
            "aanmaakdatum": obj.get("aanmaakdatum"),
            "wijzigingsdatum": obj.get("wijzigingsdatum"),
            "bagVerblijfsobjectId": obj.get("bagVerblijfsobjectId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId")
        })
        return _obj


