# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_servicegebieden_locatie_links import HuishoudelijkafvaldefaultServicegebiedenLocatieLinks
from huishoudelijkafval_api_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvalservicegebiedenLocatie(BaseModel):
    """
    Afvalservicegebied-locatie voor ondergrondse- en bovengrondsecontainers vertegenwoordigt een ophaallocatie voor één type afvalfractie, met een gemiddelde loopafstand naar de nabijgelegen panden. Als er op een ophaallocatie meerdere containers voor dezelfde fractie zijn, worden deze als één enkele fractie beschouwd.
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultServicegebiedenLocatieLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Unieke identificatie van een afval servicegebied locatie")
    cluster_fractie_aantal_containers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Aantal containers per clusterfractie", alias="clusterFractieAantalContainers")
    cluster_fractie_volume_m3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De som van het volume (m3) van containers per clusterfractie", alias="clusterFractieVolumeM3")
    cluster_fractie_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Type afvalfractie code waarvoor de container is bedoeld: 1 - Rest, 2 - Glas, 3 - Papier, 4 - Plastic, 5 - Textiel, 6 - GFT, 9 - Brood", alias="clusterFractieCode")
    cluster_fractie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Afvalcontainer fractieomschrijving zoals door leverancier is geleverd.", alias="clusterFractieOmschrijving")
    aantal_woningen: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Aantal woningen die gebruik maken van de servicegebiedlocatie", alias="aantalWoningen")
    gemiddelde_loopafstand: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De gemiddelde loopafstand van woningen naar een servicegebiedlocatie.", alias="gemiddeldeLoopafstand")
    geometrie: Optional[Point] = None
    __properties: ClassVar[List[str]] = ["_links", "id", "clusterFractieAantalContainers", "clusterFractieVolumeM3", "clusterFractieCode", "clusterFractieOmschrijving", "aantalWoningen", "gemiddeldeLoopafstand", "geometrie"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalservicegebiedenLocatie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if cluster_fractie_aantal_containers (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_fractie_aantal_containers is None and "cluster_fractie_aantal_containers" in self.model_fields_set:
            _dict['clusterFractieAantalContainers'] = None

        # set to None if cluster_fractie_volume_m3 (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_fractie_volume_m3 is None and "cluster_fractie_volume_m3" in self.model_fields_set:
            _dict['clusterFractieVolumeM3'] = None

        # set to None if cluster_fractie_code (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_fractie_code is None and "cluster_fractie_code" in self.model_fields_set:
            _dict['clusterFractieCode'] = None

        # set to None if cluster_fractie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_fractie_omschrijving is None and "cluster_fractie_omschrijving" in self.model_fields_set:
            _dict['clusterFractieOmschrijving'] = None

        # set to None if aantal_woningen (nullable) is None
        # and model_fields_set contains the field
        if self.aantal_woningen is None and "aantal_woningen" in self.model_fields_set:
            _dict['aantalWoningen'] = None

        # set to None if gemiddelde_loopafstand (nullable) is None
        # and model_fields_set contains the field
        if self.gemiddelde_loopafstand is None and "gemiddelde_loopafstand" in self.model_fields_set:
            _dict['gemiddeldeLoopafstand'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalservicegebiedenLocatie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultServicegebiedenLocatieLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "clusterFractieAantalContainers": obj.get("clusterFractieAantalContainers"),
            "clusterFractieVolumeM3": obj.get("clusterFractieVolumeM3"),
            "clusterFractieCode": obj.get("clusterFractieCode"),
            "clusterFractieOmschrijving": obj.get("clusterFractieOmschrijving"),
            "aantalWoningen": obj.get("aantalWoningen"),
            "gemiddeldeLoopafstand": obj.get("gemiddeldeLoopafstand"),
            "geometrie": Point.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None
        })
        return _obj


