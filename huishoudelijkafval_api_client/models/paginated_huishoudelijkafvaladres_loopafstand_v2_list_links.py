# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from huishoudelijkafval_api_client.models.paginated_huishoudelijkafvaladres_loopafstand_v2_list_links_next import PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksNext
from huishoudelijkafval_api_client.models.paginated_huishoudelijkafvaladres_loopafstand_v2_list_links_previous import PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksPrevious
from huishoudelijkafval_api_client.models.paginated_huishoudelijkafvaladres_loopafstand_v2_list_links_self import PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksSelf
from typing import Optional, Set
from typing_extensions import Self

class PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinks(BaseModel):
    """
    PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinks
    """ # noqa: E501
    var_self: Optional[PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksSelf] = Field(default=None, alias="self")
    next: Optional[PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksNext] = None
    previous: Optional[PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksPrevious] = None
    __properties: ClassVar[List[str]] = ["self", "next", "previous"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next
        if self.next:
            _dict['next'] = self.next.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous
        if self.previous:
            _dict['previous'] = self.previous.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "self": PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksSelf.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "next": PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksNext.from_dict(obj["next"]) if obj.get("next") is not None else None,
            "previous": PaginatedHuishoudelijkafvaladresLoopafstandV2ListLinksPrevious.from_dict(obj["previous"]) if obj.get("previous") is not None else None
        })
        return _obj


