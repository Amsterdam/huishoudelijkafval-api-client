# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_clusterfractie_links import HuishoudelijkafvaldefaultClusterfractieLinks
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalclusterfractie(BaseModel):
    """
    clusterfractie
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultClusterfractieLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Uniek identificerend kenmerk van clusterfractie")
    cluster_id: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Uniek identificerend kenmerk van cluster waaraan de container is gerelateerd", alias="clusterId")
    aantal_containers: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Aantal containers per clusterfractie", alias="aantalContainers")
    volume_m3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="De som van het volume (m3) van containers per clusterfractie", alias="volumeM3")
    code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Code afvalfractie zoals door Welvaarts is aanleverd. 1 - Rest, 2 - Glas, 3 - Papier, 4 - Plastic, 5 - Textiel, 6 - GFT, 7 - Grof, 8 - PMD, 9 - Brood, -999 - Onbekend")
    omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Afvalfractie zoals door Welvaarts is aangeleverd")
    datum_opvoer: Optional[datetime] = Field(default=None, description="De datum waarop de cluster in het systeem is opgevoerd.", alias="datumOpvoer")
    datum_einde: Optional[date] = Field(default=None, description="De datum waarop de cluster in het systeem is eindigd.", alias="datumEinde")
    wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="De datum waarop de cluster in het systeem is gewijzigd.", alias="wijzigingsdatumDp")
    verwijderd_dp: Optional[StrictBool] = Field(default=None, description="indicatie of het object verwijderd is bij de bronhouder", alias="verwijderdDp")
    __properties: ClassVar[List[str]] = ["_links", "id", "clusterId", "aantalContainers", "volumeM3", "code", "omschrijving", "datumOpvoer", "datumEinde", "wijzigingsdatumDp", "verwijderdDp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalclusterfractie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if aantal_containers (nullable) is None
        # and model_fields_set contains the field
        if self.aantal_containers is None and "aantal_containers" in self.model_fields_set:
            _dict['aantalContainers'] = None

        # set to None if volume_m3 (nullable) is None
        # and model_fields_set contains the field
        if self.volume_m3 is None and "volume_m3" in self.model_fields_set:
            _dict['volumeM3'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.omschrijving is None and "omschrijving" in self.model_fields_set:
            _dict['omschrijving'] = None

        # set to None if datum_opvoer (nullable) is None
        # and model_fields_set contains the field
        if self.datum_opvoer is None and "datum_opvoer" in self.model_fields_set:
            _dict['datumOpvoer'] = None

        # set to None if datum_einde (nullable) is None
        # and model_fields_set contains the field
        if self.datum_einde is None and "datum_einde" in self.model_fields_set:
            _dict['datumEinde'] = None

        # set to None if wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum_dp is None and "wijzigingsdatum_dp" in self.model_fields_set:
            _dict['wijzigingsdatumDp'] = None

        # set to None if verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.verwijderd_dp is None and "verwijderd_dp" in self.model_fields_set:
            _dict['verwijderdDp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalclusterfractie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultClusterfractieLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "clusterId": obj.get("clusterId"),
            "aantalContainers": obj.get("aantalContainers"),
            "volumeM3": obj.get("volumeM3"),
            "code": obj.get("code"),
            "omschrijving": obj.get("omschrijving"),
            "datumOpvoer": obj.get("datumOpvoer"),
            "datumEinde": obj.get("datumEinde"),
            "wijzigingsdatumDp": obj.get("wijzigingsdatumDp"),
            "verwijderdDp": obj.get("verwijderdDp")
        })
        return _obj


