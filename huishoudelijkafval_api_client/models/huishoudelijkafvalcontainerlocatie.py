# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_containerlocatie_links import HuishoudelijkafvaldefaultContainerlocatieLinks
from huishoudelijkafval_api_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalcontainerlocatie(BaseModel):
    """
    containerlocatie
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultContainerlocatieLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Identificerend kenmerk van de put waarin de container is geplaatst")
    serienummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="serienummer uitgegeven door de fabrikant")
    status: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Status van de container, 0 - inactief, 1 - actief, 2 - gepland")
    geometrie: Optional[Point] = None
    eigenaar_id: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Identificerend kenmerk eigenaar", alias="eigenaarId")
    eigenaar_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Naam eigenaar", alias="eigenaarNaam")
    datum_creatie: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Datum waarop het object is gecreÃ«erd in container management systeem", alias="datumCreatie")
    datum_plaatsing: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Datum waarop het object op de locatie is geplaatst", alias="datumPlaatsing")
    datum_operationeel: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Datum waarop het object is operationeel gezet", alias="datumOperationeel")
    datum_oplevering: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Datum waarop het object is opgeleleverd", alias="datumOplevering")
    wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="Datum waarop het object is gewijzigd", alias="wijzigingsdatumDp")
    verwijderd_dp: Optional[StrictBool] = Field(default=None, description="Indicatie of het object verwijderd is bij de bronhouder", alias="verwijderdDp")
    datum_einde_garantie: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Datum waarop de garantie verloopt", alias="datumEindeGarantie")
    ind_bevat_container: Optional[StrictBool] = Field(default=None, description="Indicatie dat de containerlocatie een container bevat", alias="indBevatContainer")
    bag_hoofdadres_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagHoofdadresVerblijfsobjectId")
    gbd_buurt_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object", alias="gbdBuurtId")
    bag_openbareruimte_id: Optional[StrictStr] = Field(description="Openbare ruimte identificatie", alias="bagOpenbareruimteId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="Identificatie nummeraanduiding", alias="bagNummeraanduidingId")
    containerlocatie_type_naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het type van de containerlocatie", alias="containerlocatieTypeNaam")
    containerlocatie_id_nummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Definitie volgt nog", alias="containerlocatieIdNummer")
    containerlocatie_datum_wijziging: Optional[datetime] = Field(default=None, description="Datum waarop het object is gewijzigd.", alias="containerlocatieDatumWijziging")
    containerlocatie_opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Opmerking over het object.", alias="containerlocatieOpmerking")
    containerlocatie_end_of_life: Optional[date] = Field(default=None, description="Datum waarop het object het einde van zijn levenscyclus heeft bereikt.", alias="containerlocatieEndOfLife")
    containerlocatie_eigenaarschap: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Soort eigenaarschap", alias="containerlocatieEigenaarschap")
    containerlocatie_eigenaarschap_opmerking: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Beschrijving van het type eigenaarschap.", alias="containerlocatieEigenaarschapOpmerking")
    containerlocatie_type_artikelcode: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Artikelcode van het containerlocatietype.", alias="containerlocatieTypeArtikelcode")
    bronadres: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Adres van de containerlocatie zoals die in bron geregistreerd is.")
    __properties: ClassVar[List[str]] = ["_links", "id", "serienummer", "status", "geometrie", "eigenaarId", "eigenaarNaam", "datumCreatie", "datumPlaatsing", "datumOperationeel", "datumOplevering", "wijzigingsdatumDp", "verwijderdDp", "datumEindeGarantie", "indBevatContainer", "bagHoofdadresVerblijfsobjectId", "gbdBuurtId", "bagOpenbareruimteId", "bagNummeraanduidingId", "containerlocatieTypeNaam", "containerlocatieIdNummer", "containerlocatieDatumWijziging", "containerlocatieOpmerking", "containerlocatieEndOfLife", "containerlocatieEigenaarschap", "containerlocatieEigenaarschapOpmerking", "containerlocatieTypeArtikelcode", "bronadres"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcontainerlocatie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bag_hoofdadres_verblijfsobject_id",
            "gbd_buurt_id",
            "bag_openbareruimte_id",
            "bag_nummeraanduiding_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if serienummer (nullable) is None
        # and model_fields_set contains the field
        if self.serienummer is None and "serienummer" in self.model_fields_set:
            _dict['serienummer'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if eigenaar_id (nullable) is None
        # and model_fields_set contains the field
        if self.eigenaar_id is None and "eigenaar_id" in self.model_fields_set:
            _dict['eigenaarId'] = None

        # set to None if eigenaar_naam (nullable) is None
        # and model_fields_set contains the field
        if self.eigenaar_naam is None and "eigenaar_naam" in self.model_fields_set:
            _dict['eigenaarNaam'] = None

        # set to None if datum_creatie (nullable) is None
        # and model_fields_set contains the field
        if self.datum_creatie is None and "datum_creatie" in self.model_fields_set:
            _dict['datumCreatie'] = None

        # set to None if datum_plaatsing (nullable) is None
        # and model_fields_set contains the field
        if self.datum_plaatsing is None and "datum_plaatsing" in self.model_fields_set:
            _dict['datumPlaatsing'] = None

        # set to None if datum_operationeel (nullable) is None
        # and model_fields_set contains the field
        if self.datum_operationeel is None and "datum_operationeel" in self.model_fields_set:
            _dict['datumOperationeel'] = None

        # set to None if datum_oplevering (nullable) is None
        # and model_fields_set contains the field
        if self.datum_oplevering is None and "datum_oplevering" in self.model_fields_set:
            _dict['datumOplevering'] = None

        # set to None if wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum_dp is None and "wijzigingsdatum_dp" in self.model_fields_set:
            _dict['wijzigingsdatumDp'] = None

        # set to None if verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.verwijderd_dp is None and "verwijderd_dp" in self.model_fields_set:
            _dict['verwijderdDp'] = None

        # set to None if datum_einde_garantie (nullable) is None
        # and model_fields_set contains the field
        if self.datum_einde_garantie is None and "datum_einde_garantie" in self.model_fields_set:
            _dict['datumEindeGarantie'] = None

        # set to None if ind_bevat_container (nullable) is None
        # and model_fields_set contains the field
        if self.ind_bevat_container is None and "ind_bevat_container" in self.model_fields_set:
            _dict['indBevatContainer'] = None

        # set to None if bag_hoofdadres_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_hoofdadres_verblijfsobject_id is None and "bag_hoofdadres_verblijfsobject_id" in self.model_fields_set:
            _dict['bagHoofdadresVerblijfsobjectId'] = None

        # set to None if gbd_buurt_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_id is None and "gbd_buurt_id" in self.model_fields_set:
            _dict['gbdBuurtId'] = None

        # set to None if bag_openbareruimte_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_openbareruimte_id is None and "bag_openbareruimte_id" in self.model_fields_set:
            _dict['bagOpenbareruimteId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        # set to None if containerlocatie_type_naam (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_type_naam is None and "containerlocatie_type_naam" in self.model_fields_set:
            _dict['containerlocatieTypeNaam'] = None

        # set to None if containerlocatie_id_nummer (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_id_nummer is None and "containerlocatie_id_nummer" in self.model_fields_set:
            _dict['containerlocatieIdNummer'] = None

        # set to None if containerlocatie_datum_wijziging (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_datum_wijziging is None and "containerlocatie_datum_wijziging" in self.model_fields_set:
            _dict['containerlocatieDatumWijziging'] = None

        # set to None if containerlocatie_opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_opmerking is None and "containerlocatie_opmerking" in self.model_fields_set:
            _dict['containerlocatieOpmerking'] = None

        # set to None if containerlocatie_end_of_life (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_end_of_life is None and "containerlocatie_end_of_life" in self.model_fields_set:
            _dict['containerlocatieEndOfLife'] = None

        # set to None if containerlocatie_eigenaarschap (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_eigenaarschap is None and "containerlocatie_eigenaarschap" in self.model_fields_set:
            _dict['containerlocatieEigenaarschap'] = None

        # set to None if containerlocatie_eigenaarschap_opmerking (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_eigenaarschap_opmerking is None and "containerlocatie_eigenaarschap_opmerking" in self.model_fields_set:
            _dict['containerlocatieEigenaarschapOpmerking'] = None

        # set to None if containerlocatie_type_artikelcode (nullable) is None
        # and model_fields_set contains the field
        if self.containerlocatie_type_artikelcode is None and "containerlocatie_type_artikelcode" in self.model_fields_set:
            _dict['containerlocatieTypeArtikelcode'] = None

        # set to None if bronadres (nullable) is None
        # and model_fields_set contains the field
        if self.bronadres is None and "bronadres" in self.model_fields_set:
            _dict['bronadres'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalcontainerlocatie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultContainerlocatieLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "serienummer": obj.get("serienummer"),
            "status": obj.get("status"),
            "geometrie": Point.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "eigenaarId": obj.get("eigenaarId"),
            "eigenaarNaam": obj.get("eigenaarNaam"),
            "datumCreatie": obj.get("datumCreatie"),
            "datumPlaatsing": obj.get("datumPlaatsing"),
            "datumOperationeel": obj.get("datumOperationeel"),
            "datumOplevering": obj.get("datumOplevering"),
            "wijzigingsdatumDp": obj.get("wijzigingsdatumDp"),
            "verwijderdDp": obj.get("verwijderdDp"),
            "datumEindeGarantie": obj.get("datumEindeGarantie"),
            "indBevatContainer": obj.get("indBevatContainer"),
            "bagHoofdadresVerblijfsobjectId": obj.get("bagHoofdadresVerblijfsobjectId"),
            "gbdBuurtId": obj.get("gbdBuurtId"),
            "bagOpenbareruimteId": obj.get("bagOpenbareruimteId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId"),
            "containerlocatieTypeNaam": obj.get("containerlocatieTypeNaam"),
            "containerlocatieIdNummer": obj.get("containerlocatieIdNummer"),
            "containerlocatieDatumWijziging": obj.get("containerlocatieDatumWijziging"),
            "containerlocatieOpmerking": obj.get("containerlocatieOpmerking"),
            "containerlocatieEndOfLife": obj.get("containerlocatieEndOfLife"),
            "containerlocatieEigenaarschap": obj.get("containerlocatieEigenaarschap"),
            "containerlocatieEigenaarschapOpmerking": obj.get("containerlocatieEigenaarschapOpmerking"),
            "containerlocatieTypeArtikelcode": obj.get("containerlocatieTypeArtikelcode"),
            "bronadres": obj.get("bronadres")
        })
        return _obj


