# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_planning_voertuigen_links import HuishoudelijkafvaldefaultPlanningVoertuigenLinks
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvalplanningVoertuigen(BaseModel):
    """
    Planningsgegevens van afvalinzamelingsvoertuigen voor huishoudelijk- en bedrijfsafval
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultPlanningVoertuigenLinks = Field(alias="_links")
    id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)] = Field(description="Uniek identificerend kenmerk van het record.")
    soort_werkzaamheden: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Specificatie van soort planning (Inzet of Onderhoud).", alias="soortWerkzaamheden")
    kenteken: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Kenteken afvalinzamelingsvoertuig.")
    kenteken_kort: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Kenteken afvalinzamelingsvoertuig zonder koppeltekens (-).", alias="kentekenKort")
    categorie: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Categorie afvalverwerking waar het voertuig op is gepland.")
    activiteit: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Fractie van de afvalverwerking (afgeleid van categorie, werkzaamheden en of memo).")
    werkzaamheden_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Code voor de werkzaamheden waarop het voertuig is gepland.", alias="werkzaamhedenCode")
    werkzaamheden_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Omschrijving voor de werkzaamheden waarop het voertuig is gepland.", alias="werkzaamhedenOmschrijving")
    werkzaamheden_datum: Optional[datetime] = Field(default=None, description="Datum waarop de werkzaamheden zijn gepland.", alias="werkzaamhedenDatum")
    werkzaamheden_datum_ref_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(description="Verwijzing naar datum dimensie.", alias="werkzaamhedenDatumRefId")
    werkzaamheden_starttijd: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Starttijd van de werkzaamheden op de WERKZAAMHEDEN_DATUM", alias="werkzaamhedenStarttijd")
    werkzaamheden_eindtijd: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Eindtijd van de werkzaamheden op de WERKZAAMHEDEN_DATUM.", alias="werkzaamhedenEindtijd")
    werkzaamheden_uren_gepland: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Berekening van het aantal bruto uren van de werkzaamheden (= eindtijd - starttijd).", alias="werkzaamhedenUrenGepland")
    pauze_starttijd: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Starttijd van de pauze op de WERKZAAMHEDEN_DATUM.", alias="pauzeStarttijd")
    pauze_eindtijd: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Eindtijd van de pauze op de WERKZAAMHEDEN_DATUM.", alias="pauzeEindtijd")
    pauze_uren_gepland: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Berekening van het aantal bruto uren van de pauze (= eindtijd - starttijd).", alias="pauzeUrenGepland")
    fase: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Label van de fase waarin de planning zich bevindt.")
    memo: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Extra toelichting zoals opgegeven in (planningsdata)bronsysteem.")
    team: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Team waarvoor de voertuigplanning is gemaakt. In veel gevallen een stadsdeel, maar kan ook bijvoorbeeld Bedrijfsafval Centrum (BAC) zijn).")
    voertuig_inhuur_indicatie: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Is het voertuig ingehuurd (Ja / Nee).", alias="voertuigInhuurIndicatie")
    aantal_medewerkers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Aantal medewerkers dat op het voertuig is gepland.", alias="aantalMedewerkers")
    aantal_medewerkers_intern: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Aantal interne medewerkers dat op het voertuig is gepland.", alias="aantalMedewerkersIntern")
    aantal_medewerkers_inhuur: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Aantal externe medewerkers dat op het voertuig is gepland.", alias="aantalMedewerkersInhuur")
    uren_inzet_medewerker_intern: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Som van het totaal aantal netto uren van de interne medewerkers die op de planning zijn gezet (excl pauze).", alias="urenInzetMedewerkerIntern")
    uren_inzet_medewerker_inhuur: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Som van het totaal aantal netto uren van de externe medewerkers die op de planning zijn gezet (excl pauze).", alias="urenInzetMedewerkerInhuur")
    uren_inzet_voertuig: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Netto inzeturen van het voertuig (bruto - pauze).", alias="urenInzetVoertuig")
    datum_verwerkt_stadsdelen: Optional[datetime] = Field(default=None, description="Moment van laden data vanuit het (planningsdata)bronsysteem in het DWH stadsdelen (als intermediair voor datalevering).", alias="datumVerwerktStadsdelen")
    datum_aanwezig_bron: Optional[datetime] = Field(default=None, description="Indicatie over de actualiteit van de gegevens in deze set (laatste wijziging in de bron).", alias="datumAanwezigBron")
    __properties: ClassVar[List[str]] = ["_links", "id", "soortWerkzaamheden", "kenteken", "kentekenKort", "categorie", "activiteit", "werkzaamhedenCode", "werkzaamhedenOmschrijving", "werkzaamhedenDatum", "werkzaamhedenDatumRefId", "werkzaamhedenStarttijd", "werkzaamhedenEindtijd", "werkzaamhedenUrenGepland", "pauzeStarttijd", "pauzeEindtijd", "pauzeUrenGepland", "fase", "memo", "team", "voertuigInhuurIndicatie", "aantalMedewerkers", "aantalMedewerkersIntern", "aantalMedewerkersInhuur", "urenInzetMedewerkerIntern", "urenInzetMedewerkerInhuur", "urenInzetVoertuig", "datumVerwerktStadsdelen", "datumAanwezigBron"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalplanningVoertuigen from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "werkzaamheden_datum_ref_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if soort_werkzaamheden (nullable) is None
        # and model_fields_set contains the field
        if self.soort_werkzaamheden is None and "soort_werkzaamheden" in self.model_fields_set:
            _dict['soortWerkzaamheden'] = None

        # set to None if kenteken (nullable) is None
        # and model_fields_set contains the field
        if self.kenteken is None and "kenteken" in self.model_fields_set:
            _dict['kenteken'] = None

        # set to None if kenteken_kort (nullable) is None
        # and model_fields_set contains the field
        if self.kenteken_kort is None and "kenteken_kort" in self.model_fields_set:
            _dict['kentekenKort'] = None

        # set to None if categorie (nullable) is None
        # and model_fields_set contains the field
        if self.categorie is None and "categorie" in self.model_fields_set:
            _dict['categorie'] = None

        # set to None if activiteit (nullable) is None
        # and model_fields_set contains the field
        if self.activiteit is None and "activiteit" in self.model_fields_set:
            _dict['activiteit'] = None

        # set to None if werkzaamheden_code (nullable) is None
        # and model_fields_set contains the field
        if self.werkzaamheden_code is None and "werkzaamheden_code" in self.model_fields_set:
            _dict['werkzaamhedenCode'] = None

        # set to None if werkzaamheden_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.werkzaamheden_omschrijving is None and "werkzaamheden_omschrijving" in self.model_fields_set:
            _dict['werkzaamhedenOmschrijving'] = None

        # set to None if werkzaamheden_datum (nullable) is None
        # and model_fields_set contains the field
        if self.werkzaamheden_datum is None and "werkzaamheden_datum" in self.model_fields_set:
            _dict['werkzaamhedenDatum'] = None

        # set to None if werkzaamheden_datum_ref_id (nullable) is None
        # and model_fields_set contains the field
        if self.werkzaamheden_datum_ref_id is None and "werkzaamheden_datum_ref_id" in self.model_fields_set:
            _dict['werkzaamhedenDatumRefId'] = None

        # set to None if werkzaamheden_starttijd (nullable) is None
        # and model_fields_set contains the field
        if self.werkzaamheden_starttijd is None and "werkzaamheden_starttijd" in self.model_fields_set:
            _dict['werkzaamhedenStarttijd'] = None

        # set to None if werkzaamheden_eindtijd (nullable) is None
        # and model_fields_set contains the field
        if self.werkzaamheden_eindtijd is None and "werkzaamheden_eindtijd" in self.model_fields_set:
            _dict['werkzaamhedenEindtijd'] = None

        # set to None if werkzaamheden_uren_gepland (nullable) is None
        # and model_fields_set contains the field
        if self.werkzaamheden_uren_gepland is None and "werkzaamheden_uren_gepland" in self.model_fields_set:
            _dict['werkzaamhedenUrenGepland'] = None

        # set to None if pauze_starttijd (nullable) is None
        # and model_fields_set contains the field
        if self.pauze_starttijd is None and "pauze_starttijd" in self.model_fields_set:
            _dict['pauzeStarttijd'] = None

        # set to None if pauze_eindtijd (nullable) is None
        # and model_fields_set contains the field
        if self.pauze_eindtijd is None and "pauze_eindtijd" in self.model_fields_set:
            _dict['pauzeEindtijd'] = None

        # set to None if pauze_uren_gepland (nullable) is None
        # and model_fields_set contains the field
        if self.pauze_uren_gepland is None and "pauze_uren_gepland" in self.model_fields_set:
            _dict['pauzeUrenGepland'] = None

        # set to None if fase (nullable) is None
        # and model_fields_set contains the field
        if self.fase is None and "fase" in self.model_fields_set:
            _dict['fase'] = None

        # set to None if memo (nullable) is None
        # and model_fields_set contains the field
        if self.memo is None and "memo" in self.model_fields_set:
            _dict['memo'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['team'] = None

        # set to None if voertuig_inhuur_indicatie (nullable) is None
        # and model_fields_set contains the field
        if self.voertuig_inhuur_indicatie is None and "voertuig_inhuur_indicatie" in self.model_fields_set:
            _dict['voertuigInhuurIndicatie'] = None

        # set to None if aantal_medewerkers (nullable) is None
        # and model_fields_set contains the field
        if self.aantal_medewerkers is None and "aantal_medewerkers" in self.model_fields_set:
            _dict['aantalMedewerkers'] = None

        # set to None if aantal_medewerkers_intern (nullable) is None
        # and model_fields_set contains the field
        if self.aantal_medewerkers_intern is None and "aantal_medewerkers_intern" in self.model_fields_set:
            _dict['aantalMedewerkersIntern'] = None

        # set to None if aantal_medewerkers_inhuur (nullable) is None
        # and model_fields_set contains the field
        if self.aantal_medewerkers_inhuur is None and "aantal_medewerkers_inhuur" in self.model_fields_set:
            _dict['aantalMedewerkersInhuur'] = None

        # set to None if uren_inzet_medewerker_intern (nullable) is None
        # and model_fields_set contains the field
        if self.uren_inzet_medewerker_intern is None and "uren_inzet_medewerker_intern" in self.model_fields_set:
            _dict['urenInzetMedewerkerIntern'] = None

        # set to None if uren_inzet_medewerker_inhuur (nullable) is None
        # and model_fields_set contains the field
        if self.uren_inzet_medewerker_inhuur is None and "uren_inzet_medewerker_inhuur" in self.model_fields_set:
            _dict['urenInzetMedewerkerInhuur'] = None

        # set to None if uren_inzet_voertuig (nullable) is None
        # and model_fields_set contains the field
        if self.uren_inzet_voertuig is None and "uren_inzet_voertuig" in self.model_fields_set:
            _dict['urenInzetVoertuig'] = None

        # set to None if datum_verwerkt_stadsdelen (nullable) is None
        # and model_fields_set contains the field
        if self.datum_verwerkt_stadsdelen is None and "datum_verwerkt_stadsdelen" in self.model_fields_set:
            _dict['datumVerwerktStadsdelen'] = None

        # set to None if datum_aanwezig_bron (nullable) is None
        # and model_fields_set contains the field
        if self.datum_aanwezig_bron is None and "datum_aanwezig_bron" in self.model_fields_set:
            _dict['datumAanwezigBron'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalplanningVoertuigen from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultPlanningVoertuigenLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "soortWerkzaamheden": obj.get("soortWerkzaamheden"),
            "kenteken": obj.get("kenteken"),
            "kentekenKort": obj.get("kentekenKort"),
            "categorie": obj.get("categorie"),
            "activiteit": obj.get("activiteit"),
            "werkzaamhedenCode": obj.get("werkzaamhedenCode"),
            "werkzaamhedenOmschrijving": obj.get("werkzaamhedenOmschrijving"),
            "werkzaamhedenDatum": obj.get("werkzaamhedenDatum"),
            "werkzaamhedenDatumRefId": obj.get("werkzaamhedenDatumRefId"),
            "werkzaamhedenStarttijd": obj.get("werkzaamhedenStarttijd"),
            "werkzaamhedenEindtijd": obj.get("werkzaamhedenEindtijd"),
            "werkzaamhedenUrenGepland": obj.get("werkzaamhedenUrenGepland"),
            "pauzeStarttijd": obj.get("pauzeStarttijd"),
            "pauzeEindtijd": obj.get("pauzeEindtijd"),
            "pauzeUrenGepland": obj.get("pauzeUrenGepland"),
            "fase": obj.get("fase"),
            "memo": obj.get("memo"),
            "team": obj.get("team"),
            "voertuigInhuurIndicatie": obj.get("voertuigInhuurIndicatie"),
            "aantalMedewerkers": obj.get("aantalMedewerkers"),
            "aantalMedewerkersIntern": obj.get("aantalMedewerkersIntern"),
            "aantalMedewerkersInhuur": obj.get("aantalMedewerkersInhuur"),
            "urenInzetMedewerkerIntern": obj.get("urenInzetMedewerkerIntern"),
            "urenInzetMedewerkerInhuur": obj.get("urenInzetMedewerkerInhuur"),
            "urenInzetVoertuig": obj.get("urenInzetVoertuig"),
            "datumVerwerktStadsdelen": obj.get("datumVerwerktStadsdelen"),
            "datumAanwezigBron": obj.get("datumAanwezigBron")
        })
        return _obj


