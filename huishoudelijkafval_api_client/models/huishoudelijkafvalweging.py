# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvalv1_weging_links import Huishoudelijkafvalv1WegingLinks
from huishoudelijkafval_api_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class Huishoudelijkafvalweging(BaseModel):
    """
    weging
    """ # noqa: E501
    links: Huishoudelijkafvalv1WegingLinks = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Uniek identificerend kenmerk weging. Deze is per container vastgelegd")
    cluster_id: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Uniek identificerend kenmerk van cluster waaraan de container is gerelateerd", alias="clusterId")
    cluster_subcluster_indicatie: Optional[StrictBool] = Field(default=None, description="Indicatie of het een cluster betreft dat is gesplitst door een weg", alias="clusterSubclusterIndicatie")
    weegsysteem_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Identificerend kenmerk weegsysteem (behorend bij voertuig)", alias="weegsysteemId")
    weegsysteem_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Omschrijving van weegsysteem", alias="weegsysteemOmschrijving")
    volgnummer: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Oplopende nummering wegingen per weegsysteem")
    datum_weging: Optional[date] = Field(default=None, description="Datum wanneer de weging is uitgevoerd (yyyy-mm-dd)", alias="datumWeging")
    tijdstip_weging: Optional[StrictStr] = Field(default=None, description="Tijdstip wanneer de weging is uitgevoerd (HH24:MI:SS)", alias="tijdstipWeging")
    locatienummer: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Locatienummer (cluster) zoals door Welvaarts is aangeleverd")
    fractie_code: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Code afvalfractie zoals door Welvaarts is aangeleverd, 1: Rest, 2: Glas, 3: Papier, 4: Plastic, 5: Textiel, 6: GFT, 7: Grof, 8: PMD, 9: Brood, -99: Onbekend", alias="fractieCode")
    fractie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Omschrijving afvalfractie zoals door Welvaarts is aangeleverd", alias="fractieOmschrijving")
    eerste_weging: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Eerste weging container: gewicht vol in Kg", alias="eersteWeging")
    tweede_weging: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tweede weging container: gewicht vol in Kg", alias="tweedeWeging")
    netto_gewicht: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Netto gewicht van het ingezamelde afval van de container in Kg", alias="nettoGewicht")
    geometrie: Optional[Point] = None
    bediening_code: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Code van de wijze waarop de bediening van de weging heeft plaatsgevonden. Mogelijke waarden: 0 - Handmatig, 1 - Automatisch, 3 - onbekend.", alias="bedieningCode")
    bediening_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Omschrijving van de wijze waarop de bediening van de weging heeft plaatsgevonden", alias="bedieningOmschrijving")
    wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="Datum waarop het object is gewijzigd", alias="wijzigingsdatumDp")
    verwijderd_dp: Optional[StrictBool] = Field(default=None, description="Indicatie of het object verwijderd is bij de bronhouder", alias="verwijderdDp")
    bag_hoofdadres_verblijfsobject_id: Optional[StrictStr] = Field(description="Een identificatiecode van een verblijfsobject is een authentiek gegeven en een unieke aanduiding van het verblijfsobject.", alias="bagHoofdadresVerblijfsobjectId")
    gbd_buurt_id: Optional[StrictStr] = Field(description="Unieke identificatie van het object", alias="gbdBuurtId")
    bag_openbareruimte_id: Optional[StrictStr] = Field(description="Openbare ruimte identificatie", alias="bagOpenbareruimteId")
    bag_nummeraanduiding_id: Optional[StrictStr] = Field(description="Identificatie nummeraanduiding", alias="bagNummeraanduidingId")
    weging_kenteken: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Het kenteken van het voertuig", alias="wegingKenteken")
    __properties: ClassVar[List[str]] = ["_links", "id", "clusterId", "clusterSubclusterIndicatie", "weegsysteemId", "weegsysteemOmschrijving", "volgnummer", "datumWeging", "tijdstipWeging", "locatienummer", "fractieCode", "fractieOmschrijving", "eersteWeging", "tweedeWeging", "nettoGewicht", "geometrie", "bedieningCode", "bedieningOmschrijving", "wijzigingsdatumDp", "verwijderdDp", "bagHoofdadresVerblijfsobjectId", "gbdBuurtId", "bagOpenbareruimteId", "bagNummeraanduidingId", "wegingKenteken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalweging from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bag_hoofdadres_verblijfsobject_id",
            "gbd_buurt_id",
            "bag_openbareruimte_id",
            "bag_nummeraanduiding_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterId'] = None

        # set to None if cluster_subcluster_indicatie (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_subcluster_indicatie is None and "cluster_subcluster_indicatie" in self.model_fields_set:
            _dict['clusterSubclusterIndicatie'] = None

        # set to None if weegsysteem_id (nullable) is None
        # and model_fields_set contains the field
        if self.weegsysteem_id is None and "weegsysteem_id" in self.model_fields_set:
            _dict['weegsysteemId'] = None

        # set to None if weegsysteem_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.weegsysteem_omschrijving is None and "weegsysteem_omschrijving" in self.model_fields_set:
            _dict['weegsysteemOmschrijving'] = None

        # set to None if volgnummer (nullable) is None
        # and model_fields_set contains the field
        if self.volgnummer is None and "volgnummer" in self.model_fields_set:
            _dict['volgnummer'] = None

        # set to None if datum_weging (nullable) is None
        # and model_fields_set contains the field
        if self.datum_weging is None and "datum_weging" in self.model_fields_set:
            _dict['datumWeging'] = None

        # set to None if tijdstip_weging (nullable) is None
        # and model_fields_set contains the field
        if self.tijdstip_weging is None and "tijdstip_weging" in self.model_fields_set:
            _dict['tijdstipWeging'] = None

        # set to None if locatienummer (nullable) is None
        # and model_fields_set contains the field
        if self.locatienummer is None and "locatienummer" in self.model_fields_set:
            _dict['locatienummer'] = None

        # set to None if fractie_code (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_code is None and "fractie_code" in self.model_fields_set:
            _dict['fractieCode'] = None

        # set to None if fractie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_omschrijving is None and "fractie_omschrijving" in self.model_fields_set:
            _dict['fractieOmschrijving'] = None

        # set to None if eerste_weging (nullable) is None
        # and model_fields_set contains the field
        if self.eerste_weging is None and "eerste_weging" in self.model_fields_set:
            _dict['eersteWeging'] = None

        # set to None if tweede_weging (nullable) is None
        # and model_fields_set contains the field
        if self.tweede_weging is None and "tweede_weging" in self.model_fields_set:
            _dict['tweedeWeging'] = None

        # set to None if netto_gewicht (nullable) is None
        # and model_fields_set contains the field
        if self.netto_gewicht is None and "netto_gewicht" in self.model_fields_set:
            _dict['nettoGewicht'] = None

        # set to None if bediening_code (nullable) is None
        # and model_fields_set contains the field
        if self.bediening_code is None and "bediening_code" in self.model_fields_set:
            _dict['bedieningCode'] = None

        # set to None if bediening_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.bediening_omschrijving is None and "bediening_omschrijving" in self.model_fields_set:
            _dict['bedieningOmschrijving'] = None

        # set to None if wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum_dp is None and "wijzigingsdatum_dp" in self.model_fields_set:
            _dict['wijzigingsdatumDp'] = None

        # set to None if verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.verwijderd_dp is None and "verwijderd_dp" in self.model_fields_set:
            _dict['verwijderdDp'] = None

        # set to None if bag_hoofdadres_verblijfsobject_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_hoofdadres_verblijfsobject_id is None and "bag_hoofdadres_verblijfsobject_id" in self.model_fields_set:
            _dict['bagHoofdadresVerblijfsobjectId'] = None

        # set to None if gbd_buurt_id (nullable) is None
        # and model_fields_set contains the field
        if self.gbd_buurt_id is None and "gbd_buurt_id" in self.model_fields_set:
            _dict['gbdBuurtId'] = None

        # set to None if bag_openbareruimte_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_openbareruimte_id is None and "bag_openbareruimte_id" in self.model_fields_set:
            _dict['bagOpenbareruimteId'] = None

        # set to None if bag_nummeraanduiding_id (nullable) is None
        # and model_fields_set contains the field
        if self.bag_nummeraanduiding_id is None and "bag_nummeraanduiding_id" in self.model_fields_set:
            _dict['bagNummeraanduidingId'] = None

        # set to None if weging_kenteken (nullable) is None
        # and model_fields_set contains the field
        if self.weging_kenteken is None and "weging_kenteken" in self.model_fields_set:
            _dict['wegingKenteken'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Huishoudelijkafvalweging from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": Huishoudelijkafvalv1WegingLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "clusterId": obj.get("clusterId"),
            "clusterSubclusterIndicatie": obj.get("clusterSubclusterIndicatie"),
            "weegsysteemId": obj.get("weegsysteemId"),
            "weegsysteemOmschrijving": obj.get("weegsysteemOmschrijving"),
            "volgnummer": obj.get("volgnummer"),
            "datumWeging": obj.get("datumWeging"),
            "tijdstipWeging": obj.get("tijdstipWeging"),
            "locatienummer": obj.get("locatienummer"),
            "fractieCode": obj.get("fractieCode"),
            "fractieOmschrijving": obj.get("fractieOmschrijving"),
            "eersteWeging": obj.get("eersteWeging"),
            "tweedeWeging": obj.get("tweedeWeging"),
            "nettoGewicht": obj.get("nettoGewicht"),
            "geometrie": Point.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "bedieningCode": obj.get("bedieningCode"),
            "bedieningOmschrijving": obj.get("bedieningOmschrijving"),
            "wijzigingsdatumDp": obj.get("wijzigingsdatumDp"),
            "verwijderdDp": obj.get("verwijderdDp"),
            "bagHoofdadresVerblijfsobjectId": obj.get("bagHoofdadresVerblijfsobjectId"),
            "gbdBuurtId": obj.get("gbdBuurtId"),
            "bagOpenbareruimteId": obj.get("bagOpenbareruimteId"),
            "bagNummeraanduidingId": obj.get("bagNummeraanduidingId"),
            "wegingKenteken": obj.get("wegingKenteken")
        })
        return _obj


