# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_loopafstand_categorie_v2_links import HuishoudelijkafvaldefaultLoopafstandCategorieV2Links
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvalloopafstandCategorieV2(BaseModel):
    """
    loopafstandCategorieV2
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultLoopafstandCategorieV2Links = Field(alias="_links")
    id: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="identificatie categorie loopafstand")
    fractie: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Code afvalfractie waarnaar de afstand is bepaald")
    fractie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Omschrijving afvalfractie waarnaar de afstand is bepaald", alias="fractieOmschrijving")
    loopafstand_categorie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Omschrijving van de categorie waarin de berekende loopafstand valt", alias="loopafstandCategorieOmschrijving")
    loopafstand_categorie_vanaf: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Ondergrens van de categorie waarin de berekende loopafstand valt", alias="loopafstandCategorieVanaf")
    loopafstand_categorie_tot: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(default=None, description="Bovengrens van de categorie waarin de berekende loopafstand valt", alias="loopafstandCategorieTot")
    wijzigingsdatum_dp: Optional[datetime] = Field(default=None, description="Datum waarop het object is gewijzigd", alias="wijzigingsdatumDp")
    verwijderd_dp: Optional[StrictBool] = Field(default=None, description="Indicatie of het object verwijderd is in de datapijplijn", alias="verwijderdDp")
    __properties: ClassVar[List[str]] = ["_links", "id", "fractie", "fractieOmschrijving", "loopafstandCategorieOmschrijving", "loopafstandCategorieVanaf", "loopafstandCategorieTot", "wijzigingsdatumDp", "verwijderdDp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalloopafstandCategorieV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if fractie (nullable) is None
        # and model_fields_set contains the field
        if self.fractie is None and "fractie" in self.model_fields_set:
            _dict['fractie'] = None

        # set to None if fractie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.fractie_omschrijving is None and "fractie_omschrijving" in self.model_fields_set:
            _dict['fractieOmschrijving'] = None

        # set to None if loopafstand_categorie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.loopafstand_categorie_omschrijving is None and "loopafstand_categorie_omschrijving" in self.model_fields_set:
            _dict['loopafstandCategorieOmschrijving'] = None

        # set to None if loopafstand_categorie_vanaf (nullable) is None
        # and model_fields_set contains the field
        if self.loopafstand_categorie_vanaf is None and "loopafstand_categorie_vanaf" in self.model_fields_set:
            _dict['loopafstandCategorieVanaf'] = None

        # set to None if loopafstand_categorie_tot (nullable) is None
        # and model_fields_set contains the field
        if self.loopafstand_categorie_tot is None and "loopafstand_categorie_tot" in self.model_fields_set:
            _dict['loopafstandCategorieTot'] = None

        # set to None if wijzigingsdatum_dp (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum_dp is None and "wijzigingsdatum_dp" in self.model_fields_set:
            _dict['wijzigingsdatumDp'] = None

        # set to None if verwijderd_dp (nullable) is None
        # and model_fields_set contains the field
        if self.verwijderd_dp is None and "verwijderd_dp" in self.model_fields_set:
            _dict['verwijderdDp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalloopafstandCategorieV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultLoopafstandCategorieV2Links.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "fractie": obj.get("fractie"),
            "fractieOmschrijving": obj.get("fractieOmschrijving"),
            "loopafstandCategorieOmschrijving": obj.get("loopafstandCategorieOmschrijving"),
            "loopafstandCategorieVanaf": obj.get("loopafstandCategorieVanaf"),
            "loopafstandCategorieTot": obj.get("loopafstandCategorieTot"),
            "wijzigingsdatumDp": obj.get("wijzigingsdatumDp"),
            "verwijderdDp": obj.get("verwijderdDp")
        })
        return _obj


