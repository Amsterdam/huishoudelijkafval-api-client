# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from huishoudelijkafval_api_client.models.gebieden_buurten_raw_identifier import GebiedenBuurtenRawIdentifier
from huishoudelijkafval_api_client.models.gebieden_ggwgebieden_raw_identifier import GebiedenGgwgebiedenRawIdentifier
from huishoudelijkafval_api_client.models.gebieden_stadsdelen_raw_identifier import GebiedenStadsdelenRawIdentifier
from huishoudelijkafval_api_client.models.gebieden_wijken_raw_identifier import GebiedenWijkenRawIdentifier
from huishoudelijkafval_api_client.models.huishoudelijkafvalcontainer_link import HuishoudelijkafvalcontainerLink
from huishoudelijkafval_api_client.models.huishoudelijkafvalcontainerlocatie_link import HuishoudelijkafvalcontainerlocatieLink
from huishoudelijkafval_api_client.models.huishoudelijkafvalticket_link import HuishoudelijkafvalticketLink
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvaldefaultTicketLinks(BaseModel):
    """
    The contents of the `ticket._links` field. It contains all relationships with objects.
    """ # noqa: E501
    var_schema: StrictStr = Field(description="The schema field is exposed with every record", alias="schema")
    var_self: HuishoudelijkafvalticketLink = Field(alias="self")
    container: HuishoudelijkafvalcontainerLink
    containerlocatie: HuishoudelijkafvalcontainerlocatieLink
    gbd_buurt: GebiedenBuurtenRawIdentifier = Field(alias="gbdBuurt")
    gbd_wijk: GebiedenWijkenRawIdentifier = Field(alias="gbdWijk")
    gbd_stadsdeel: GebiedenStadsdelenRawIdentifier = Field(alias="gbdStadsdeel")
    gbd_ggw: GebiedenGgwgebiedenRawIdentifier = Field(alias="gbdGgw")
    __properties: ClassVar[List[str]] = ["schema", "self", "container", "containerlocatie", "gbdBuurt", "gbdWijk", "gbdStadsdeel", "gbdGgw"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvaldefaultTicketLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_schema",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of containerlocatie
        if self.containerlocatie:
            _dict['containerlocatie'] = self.containerlocatie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gbd_buurt
        if self.gbd_buurt:
            _dict['gbdBuurt'] = self.gbd_buurt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gbd_wijk
        if self.gbd_wijk:
            _dict['gbdWijk'] = self.gbd_wijk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gbd_stadsdeel
        if self.gbd_stadsdeel:
            _dict['gbdStadsdeel'] = self.gbd_stadsdeel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gbd_ggw
        if self.gbd_ggw:
            _dict['gbdGgw'] = self.gbd_ggw.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvaldefaultTicketLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "self": HuishoudelijkafvalticketLink.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "container": HuishoudelijkafvalcontainerLink.from_dict(obj["container"]) if obj.get("container") is not None else None,
            "containerlocatie": HuishoudelijkafvalcontainerlocatieLink.from_dict(obj["containerlocatie"]) if obj.get("containerlocatie") is not None else None,
            "gbdBuurt": GebiedenBuurtenRawIdentifier.from_dict(obj["gbdBuurt"]) if obj.get("gbdBuurt") is not None else None,
            "gbdWijk": GebiedenWijkenRawIdentifier.from_dict(obj["gbdWijk"]) if obj.get("gbdWijk") is not None else None,
            "gbdStadsdeel": GebiedenStadsdelenRawIdentifier.from_dict(obj["gbdStadsdeel"]) if obj.get("gbdStadsdeel") is not None else None,
            "gbdGgw": GebiedenGgwgebiedenRawIdentifier.from_dict(obj["gbdGgw"]) if obj.get("gbdGgw") is not None else None
        })
        return _obj


