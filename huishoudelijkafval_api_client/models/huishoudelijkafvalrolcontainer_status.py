# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvaldefault_rolcontainer_status_links import HuishoudelijkafvaldefaultRolcontainerStatusLinks
from typing import Optional, Set
from typing_extensions import Self

class HuishoudelijkafvalrolcontainerStatus(BaseModel):
    """
    Deze tabel bevat informatie over de status historie van de rolcontainers.
    """ # noqa: E501
    links: HuishoudelijkafvaldefaultRolcontainerStatusLinks = Field(alias="_links")
    id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)] = Field(description="Unieke aanduiding van een status record")
    rolcontainer_id: Optional[Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]] = Field(description="Unieke aanduiding van een rolcontainer", alias="rolcontainerId")
    status: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Dit attribuut geeft de vorige status van een rolcontainer aan. De volgende statussen zijn mogelijk.  Active, inactive en blocked.")
    vanaf_datum: Optional[datetime] = Field(default=None, description="De datum en tijd waarop de status van een rolcontiner begint.", alias="vanafDatum")
    tot_datum: Optional[datetime] = Field(default=None, description="De datum en tijd waarop de satus van een rolcontiner eindigt.", alias="totDatum")
    aanmaakdatum: Optional[datetime] = Field(default=None, description="Datum tijd waarop de rolcontainer in het systeem is aangemaakt")
    wijzigingsdatum: Optional[datetime] = Field(default=None, description="Datum tijd waarop de rolcontainer in het systeem voor het laatst is aangepast")
    __properties: ClassVar[List[str]] = ["_links", "id", "rolcontainerId", "status", "vanafDatum", "totDatum", "aanmaakdatum", "wijzigingsdatum"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalrolcontainerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "rolcontainer_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # set to None if rolcontainer_id (nullable) is None
        # and model_fields_set contains the field
        if self.rolcontainer_id is None and "rolcontainer_id" in self.model_fields_set:
            _dict['rolcontainerId'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if vanaf_datum (nullable) is None
        # and model_fields_set contains the field
        if self.vanaf_datum is None and "vanaf_datum" in self.model_fields_set:
            _dict['vanafDatum'] = None

        # set to None if tot_datum (nullable) is None
        # and model_fields_set contains the field
        if self.tot_datum is None and "tot_datum" in self.model_fields_set:
            _dict['totDatum'] = None

        # set to None if aanmaakdatum (nullable) is None
        # and model_fields_set contains the field
        if self.aanmaakdatum is None and "aanmaakdatum" in self.model_fields_set:
            _dict['aanmaakdatum'] = None

        # set to None if wijzigingsdatum (nullable) is None
        # and model_fields_set contains the field
        if self.wijzigingsdatum is None and "wijzigingsdatum" in self.model_fields_set:
            _dict['wijzigingsdatum'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HuishoudelijkafvalrolcontainerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": HuishoudelijkafvaldefaultRolcontainerStatusLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "rolcontainerId": obj.get("rolcontainerId"),
            "status": obj.get("status"),
            "vanafDatum": obj.get("vanafDatum"),
            "totDatum": obj.get("totDatum"),
            "aanmaakdatum": obj.get("aanmaakdatum"),
            "wijzigingsdatum": obj.get("wijzigingsdatum")
        })
        return _obj


