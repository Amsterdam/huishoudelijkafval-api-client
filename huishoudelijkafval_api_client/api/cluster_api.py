# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvalcluster import Huishoudelijkafvalcluster
from huishoudelijkafval_api_client.models.paginated_huishoudelijkafvalcluster_list import PaginatedHuishoudelijkafvalclusterList

from huishoudelijkafval_api_client.api_client import ApiClient, RequestSerialized
from huishoudelijkafval_api_client.api_response import ApiResponse
from huishoudelijkafval_api_client.rest import RESTResponseType


class ClusterApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def huishoudelijkafval_cluster_list_slash(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bronadres: Annotated[Optional[StrictStr], Field(description="Adres van het cluster zoals die in bron geregistreerd is.")] = None,
        bronadres_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bronadres_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bronadres_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bronadres_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bronadres_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_einde: Annotated[Optional[date], Field(description="Datum wanneer het cluster geen relaties meer heeft met containers met status=1.")] = None,
        datum_einde_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_einde_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_einde_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_einde_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_einde_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_ontstaan: Annotated[Optional[date], Field(description="Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_ontstaan_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_ontstaan_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_ontstaan_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_ontstaan_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_ontstaan_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_opvoer: Annotated[Optional[datetime], Field(description="Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_opvoer_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_opvoer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_opvoer_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        opmerking: Annotated[Optional[StrictStr], Field(description="Extra aanwijzing van de locatie voor de bestuurder.")] = None,
        opmerking_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        opmerking_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        opmerking_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        opmerking_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        opmerking_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        status: Annotated[Optional[StrictInt], Field(description="Status van het cluster (0 - inactief , 1 - actief)")] = None,
        status_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        status_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        status_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        status_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        status_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        status_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        status_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        subcluster_indicatie: Annotated[Optional[StrictBool], Field(description="Indicatie of het een cluster betreft dat is gesplitst door een weg")] = None,
        subcluster_indicatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is bij de bronhouder")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedHuishoudelijkafvalclusterList:
        """huishoudelijkafval_cluster_list_slash


        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_hoofdadres_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_hoofdadres_verblijfsobject_identificatie: str
        :param bag_hoofdadres_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_hoofdadres_verblijfsobject_identificatie_in: List[str]
        :param bag_hoofdadres_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isempty: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isnull: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_hoofdadres_verblijfsobject_identificatie_like: str
        :param bag_hoofdadres_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_hoofdadres_verblijfsobject_identificatie_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bronadres: Adres van het cluster zoals die in bron geregistreerd is.
        :type bronadres: str
        :param bronadres_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bronadres_in: List[str]
        :param bronadres_isempty: Whether the field is empty or not.
        :type bronadres_isempty: bool
        :param bronadres_isnull: Whether the field has a NULL value or not.
        :type bronadres_isnull: bool
        :param bronadres_like: Matches text using wildcards (? and *).
        :type bronadres_like: str
        :param bronadres_not: Exclude matches; text
        :type bronadres_not: List[str]
        :param datum_einde: Datum wanneer het cluster geen relaties meer heeft met containers met status=1.
        :type datum_einde: date
        :param datum_einde_gt: Greater than; use yyyy-mm-dd
        :type datum_einde_gt: date
        :param datum_einde_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_einde_gte: date
        :param datum_einde_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_einde_in: List[date]
        :param datum_einde_isnull: Whether the field has a NULL value or not.
        :type datum_einde_isnull: bool
        :param datum_einde_lt: Less than; use yyyy-mm-dd
        :type datum_einde_lt: date
        :param datum_einde_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_einde_lte: date
        :param datum_einde_not: Exclude matches; use yyyy-mm-dd
        :type datum_einde_not: List[date]
        :param datum_ontstaan: Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_ontstaan: date
        :param datum_ontstaan_gt: Greater than; use yyyy-mm-dd
        :type datum_ontstaan_gt: date
        :param datum_ontstaan_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_gte: date
        :param datum_ontstaan_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_ontstaan_in: List[date]
        :param datum_ontstaan_isnull: Whether the field has a NULL value or not.
        :type datum_ontstaan_isnull: bool
        :param datum_ontstaan_lt: Less than; use yyyy-mm-dd
        :type datum_ontstaan_lt: date
        :param datum_ontstaan_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_lte: date
        :param datum_ontstaan_not: Exclude matches; use yyyy-mm-dd
        :type datum_ontstaan_not: List[date]
        :param datum_opvoer: Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_opvoer: datetime
        :param datum_opvoer_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gt: datetime
        :param datum_opvoer_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gte: datetime
        :param datum_opvoer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_opvoer_in: List[datetime]
        :param datum_opvoer_isnull: Whether the field has a NULL value or not.
        :type datum_opvoer_isnull: bool
        :param datum_opvoer_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lt: datetime
        :param datum_opvoer_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lte: datetime
        :param datum_opvoer_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_not: List[datetime]
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param geometrie: Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Uniek identificerend kenmerk van cluster
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param opmerking: Extra aanwijzing van de locatie voor de bestuurder.
        :type opmerking: str
        :param opmerking_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type opmerking_in: List[str]
        :param opmerking_isempty: Whether the field is empty or not.
        :type opmerking_isempty: bool
        :param opmerking_isnull: Whether the field has a NULL value or not.
        :type opmerking_isnull: bool
        :param opmerking_like: Matches text using wildcards (? and *).
        :type opmerking_like: str
        :param opmerking_not: Exclude matches; text
        :type opmerking_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param status: Status van het cluster (0 - inactief , 1 - actief)
        :type status: int
        :param status_gt: Greater than; number
        :type status_gt: int
        :param status_gte: Greater than or equal to; number
        :type status_gte: int
        :param status_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type status_in: List[int]
        :param status_isnull: Whether the field has a NULL value or not.
        :type status_isnull: bool
        :param status_lt: Less than; number
        :type status_lt: int
        :param status_lte: Less than or equal to; number
        :type status_lte: int
        :param status_not: Exclude matches; number
        :type status_not: List[int]
        :param subcluster_indicatie: Indicatie of het een cluster betreft dat is gesplitst door een weg
        :type subcluster_indicatie: bool
        :param subcluster_indicatie_isnull: Whether the field has a NULL value or not.
        :type subcluster_indicatie_isnull: bool
        :param verwijderd_dp: Indicatie of het object verwijderd is bij de bronhouder
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_cluster_list_slash_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            bag_hoofdadres_verblijfsobject_identificatie=bag_hoofdadres_verblijfsobject_identificatie,
            bag_hoofdadres_verblijfsobject_identificatie_in=bag_hoofdadres_verblijfsobject_identificatie_in,
            bag_hoofdadres_verblijfsobject_identificatie_isempty=bag_hoofdadres_verblijfsobject_identificatie_isempty,
            bag_hoofdadres_verblijfsobject_identificatie_isnull=bag_hoofdadres_verblijfsobject_identificatie_isnull,
            bag_hoofdadres_verblijfsobject_identificatie_like=bag_hoofdadres_verblijfsobject_identificatie_like,
            bag_hoofdadres_verblijfsobject_identificatie_not=bag_hoofdadres_verblijfsobject_identificatie_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bronadres=bronadres,
            bronadres_in=bronadres_in,
            bronadres_isempty=bronadres_isempty,
            bronadres_isnull=bronadres_isnull,
            bronadres_like=bronadres_like,
            bronadres_not=bronadres_not,
            datum_einde=datum_einde,
            datum_einde_gt=datum_einde_gt,
            datum_einde_gte=datum_einde_gte,
            datum_einde_in=datum_einde_in,
            datum_einde_isnull=datum_einde_isnull,
            datum_einde_lt=datum_einde_lt,
            datum_einde_lte=datum_einde_lte,
            datum_einde_not=datum_einde_not,
            datum_ontstaan=datum_ontstaan,
            datum_ontstaan_gt=datum_ontstaan_gt,
            datum_ontstaan_gte=datum_ontstaan_gte,
            datum_ontstaan_in=datum_ontstaan_in,
            datum_ontstaan_isnull=datum_ontstaan_isnull,
            datum_ontstaan_lt=datum_ontstaan_lt,
            datum_ontstaan_lte=datum_ontstaan_lte,
            datum_ontstaan_not=datum_ontstaan_not,
            datum_opvoer=datum_opvoer,
            datum_opvoer_gt=datum_opvoer_gt,
            datum_opvoer_gte=datum_opvoer_gte,
            datum_opvoer_in=datum_opvoer_in,
            datum_opvoer_isnull=datum_opvoer_isnull,
            datum_opvoer_lt=datum_opvoer_lt,
            datum_opvoer_lte=datum_opvoer_lte,
            datum_opvoer_not=datum_opvoer_not,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            opmerking=opmerking,
            opmerking_in=opmerking_in,
            opmerking_isempty=opmerking_isempty,
            opmerking_isnull=opmerking_isnull,
            opmerking_like=opmerking_like,
            opmerking_not=opmerking_not,
            page=page,
            status=status,
            status_gt=status_gt,
            status_gte=status_gte,
            status_in=status_in,
            status_isnull=status_isnull,
            status_lt=status_lt,
            status_lte=status_lte,
            status_not=status_not,
            subcluster_indicatie=subcluster_indicatie,
            subcluster_indicatie_isnull=subcluster_indicatie_isnull,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalclusterList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def huishoudelijkafval_cluster_list_slash_with_http_info(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bronadres: Annotated[Optional[StrictStr], Field(description="Adres van het cluster zoals die in bron geregistreerd is.")] = None,
        bronadres_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bronadres_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bronadres_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bronadres_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bronadres_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_einde: Annotated[Optional[date], Field(description="Datum wanneer het cluster geen relaties meer heeft met containers met status=1.")] = None,
        datum_einde_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_einde_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_einde_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_einde_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_einde_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_ontstaan: Annotated[Optional[date], Field(description="Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_ontstaan_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_ontstaan_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_ontstaan_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_ontstaan_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_ontstaan_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_opvoer: Annotated[Optional[datetime], Field(description="Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_opvoer_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_opvoer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_opvoer_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        opmerking: Annotated[Optional[StrictStr], Field(description="Extra aanwijzing van de locatie voor de bestuurder.")] = None,
        opmerking_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        opmerking_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        opmerking_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        opmerking_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        opmerking_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        status: Annotated[Optional[StrictInt], Field(description="Status van het cluster (0 - inactief , 1 - actief)")] = None,
        status_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        status_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        status_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        status_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        status_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        status_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        status_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        subcluster_indicatie: Annotated[Optional[StrictBool], Field(description="Indicatie of het een cluster betreft dat is gesplitst door een weg")] = None,
        subcluster_indicatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is bij de bronhouder")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedHuishoudelijkafvalclusterList]:
        """huishoudelijkafval_cluster_list_slash


        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_hoofdadres_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_hoofdadres_verblijfsobject_identificatie: str
        :param bag_hoofdadres_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_hoofdadres_verblijfsobject_identificatie_in: List[str]
        :param bag_hoofdadres_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isempty: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isnull: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_hoofdadres_verblijfsobject_identificatie_like: str
        :param bag_hoofdadres_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_hoofdadres_verblijfsobject_identificatie_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bronadres: Adres van het cluster zoals die in bron geregistreerd is.
        :type bronadres: str
        :param bronadres_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bronadres_in: List[str]
        :param bronadres_isempty: Whether the field is empty or not.
        :type bronadres_isempty: bool
        :param bronadres_isnull: Whether the field has a NULL value or not.
        :type bronadres_isnull: bool
        :param bronadres_like: Matches text using wildcards (? and *).
        :type bronadres_like: str
        :param bronadres_not: Exclude matches; text
        :type bronadres_not: List[str]
        :param datum_einde: Datum wanneer het cluster geen relaties meer heeft met containers met status=1.
        :type datum_einde: date
        :param datum_einde_gt: Greater than; use yyyy-mm-dd
        :type datum_einde_gt: date
        :param datum_einde_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_einde_gte: date
        :param datum_einde_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_einde_in: List[date]
        :param datum_einde_isnull: Whether the field has a NULL value or not.
        :type datum_einde_isnull: bool
        :param datum_einde_lt: Less than; use yyyy-mm-dd
        :type datum_einde_lt: date
        :param datum_einde_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_einde_lte: date
        :param datum_einde_not: Exclude matches; use yyyy-mm-dd
        :type datum_einde_not: List[date]
        :param datum_ontstaan: Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_ontstaan: date
        :param datum_ontstaan_gt: Greater than; use yyyy-mm-dd
        :type datum_ontstaan_gt: date
        :param datum_ontstaan_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_gte: date
        :param datum_ontstaan_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_ontstaan_in: List[date]
        :param datum_ontstaan_isnull: Whether the field has a NULL value or not.
        :type datum_ontstaan_isnull: bool
        :param datum_ontstaan_lt: Less than; use yyyy-mm-dd
        :type datum_ontstaan_lt: date
        :param datum_ontstaan_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_lte: date
        :param datum_ontstaan_not: Exclude matches; use yyyy-mm-dd
        :type datum_ontstaan_not: List[date]
        :param datum_opvoer: Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_opvoer: datetime
        :param datum_opvoer_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gt: datetime
        :param datum_opvoer_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gte: datetime
        :param datum_opvoer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_opvoer_in: List[datetime]
        :param datum_opvoer_isnull: Whether the field has a NULL value or not.
        :type datum_opvoer_isnull: bool
        :param datum_opvoer_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lt: datetime
        :param datum_opvoer_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lte: datetime
        :param datum_opvoer_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_not: List[datetime]
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param geometrie: Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Uniek identificerend kenmerk van cluster
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param opmerking: Extra aanwijzing van de locatie voor de bestuurder.
        :type opmerking: str
        :param opmerking_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type opmerking_in: List[str]
        :param opmerking_isempty: Whether the field is empty or not.
        :type opmerking_isempty: bool
        :param opmerking_isnull: Whether the field has a NULL value or not.
        :type opmerking_isnull: bool
        :param opmerking_like: Matches text using wildcards (? and *).
        :type opmerking_like: str
        :param opmerking_not: Exclude matches; text
        :type opmerking_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param status: Status van het cluster (0 - inactief , 1 - actief)
        :type status: int
        :param status_gt: Greater than; number
        :type status_gt: int
        :param status_gte: Greater than or equal to; number
        :type status_gte: int
        :param status_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type status_in: List[int]
        :param status_isnull: Whether the field has a NULL value or not.
        :type status_isnull: bool
        :param status_lt: Less than; number
        :type status_lt: int
        :param status_lte: Less than or equal to; number
        :type status_lte: int
        :param status_not: Exclude matches; number
        :type status_not: List[int]
        :param subcluster_indicatie: Indicatie of het een cluster betreft dat is gesplitst door een weg
        :type subcluster_indicatie: bool
        :param subcluster_indicatie_isnull: Whether the field has a NULL value or not.
        :type subcluster_indicatie_isnull: bool
        :param verwijderd_dp: Indicatie of het object verwijderd is bij de bronhouder
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_cluster_list_slash_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            bag_hoofdadres_verblijfsobject_identificatie=bag_hoofdadres_verblijfsobject_identificatie,
            bag_hoofdadres_verblijfsobject_identificatie_in=bag_hoofdadres_verblijfsobject_identificatie_in,
            bag_hoofdadres_verblijfsobject_identificatie_isempty=bag_hoofdadres_verblijfsobject_identificatie_isempty,
            bag_hoofdadres_verblijfsobject_identificatie_isnull=bag_hoofdadres_verblijfsobject_identificatie_isnull,
            bag_hoofdadres_verblijfsobject_identificatie_like=bag_hoofdadres_verblijfsobject_identificatie_like,
            bag_hoofdadres_verblijfsobject_identificatie_not=bag_hoofdadres_verblijfsobject_identificatie_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bronadres=bronadres,
            bronadres_in=bronadres_in,
            bronadres_isempty=bronadres_isempty,
            bronadres_isnull=bronadres_isnull,
            bronadres_like=bronadres_like,
            bronadres_not=bronadres_not,
            datum_einde=datum_einde,
            datum_einde_gt=datum_einde_gt,
            datum_einde_gte=datum_einde_gte,
            datum_einde_in=datum_einde_in,
            datum_einde_isnull=datum_einde_isnull,
            datum_einde_lt=datum_einde_lt,
            datum_einde_lte=datum_einde_lte,
            datum_einde_not=datum_einde_not,
            datum_ontstaan=datum_ontstaan,
            datum_ontstaan_gt=datum_ontstaan_gt,
            datum_ontstaan_gte=datum_ontstaan_gte,
            datum_ontstaan_in=datum_ontstaan_in,
            datum_ontstaan_isnull=datum_ontstaan_isnull,
            datum_ontstaan_lt=datum_ontstaan_lt,
            datum_ontstaan_lte=datum_ontstaan_lte,
            datum_ontstaan_not=datum_ontstaan_not,
            datum_opvoer=datum_opvoer,
            datum_opvoer_gt=datum_opvoer_gt,
            datum_opvoer_gte=datum_opvoer_gte,
            datum_opvoer_in=datum_opvoer_in,
            datum_opvoer_isnull=datum_opvoer_isnull,
            datum_opvoer_lt=datum_opvoer_lt,
            datum_opvoer_lte=datum_opvoer_lte,
            datum_opvoer_not=datum_opvoer_not,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            opmerking=opmerking,
            opmerking_in=opmerking_in,
            opmerking_isempty=opmerking_isempty,
            opmerking_isnull=opmerking_isnull,
            opmerking_like=opmerking_like,
            opmerking_not=opmerking_not,
            page=page,
            status=status,
            status_gt=status_gt,
            status_gte=status_gte,
            status_in=status_in,
            status_isnull=status_isnull,
            status_lt=status_lt,
            status_lte=status_lte,
            status_not=status_not,
            subcluster_indicatie=subcluster_indicatie,
            subcluster_indicatie_isnull=subcluster_indicatie_isnull,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalclusterList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def huishoudelijkafval_cluster_list_slash_without_preload_content(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bronadres: Annotated[Optional[StrictStr], Field(description="Adres van het cluster zoals die in bron geregistreerd is.")] = None,
        bronadres_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bronadres_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bronadres_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bronadres_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bronadres_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_einde: Annotated[Optional[date], Field(description="Datum wanneer het cluster geen relaties meer heeft met containers met status=1.")] = None,
        datum_einde_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_einde_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_einde_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_einde_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_einde_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_ontstaan: Annotated[Optional[date], Field(description="Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_ontstaan_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_ontstaan_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_ontstaan_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_ontstaan_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_ontstaan_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_opvoer: Annotated[Optional[datetime], Field(description="Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_opvoer_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_opvoer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_opvoer_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        opmerking: Annotated[Optional[StrictStr], Field(description="Extra aanwijzing van de locatie voor de bestuurder.")] = None,
        opmerking_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        opmerking_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        opmerking_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        opmerking_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        opmerking_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        status: Annotated[Optional[StrictInt], Field(description="Status van het cluster (0 - inactief , 1 - actief)")] = None,
        status_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        status_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        status_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        status_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        status_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        status_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        status_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        subcluster_indicatie: Annotated[Optional[StrictBool], Field(description="Indicatie of het een cluster betreft dat is gesplitst door een weg")] = None,
        subcluster_indicatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is bij de bronhouder")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """huishoudelijkafval_cluster_list_slash


        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_hoofdadres_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_hoofdadres_verblijfsobject_identificatie: str
        :param bag_hoofdadres_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_hoofdadres_verblijfsobject_identificatie_in: List[str]
        :param bag_hoofdadres_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isempty: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isnull: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_hoofdadres_verblijfsobject_identificatie_like: str
        :param bag_hoofdadres_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_hoofdadres_verblijfsobject_identificatie_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bronadres: Adres van het cluster zoals die in bron geregistreerd is.
        :type bronadres: str
        :param bronadres_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bronadres_in: List[str]
        :param bronadres_isempty: Whether the field is empty or not.
        :type bronadres_isempty: bool
        :param bronadres_isnull: Whether the field has a NULL value or not.
        :type bronadres_isnull: bool
        :param bronadres_like: Matches text using wildcards (? and *).
        :type bronadres_like: str
        :param bronadres_not: Exclude matches; text
        :type bronadres_not: List[str]
        :param datum_einde: Datum wanneer het cluster geen relaties meer heeft met containers met status=1.
        :type datum_einde: date
        :param datum_einde_gt: Greater than; use yyyy-mm-dd
        :type datum_einde_gt: date
        :param datum_einde_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_einde_gte: date
        :param datum_einde_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_einde_in: List[date]
        :param datum_einde_isnull: Whether the field has a NULL value or not.
        :type datum_einde_isnull: bool
        :param datum_einde_lt: Less than; use yyyy-mm-dd
        :type datum_einde_lt: date
        :param datum_einde_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_einde_lte: date
        :param datum_einde_not: Exclude matches; use yyyy-mm-dd
        :type datum_einde_not: List[date]
        :param datum_ontstaan: Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_ontstaan: date
        :param datum_ontstaan_gt: Greater than; use yyyy-mm-dd
        :type datum_ontstaan_gt: date
        :param datum_ontstaan_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_gte: date
        :param datum_ontstaan_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_ontstaan_in: List[date]
        :param datum_ontstaan_isnull: Whether the field has a NULL value or not.
        :type datum_ontstaan_isnull: bool
        :param datum_ontstaan_lt: Less than; use yyyy-mm-dd
        :type datum_ontstaan_lt: date
        :param datum_ontstaan_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_lte: date
        :param datum_ontstaan_not: Exclude matches; use yyyy-mm-dd
        :type datum_ontstaan_not: List[date]
        :param datum_opvoer: Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_opvoer: datetime
        :param datum_opvoer_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gt: datetime
        :param datum_opvoer_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gte: datetime
        :param datum_opvoer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_opvoer_in: List[datetime]
        :param datum_opvoer_isnull: Whether the field has a NULL value or not.
        :type datum_opvoer_isnull: bool
        :param datum_opvoer_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lt: datetime
        :param datum_opvoer_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lte: datetime
        :param datum_opvoer_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_not: List[datetime]
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param geometrie: Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Uniek identificerend kenmerk van cluster
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param opmerking: Extra aanwijzing van de locatie voor de bestuurder.
        :type opmerking: str
        :param opmerking_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type opmerking_in: List[str]
        :param opmerking_isempty: Whether the field is empty or not.
        :type opmerking_isempty: bool
        :param opmerking_isnull: Whether the field has a NULL value or not.
        :type opmerking_isnull: bool
        :param opmerking_like: Matches text using wildcards (? and *).
        :type opmerking_like: str
        :param opmerking_not: Exclude matches; text
        :type opmerking_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param status: Status van het cluster (0 - inactief , 1 - actief)
        :type status: int
        :param status_gt: Greater than; number
        :type status_gt: int
        :param status_gte: Greater than or equal to; number
        :type status_gte: int
        :param status_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type status_in: List[int]
        :param status_isnull: Whether the field has a NULL value or not.
        :type status_isnull: bool
        :param status_lt: Less than; number
        :type status_lt: int
        :param status_lte: Less than or equal to; number
        :type status_lte: int
        :param status_not: Exclude matches; number
        :type status_not: List[int]
        :param subcluster_indicatie: Indicatie of het een cluster betreft dat is gesplitst door een weg
        :type subcluster_indicatie: bool
        :param subcluster_indicatie_isnull: Whether the field has a NULL value or not.
        :type subcluster_indicatie_isnull: bool
        :param verwijderd_dp: Indicatie of het object verwijderd is bij de bronhouder
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_cluster_list_slash_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            bag_hoofdadres_verblijfsobject_identificatie=bag_hoofdadres_verblijfsobject_identificatie,
            bag_hoofdadres_verblijfsobject_identificatie_in=bag_hoofdadres_verblijfsobject_identificatie_in,
            bag_hoofdadres_verblijfsobject_identificatie_isempty=bag_hoofdadres_verblijfsobject_identificatie_isempty,
            bag_hoofdadres_verblijfsobject_identificatie_isnull=bag_hoofdadres_verblijfsobject_identificatie_isnull,
            bag_hoofdadres_verblijfsobject_identificatie_like=bag_hoofdadres_verblijfsobject_identificatie_like,
            bag_hoofdadres_verblijfsobject_identificatie_not=bag_hoofdadres_verblijfsobject_identificatie_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bronadres=bronadres,
            bronadres_in=bronadres_in,
            bronadres_isempty=bronadres_isempty,
            bronadres_isnull=bronadres_isnull,
            bronadres_like=bronadres_like,
            bronadres_not=bronadres_not,
            datum_einde=datum_einde,
            datum_einde_gt=datum_einde_gt,
            datum_einde_gte=datum_einde_gte,
            datum_einde_in=datum_einde_in,
            datum_einde_isnull=datum_einde_isnull,
            datum_einde_lt=datum_einde_lt,
            datum_einde_lte=datum_einde_lte,
            datum_einde_not=datum_einde_not,
            datum_ontstaan=datum_ontstaan,
            datum_ontstaan_gt=datum_ontstaan_gt,
            datum_ontstaan_gte=datum_ontstaan_gte,
            datum_ontstaan_in=datum_ontstaan_in,
            datum_ontstaan_isnull=datum_ontstaan_isnull,
            datum_ontstaan_lt=datum_ontstaan_lt,
            datum_ontstaan_lte=datum_ontstaan_lte,
            datum_ontstaan_not=datum_ontstaan_not,
            datum_opvoer=datum_opvoer,
            datum_opvoer_gt=datum_opvoer_gt,
            datum_opvoer_gte=datum_opvoer_gte,
            datum_opvoer_in=datum_opvoer_in,
            datum_opvoer_isnull=datum_opvoer_isnull,
            datum_opvoer_lt=datum_opvoer_lt,
            datum_opvoer_lte=datum_opvoer_lte,
            datum_opvoer_not=datum_opvoer_not,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            opmerking=opmerking,
            opmerking_in=opmerking_in,
            opmerking_isempty=opmerking_isempty,
            opmerking_isnull=opmerking_isnull,
            opmerking_like=opmerking_like,
            opmerking_not=opmerking_not,
            page=page,
            status=status,
            status_gt=status_gt,
            status_gte=status_gte,
            status_in=status_in,
            status_isnull=status_isnull,
            status_lt=status_lt,
            status_lte=status_lte,
            status_not=status_not,
            subcluster_indicatie=subcluster_indicatie,
            subcluster_indicatie_isnull=subcluster_indicatie_isnull,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalclusterList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _huishoudelijkafval_cluster_list_slash_serialize(
        self,
        accept_crs,
        content_crs,
        x_api_key,
        count,
        csv_header,
        csv_separator,
        expand,
        expand_scope,
        fields,
        format,
        page_size,
        sort,
        bag_hoofdadres_verblijfsobject_identificatie,
        bag_hoofdadres_verblijfsobject_identificatie_in,
        bag_hoofdadres_verblijfsobject_identificatie_isempty,
        bag_hoofdadres_verblijfsobject_identificatie_isnull,
        bag_hoofdadres_verblijfsobject_identificatie_like,
        bag_hoofdadres_verblijfsobject_identificatie_not,
        bag_nummeraanduiding_identificatie,
        bag_nummeraanduiding_identificatie_in,
        bag_nummeraanduiding_identificatie_isempty,
        bag_nummeraanduiding_identificatie_isnull,
        bag_nummeraanduiding_identificatie_like,
        bag_nummeraanduiding_identificatie_not,
        bag_openbareruimte_identificatie,
        bag_openbareruimte_identificatie_in,
        bag_openbareruimte_identificatie_isempty,
        bag_openbareruimte_identificatie_isnull,
        bag_openbareruimte_identificatie_like,
        bag_openbareruimte_identificatie_not,
        bronadres,
        bronadres_in,
        bronadres_isempty,
        bronadres_isnull,
        bronadres_like,
        bronadres_not,
        datum_einde,
        datum_einde_gt,
        datum_einde_gte,
        datum_einde_in,
        datum_einde_isnull,
        datum_einde_lt,
        datum_einde_lte,
        datum_einde_not,
        datum_ontstaan,
        datum_ontstaan_gt,
        datum_ontstaan_gte,
        datum_ontstaan_in,
        datum_ontstaan_isnull,
        datum_ontstaan_lt,
        datum_ontstaan_lte,
        datum_ontstaan_not,
        datum_opvoer,
        datum_opvoer_gt,
        datum_opvoer_gte,
        datum_opvoer_in,
        datum_opvoer_isnull,
        datum_opvoer_lt,
        datum_opvoer_lte,
        datum_opvoer_not,
        gbd_buurt_identificatie,
        gbd_buurt_identificatie_in,
        gbd_buurt_identificatie_isempty,
        gbd_buurt_identificatie_isnull,
        gbd_buurt_identificatie_like,
        gbd_buurt_identificatie_not,
        geometrie,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        id,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        opmerking,
        opmerking_in,
        opmerking_isempty,
        opmerking_isnull,
        opmerking_like,
        opmerking_not,
        page,
        status,
        status_gt,
        status_gte,
        status_in,
        status_isnull,
        status_lt,
        status_lte,
        status_not,
        subcluster_indicatie,
        subcluster_indicatie_isnull,
        verwijderd_dp,
        verwijderd_dp_isnull,
        wijzigingsdatum_dp,
        wijzigingsdatum_dp_gt,
        wijzigingsdatum_dp_gte,
        wijzigingsdatum_dp_in,
        wijzigingsdatum_dp_isnull,
        wijzigingsdatum_dp_lt,
        wijzigingsdatum_dp_lte,
        wijzigingsdatum_dp_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'bagHoofdadresVerblijfsobject.identificatie[in]': 'csv',
            'bagHoofdadresVerblijfsobject.identificatie[not]': 'multi',
            'bagNummeraanduiding.identificatie[in]': 'csv',
            'bagNummeraanduiding.identificatie[not]': 'multi',
            'bagOpenbareruimte.identificatie[in]': 'csv',
            'bagOpenbareruimte.identificatie[not]': 'multi',
            'bronadres[in]': 'csv',
            'bronadres[not]': 'multi',
            'datumEinde[in]': 'csv',
            'datumEinde[not]': 'multi',
            'datumOntstaan[in]': 'csv',
            'datumOntstaan[not]': 'multi',
            'datumOpvoer[in]': 'csv',
            'datumOpvoer[not]': 'multi',
            'gbdBuurt.identificatie[in]': 'csv',
            'gbdBuurt.identificatie[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'opmerking[in]': 'csv',
            'opmerking[not]': 'multi',
            'status[in]': 'csv',
            'status[not]': 'multi',
            'wijzigingsdatumDp[in]': 'csv',
            'wijzigingsdatumDp[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('_count', count))
            
        if csv_header is not None:
            
            _query_params.append(('_csv_header', csv_header))
            
        if csv_separator is not None:
            
            _query_params.append(('_csv_separator', csv_separator))
            
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if page_size is not None:
            
            _query_params.append(('_pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if bag_hoofdadres_verblijfsobject_identificatie is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie', bag_hoofdadres_verblijfsobject_identificatie))
            
        if bag_hoofdadres_verblijfsobject_identificatie_in is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[in]', bag_hoofdadres_verblijfsobject_identificatie_in))
            
        if bag_hoofdadres_verblijfsobject_identificatie_isempty is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[isempty]', bag_hoofdadres_verblijfsobject_identificatie_isempty))
            
        if bag_hoofdadres_verblijfsobject_identificatie_isnull is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[isnull]', bag_hoofdadres_verblijfsobject_identificatie_isnull))
            
        if bag_hoofdadres_verblijfsobject_identificatie_like is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[like]', bag_hoofdadres_verblijfsobject_identificatie_like))
            
        if bag_hoofdadres_verblijfsobject_identificatie_not is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[not]', bag_hoofdadres_verblijfsobject_identificatie_not))
            
        if bag_nummeraanduiding_identificatie is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie', bag_nummeraanduiding_identificatie))
            
        if bag_nummeraanduiding_identificatie_in is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[in]', bag_nummeraanduiding_identificatie_in))
            
        if bag_nummeraanduiding_identificatie_isempty is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isempty]', bag_nummeraanduiding_identificatie_isempty))
            
        if bag_nummeraanduiding_identificatie_isnull is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isnull]', bag_nummeraanduiding_identificatie_isnull))
            
        if bag_nummeraanduiding_identificatie_like is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[like]', bag_nummeraanduiding_identificatie_like))
            
        if bag_nummeraanduiding_identificatie_not is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[not]', bag_nummeraanduiding_identificatie_not))
            
        if bag_openbareruimte_identificatie is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie', bag_openbareruimte_identificatie))
            
        if bag_openbareruimte_identificatie_in is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[in]', bag_openbareruimte_identificatie_in))
            
        if bag_openbareruimte_identificatie_isempty is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isempty]', bag_openbareruimte_identificatie_isempty))
            
        if bag_openbareruimte_identificatie_isnull is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isnull]', bag_openbareruimte_identificatie_isnull))
            
        if bag_openbareruimte_identificatie_like is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[like]', bag_openbareruimte_identificatie_like))
            
        if bag_openbareruimte_identificatie_not is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[not]', bag_openbareruimte_identificatie_not))
            
        if bronadres is not None:
            
            _query_params.append(('bronadres', bronadres))
            
        if bronadres_in is not None:
            
            _query_params.append(('bronadres[in]', bronadres_in))
            
        if bronadres_isempty is not None:
            
            _query_params.append(('bronadres[isempty]', bronadres_isempty))
            
        if bronadres_isnull is not None:
            
            _query_params.append(('bronadres[isnull]', bronadres_isnull))
            
        if bronadres_like is not None:
            
            _query_params.append(('bronadres[like]', bronadres_like))
            
        if bronadres_not is not None:
            
            _query_params.append(('bronadres[not]', bronadres_not))
            
        if datum_einde is not None:
            if isinstance(datum_einde, date):
                _query_params.append(
                    (
                        'datumEinde',
                        datum_einde.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde', datum_einde))
            
        if datum_einde_gt is not None:
            if isinstance(datum_einde_gt, date):
                _query_params.append(
                    (
                        'datumEinde[gt]',
                        datum_einde_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[gt]', datum_einde_gt))
            
        if datum_einde_gte is not None:
            if isinstance(datum_einde_gte, date):
                _query_params.append(
                    (
                        'datumEinde[gte]',
                        datum_einde_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[gte]', datum_einde_gte))
            
        if datum_einde_in is not None:
            
            _query_params.append(('datumEinde[in]', datum_einde_in))
            
        if datum_einde_isnull is not None:
            
            _query_params.append(('datumEinde[isnull]', datum_einde_isnull))
            
        if datum_einde_lt is not None:
            if isinstance(datum_einde_lt, date):
                _query_params.append(
                    (
                        'datumEinde[lt]',
                        datum_einde_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[lt]', datum_einde_lt))
            
        if datum_einde_lte is not None:
            if isinstance(datum_einde_lte, date):
                _query_params.append(
                    (
                        'datumEinde[lte]',
                        datum_einde_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[lte]', datum_einde_lte))
            
        if datum_einde_not is not None:
            
            _query_params.append(('datumEinde[not]', datum_einde_not))
            
        if datum_ontstaan is not None:
            if isinstance(datum_ontstaan, date):
                _query_params.append(
                    (
                        'datumOntstaan',
                        datum_ontstaan.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan', datum_ontstaan))
            
        if datum_ontstaan_gt is not None:
            if isinstance(datum_ontstaan_gt, date):
                _query_params.append(
                    (
                        'datumOntstaan[gt]',
                        datum_ontstaan_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[gt]', datum_ontstaan_gt))
            
        if datum_ontstaan_gte is not None:
            if isinstance(datum_ontstaan_gte, date):
                _query_params.append(
                    (
                        'datumOntstaan[gte]',
                        datum_ontstaan_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[gte]', datum_ontstaan_gte))
            
        if datum_ontstaan_in is not None:
            
            _query_params.append(('datumOntstaan[in]', datum_ontstaan_in))
            
        if datum_ontstaan_isnull is not None:
            
            _query_params.append(('datumOntstaan[isnull]', datum_ontstaan_isnull))
            
        if datum_ontstaan_lt is not None:
            if isinstance(datum_ontstaan_lt, date):
                _query_params.append(
                    (
                        'datumOntstaan[lt]',
                        datum_ontstaan_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[lt]', datum_ontstaan_lt))
            
        if datum_ontstaan_lte is not None:
            if isinstance(datum_ontstaan_lte, date):
                _query_params.append(
                    (
                        'datumOntstaan[lte]',
                        datum_ontstaan_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[lte]', datum_ontstaan_lte))
            
        if datum_ontstaan_not is not None:
            
            _query_params.append(('datumOntstaan[not]', datum_ontstaan_not))
            
        if datum_opvoer is not None:
            if isinstance(datum_opvoer, datetime):
                _query_params.append(
                    (
                        'datumOpvoer',
                        datum_opvoer.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer', datum_opvoer))
            
        if datum_opvoer_gt is not None:
            if isinstance(datum_opvoer_gt, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[gt]',
                        datum_opvoer_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[gt]', datum_opvoer_gt))
            
        if datum_opvoer_gte is not None:
            if isinstance(datum_opvoer_gte, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[gte]',
                        datum_opvoer_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[gte]', datum_opvoer_gte))
            
        if datum_opvoer_in is not None:
            
            _query_params.append(('datumOpvoer[in]', datum_opvoer_in))
            
        if datum_opvoer_isnull is not None:
            
            _query_params.append(('datumOpvoer[isnull]', datum_opvoer_isnull))
            
        if datum_opvoer_lt is not None:
            if isinstance(datum_opvoer_lt, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[lt]',
                        datum_opvoer_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[lt]', datum_opvoer_lt))
            
        if datum_opvoer_lte is not None:
            if isinstance(datum_opvoer_lte, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[lte]',
                        datum_opvoer_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[lte]', datum_opvoer_lte))
            
        if datum_opvoer_not is not None:
            
            _query_params.append(('datumOpvoer[not]', datum_opvoer_not))
            
        if gbd_buurt_identificatie is not None:
            
            _query_params.append(('gbdBuurt.identificatie', gbd_buurt_identificatie))
            
        if gbd_buurt_identificatie_in is not None:
            
            _query_params.append(('gbdBuurt.identificatie[in]', gbd_buurt_identificatie_in))
            
        if gbd_buurt_identificatie_isempty is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isempty]', gbd_buurt_identificatie_isempty))
            
        if gbd_buurt_identificatie_isnull is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isnull]', gbd_buurt_identificatie_isnull))
            
        if gbd_buurt_identificatie_like is not None:
            
            _query_params.append(('gbdBuurt.identificatie[like]', gbd_buurt_identificatie_like))
            
        if gbd_buurt_identificatie_not is not None:
            
            _query_params.append(('gbdBuurt.identificatie[not]', gbd_buurt_identificatie_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if opmerking is not None:
            
            _query_params.append(('opmerking', opmerking))
            
        if opmerking_in is not None:
            
            _query_params.append(('opmerking[in]', opmerking_in))
            
        if opmerking_isempty is not None:
            
            _query_params.append(('opmerking[isempty]', opmerking_isempty))
            
        if opmerking_isnull is not None:
            
            _query_params.append(('opmerking[isnull]', opmerking_isnull))
            
        if opmerking_like is not None:
            
            _query_params.append(('opmerking[like]', opmerking_like))
            
        if opmerking_not is not None:
            
            _query_params.append(('opmerking[not]', opmerking_not))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if status_gt is not None:
            
            _query_params.append(('status[gt]', status_gt))
            
        if status_gte is not None:
            
            _query_params.append(('status[gte]', status_gte))
            
        if status_in is not None:
            
            _query_params.append(('status[in]', status_in))
            
        if status_isnull is not None:
            
            _query_params.append(('status[isnull]', status_isnull))
            
        if status_lt is not None:
            
            _query_params.append(('status[lt]', status_lt))
            
        if status_lte is not None:
            
            _query_params.append(('status[lte]', status_lte))
            
        if status_not is not None:
            
            _query_params.append(('status[not]', status_not))
            
        if subcluster_indicatie is not None:
            
            _query_params.append(('subclusterIndicatie', subcluster_indicatie))
            
        if subcluster_indicatie_isnull is not None:
            
            _query_params.append(('subclusterIndicatie[isnull]', subcluster_indicatie_isnull))
            
        if verwijderd_dp is not None:
            
            _query_params.append(('verwijderdDp', verwijderd_dp))
            
        if verwijderd_dp_isnull is not None:
            
            _query_params.append(('verwijderdDp[isnull]', verwijderd_dp_isnull))
            
        if wijzigingsdatum_dp is not None:
            if isinstance(wijzigingsdatum_dp, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp',
                        wijzigingsdatum_dp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp', wijzigingsdatum_dp))
            
        if wijzigingsdatum_dp_gt is not None:
            if isinstance(wijzigingsdatum_dp_gt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gt]',
                        wijzigingsdatum_dp_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gt]', wijzigingsdatum_dp_gt))
            
        if wijzigingsdatum_dp_gte is not None:
            if isinstance(wijzigingsdatum_dp_gte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gte]',
                        wijzigingsdatum_dp_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gte]', wijzigingsdatum_dp_gte))
            
        if wijzigingsdatum_dp_in is not None:
            
            _query_params.append(('wijzigingsdatumDp[in]', wijzigingsdatum_dp_in))
            
        if wijzigingsdatum_dp_isnull is not None:
            
            _query_params.append(('wijzigingsdatumDp[isnull]', wijzigingsdatum_dp_isnull))
            
        if wijzigingsdatum_dp_lt is not None:
            if isinstance(wijzigingsdatum_dp_lt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lt]',
                        wijzigingsdatum_dp_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lt]', wijzigingsdatum_dp_lt))
            
        if wijzigingsdatum_dp_lte is not None:
            if isinstance(wijzigingsdatum_dp_lte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lte]',
                        wijzigingsdatum_dp_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lte]', wijzigingsdatum_dp_lte))
            
        if wijzigingsdatum_dp_not is not None:
            
            _query_params.append(('wijzigingsdatumDp[not]', wijzigingsdatum_dp_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/cluster',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def huishoudelijkafval_cluster_retrieve_slash(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bronadres: Annotated[Optional[StrictStr], Field(description="Adres van het cluster zoals die in bron geregistreerd is.")] = None,
        bronadres_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bronadres_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bronadres_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bronadres_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bronadres_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_einde: Annotated[Optional[date], Field(description="Datum wanneer het cluster geen relaties meer heeft met containers met status=1.")] = None,
        datum_einde_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_einde_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_einde_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_einde_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_einde_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_ontstaan: Annotated[Optional[date], Field(description="Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_ontstaan_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_ontstaan_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_ontstaan_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_ontstaan_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_ontstaan_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_opvoer: Annotated[Optional[datetime], Field(description="Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_opvoer_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_opvoer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_opvoer_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        opmerking: Annotated[Optional[StrictStr], Field(description="Extra aanwijzing van de locatie voor de bestuurder.")] = None,
        opmerking_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        opmerking_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        opmerking_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        opmerking_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        opmerking_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        status: Annotated[Optional[StrictInt], Field(description="Status van het cluster (0 - inactief , 1 - actief)")] = None,
        status_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        status_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        status_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        status_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        status_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        status_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        status_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        subcluster_indicatie: Annotated[Optional[StrictBool], Field(description="Indicatie of het een cluster betreft dat is gesplitst door een weg")] = None,
        subcluster_indicatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is bij de bronhouder")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Huishoudelijkafvalcluster:
        """huishoudelijkafval_cluster_retrieve_slash


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_hoofdadres_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_hoofdadres_verblijfsobject_identificatie: str
        :param bag_hoofdadres_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_hoofdadres_verblijfsobject_identificatie_in: List[str]
        :param bag_hoofdadres_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isempty: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isnull: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_hoofdadres_verblijfsobject_identificatie_like: str
        :param bag_hoofdadres_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_hoofdadres_verblijfsobject_identificatie_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bronadres: Adres van het cluster zoals die in bron geregistreerd is.
        :type bronadres: str
        :param bronadres_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bronadres_in: List[str]
        :param bronadres_isempty: Whether the field is empty or not.
        :type bronadres_isempty: bool
        :param bronadres_isnull: Whether the field has a NULL value or not.
        :type bronadres_isnull: bool
        :param bronadres_like: Matches text using wildcards (? and *).
        :type bronadres_like: str
        :param bronadres_not: Exclude matches; text
        :type bronadres_not: List[str]
        :param datum_einde: Datum wanneer het cluster geen relaties meer heeft met containers met status=1.
        :type datum_einde: date
        :param datum_einde_gt: Greater than; use yyyy-mm-dd
        :type datum_einde_gt: date
        :param datum_einde_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_einde_gte: date
        :param datum_einde_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_einde_in: List[date]
        :param datum_einde_isnull: Whether the field has a NULL value or not.
        :type datum_einde_isnull: bool
        :param datum_einde_lt: Less than; use yyyy-mm-dd
        :type datum_einde_lt: date
        :param datum_einde_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_einde_lte: date
        :param datum_einde_not: Exclude matches; use yyyy-mm-dd
        :type datum_einde_not: List[date]
        :param datum_ontstaan: Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_ontstaan: date
        :param datum_ontstaan_gt: Greater than; use yyyy-mm-dd
        :type datum_ontstaan_gt: date
        :param datum_ontstaan_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_gte: date
        :param datum_ontstaan_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_ontstaan_in: List[date]
        :param datum_ontstaan_isnull: Whether the field has a NULL value or not.
        :type datum_ontstaan_isnull: bool
        :param datum_ontstaan_lt: Less than; use yyyy-mm-dd
        :type datum_ontstaan_lt: date
        :param datum_ontstaan_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_lte: date
        :param datum_ontstaan_not: Exclude matches; use yyyy-mm-dd
        :type datum_ontstaan_not: List[date]
        :param datum_opvoer: Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_opvoer: datetime
        :param datum_opvoer_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gt: datetime
        :param datum_opvoer_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gte: datetime
        :param datum_opvoer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_opvoer_in: List[datetime]
        :param datum_opvoer_isnull: Whether the field has a NULL value or not.
        :type datum_opvoer_isnull: bool
        :param datum_opvoer_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lt: datetime
        :param datum_opvoer_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lte: datetime
        :param datum_opvoer_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_not: List[datetime]
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param geometrie: Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Uniek identificerend kenmerk van cluster
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param opmerking: Extra aanwijzing van de locatie voor de bestuurder.
        :type opmerking: str
        :param opmerking_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type opmerking_in: List[str]
        :param opmerking_isempty: Whether the field is empty or not.
        :type opmerking_isempty: bool
        :param opmerking_isnull: Whether the field has a NULL value or not.
        :type opmerking_isnull: bool
        :param opmerking_like: Matches text using wildcards (? and *).
        :type opmerking_like: str
        :param opmerking_not: Exclude matches; text
        :type opmerking_not: List[str]
        :param status: Status van het cluster (0 - inactief , 1 - actief)
        :type status: int
        :param status_gt: Greater than; number
        :type status_gt: int
        :param status_gte: Greater than or equal to; number
        :type status_gte: int
        :param status_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type status_in: List[int]
        :param status_isnull: Whether the field has a NULL value or not.
        :type status_isnull: bool
        :param status_lt: Less than; number
        :type status_lt: int
        :param status_lte: Less than or equal to; number
        :type status_lte: int
        :param status_not: Exclude matches; number
        :type status_not: List[int]
        :param subcluster_indicatie: Indicatie of het een cluster betreft dat is gesplitst door een weg
        :type subcluster_indicatie: bool
        :param subcluster_indicatie_isnull: Whether the field has a NULL value or not.
        :type subcluster_indicatie_isnull: bool
        :param verwijderd_dp: Indicatie of het object verwijderd is bij de bronhouder
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_cluster_retrieve_slash_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            bag_hoofdadres_verblijfsobject_identificatie=bag_hoofdadres_verblijfsobject_identificatie,
            bag_hoofdadres_verblijfsobject_identificatie_in=bag_hoofdadres_verblijfsobject_identificatie_in,
            bag_hoofdadres_verblijfsobject_identificatie_isempty=bag_hoofdadres_verblijfsobject_identificatie_isempty,
            bag_hoofdadres_verblijfsobject_identificatie_isnull=bag_hoofdadres_verblijfsobject_identificatie_isnull,
            bag_hoofdadres_verblijfsobject_identificatie_like=bag_hoofdadres_verblijfsobject_identificatie_like,
            bag_hoofdadres_verblijfsobject_identificatie_not=bag_hoofdadres_verblijfsobject_identificatie_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bronadres=bronadres,
            bronadres_in=bronadres_in,
            bronadres_isempty=bronadres_isempty,
            bronadres_isnull=bronadres_isnull,
            bronadres_like=bronadres_like,
            bronadres_not=bronadres_not,
            datum_einde=datum_einde,
            datum_einde_gt=datum_einde_gt,
            datum_einde_gte=datum_einde_gte,
            datum_einde_in=datum_einde_in,
            datum_einde_isnull=datum_einde_isnull,
            datum_einde_lt=datum_einde_lt,
            datum_einde_lte=datum_einde_lte,
            datum_einde_not=datum_einde_not,
            datum_ontstaan=datum_ontstaan,
            datum_ontstaan_gt=datum_ontstaan_gt,
            datum_ontstaan_gte=datum_ontstaan_gte,
            datum_ontstaan_in=datum_ontstaan_in,
            datum_ontstaan_isnull=datum_ontstaan_isnull,
            datum_ontstaan_lt=datum_ontstaan_lt,
            datum_ontstaan_lte=datum_ontstaan_lte,
            datum_ontstaan_not=datum_ontstaan_not,
            datum_opvoer=datum_opvoer,
            datum_opvoer_gt=datum_opvoer_gt,
            datum_opvoer_gte=datum_opvoer_gte,
            datum_opvoer_in=datum_opvoer_in,
            datum_opvoer_isnull=datum_opvoer_isnull,
            datum_opvoer_lt=datum_opvoer_lt,
            datum_opvoer_lte=datum_opvoer_lte,
            datum_opvoer_not=datum_opvoer_not,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            opmerking=opmerking,
            opmerking_in=opmerking_in,
            opmerking_isempty=opmerking_isempty,
            opmerking_isnull=opmerking_isnull,
            opmerking_like=opmerking_like,
            opmerking_not=opmerking_not,
            status=status,
            status_gt=status_gt,
            status_gte=status_gte,
            status_in=status_in,
            status_isnull=status_isnull,
            status_lt=status_lt,
            status_lte=status_lte,
            status_not=status_not,
            subcluster_indicatie=subcluster_indicatie,
            subcluster_indicatie_isnull=subcluster_indicatie_isnull,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Huishoudelijkafvalcluster",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def huishoudelijkafval_cluster_retrieve_slash_with_http_info(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bronadres: Annotated[Optional[StrictStr], Field(description="Adres van het cluster zoals die in bron geregistreerd is.")] = None,
        bronadres_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bronadres_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bronadres_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bronadres_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bronadres_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_einde: Annotated[Optional[date], Field(description="Datum wanneer het cluster geen relaties meer heeft met containers met status=1.")] = None,
        datum_einde_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_einde_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_einde_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_einde_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_einde_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_ontstaan: Annotated[Optional[date], Field(description="Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_ontstaan_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_ontstaan_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_ontstaan_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_ontstaan_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_ontstaan_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_opvoer: Annotated[Optional[datetime], Field(description="Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_opvoer_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_opvoer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_opvoer_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        opmerking: Annotated[Optional[StrictStr], Field(description="Extra aanwijzing van de locatie voor de bestuurder.")] = None,
        opmerking_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        opmerking_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        opmerking_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        opmerking_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        opmerking_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        status: Annotated[Optional[StrictInt], Field(description="Status van het cluster (0 - inactief , 1 - actief)")] = None,
        status_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        status_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        status_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        status_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        status_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        status_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        status_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        subcluster_indicatie: Annotated[Optional[StrictBool], Field(description="Indicatie of het een cluster betreft dat is gesplitst door een weg")] = None,
        subcluster_indicatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is bij de bronhouder")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Huishoudelijkafvalcluster]:
        """huishoudelijkafval_cluster_retrieve_slash


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_hoofdadres_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_hoofdadres_verblijfsobject_identificatie: str
        :param bag_hoofdadres_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_hoofdadres_verblijfsobject_identificatie_in: List[str]
        :param bag_hoofdadres_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isempty: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isnull: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_hoofdadres_verblijfsobject_identificatie_like: str
        :param bag_hoofdadres_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_hoofdadres_verblijfsobject_identificatie_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bronadres: Adres van het cluster zoals die in bron geregistreerd is.
        :type bronadres: str
        :param bronadres_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bronadres_in: List[str]
        :param bronadres_isempty: Whether the field is empty or not.
        :type bronadres_isempty: bool
        :param bronadres_isnull: Whether the field has a NULL value or not.
        :type bronadres_isnull: bool
        :param bronadres_like: Matches text using wildcards (? and *).
        :type bronadres_like: str
        :param bronadres_not: Exclude matches; text
        :type bronadres_not: List[str]
        :param datum_einde: Datum wanneer het cluster geen relaties meer heeft met containers met status=1.
        :type datum_einde: date
        :param datum_einde_gt: Greater than; use yyyy-mm-dd
        :type datum_einde_gt: date
        :param datum_einde_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_einde_gte: date
        :param datum_einde_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_einde_in: List[date]
        :param datum_einde_isnull: Whether the field has a NULL value or not.
        :type datum_einde_isnull: bool
        :param datum_einde_lt: Less than; use yyyy-mm-dd
        :type datum_einde_lt: date
        :param datum_einde_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_einde_lte: date
        :param datum_einde_not: Exclude matches; use yyyy-mm-dd
        :type datum_einde_not: List[date]
        :param datum_ontstaan: Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_ontstaan: date
        :param datum_ontstaan_gt: Greater than; use yyyy-mm-dd
        :type datum_ontstaan_gt: date
        :param datum_ontstaan_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_gte: date
        :param datum_ontstaan_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_ontstaan_in: List[date]
        :param datum_ontstaan_isnull: Whether the field has a NULL value or not.
        :type datum_ontstaan_isnull: bool
        :param datum_ontstaan_lt: Less than; use yyyy-mm-dd
        :type datum_ontstaan_lt: date
        :param datum_ontstaan_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_lte: date
        :param datum_ontstaan_not: Exclude matches; use yyyy-mm-dd
        :type datum_ontstaan_not: List[date]
        :param datum_opvoer: Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_opvoer: datetime
        :param datum_opvoer_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gt: datetime
        :param datum_opvoer_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gte: datetime
        :param datum_opvoer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_opvoer_in: List[datetime]
        :param datum_opvoer_isnull: Whether the field has a NULL value or not.
        :type datum_opvoer_isnull: bool
        :param datum_opvoer_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lt: datetime
        :param datum_opvoer_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lte: datetime
        :param datum_opvoer_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_not: List[datetime]
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param geometrie: Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Uniek identificerend kenmerk van cluster
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param opmerking: Extra aanwijzing van de locatie voor de bestuurder.
        :type opmerking: str
        :param opmerking_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type opmerking_in: List[str]
        :param opmerking_isempty: Whether the field is empty or not.
        :type opmerking_isempty: bool
        :param opmerking_isnull: Whether the field has a NULL value or not.
        :type opmerking_isnull: bool
        :param opmerking_like: Matches text using wildcards (? and *).
        :type opmerking_like: str
        :param opmerking_not: Exclude matches; text
        :type opmerking_not: List[str]
        :param status: Status van het cluster (0 - inactief , 1 - actief)
        :type status: int
        :param status_gt: Greater than; number
        :type status_gt: int
        :param status_gte: Greater than or equal to; number
        :type status_gte: int
        :param status_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type status_in: List[int]
        :param status_isnull: Whether the field has a NULL value or not.
        :type status_isnull: bool
        :param status_lt: Less than; number
        :type status_lt: int
        :param status_lte: Less than or equal to; number
        :type status_lte: int
        :param status_not: Exclude matches; number
        :type status_not: List[int]
        :param subcluster_indicatie: Indicatie of het een cluster betreft dat is gesplitst door een weg
        :type subcluster_indicatie: bool
        :param subcluster_indicatie_isnull: Whether the field has a NULL value or not.
        :type subcluster_indicatie_isnull: bool
        :param verwijderd_dp: Indicatie of het object verwijderd is bij de bronhouder
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_cluster_retrieve_slash_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            bag_hoofdadres_verblijfsobject_identificatie=bag_hoofdadres_verblijfsobject_identificatie,
            bag_hoofdadres_verblijfsobject_identificatie_in=bag_hoofdadres_verblijfsobject_identificatie_in,
            bag_hoofdadres_verblijfsobject_identificatie_isempty=bag_hoofdadres_verblijfsobject_identificatie_isempty,
            bag_hoofdadres_verblijfsobject_identificatie_isnull=bag_hoofdadres_verblijfsobject_identificatie_isnull,
            bag_hoofdadres_verblijfsobject_identificatie_like=bag_hoofdadres_verblijfsobject_identificatie_like,
            bag_hoofdadres_verblijfsobject_identificatie_not=bag_hoofdadres_verblijfsobject_identificatie_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bronadres=bronadres,
            bronadres_in=bronadres_in,
            bronadres_isempty=bronadres_isempty,
            bronadres_isnull=bronadres_isnull,
            bronadres_like=bronadres_like,
            bronadres_not=bronadres_not,
            datum_einde=datum_einde,
            datum_einde_gt=datum_einde_gt,
            datum_einde_gte=datum_einde_gte,
            datum_einde_in=datum_einde_in,
            datum_einde_isnull=datum_einde_isnull,
            datum_einde_lt=datum_einde_lt,
            datum_einde_lte=datum_einde_lte,
            datum_einde_not=datum_einde_not,
            datum_ontstaan=datum_ontstaan,
            datum_ontstaan_gt=datum_ontstaan_gt,
            datum_ontstaan_gte=datum_ontstaan_gte,
            datum_ontstaan_in=datum_ontstaan_in,
            datum_ontstaan_isnull=datum_ontstaan_isnull,
            datum_ontstaan_lt=datum_ontstaan_lt,
            datum_ontstaan_lte=datum_ontstaan_lte,
            datum_ontstaan_not=datum_ontstaan_not,
            datum_opvoer=datum_opvoer,
            datum_opvoer_gt=datum_opvoer_gt,
            datum_opvoer_gte=datum_opvoer_gte,
            datum_opvoer_in=datum_opvoer_in,
            datum_opvoer_isnull=datum_opvoer_isnull,
            datum_opvoer_lt=datum_opvoer_lt,
            datum_opvoer_lte=datum_opvoer_lte,
            datum_opvoer_not=datum_opvoer_not,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            opmerking=opmerking,
            opmerking_in=opmerking_in,
            opmerking_isempty=opmerking_isempty,
            opmerking_isnull=opmerking_isnull,
            opmerking_like=opmerking_like,
            opmerking_not=opmerking_not,
            status=status,
            status_gt=status_gt,
            status_gte=status_gte,
            status_in=status_in,
            status_isnull=status_isnull,
            status_lt=status_lt,
            status_lte=status_lte,
            status_not=status_not,
            subcluster_indicatie=subcluster_indicatie,
            subcluster_indicatie_isnull=subcluster_indicatie_isnull,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Huishoudelijkafvalcluster",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def huishoudelijkafval_cluster_retrieve_slash_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_hoofdadres_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bronadres: Annotated[Optional[StrictStr], Field(description="Adres van het cluster zoals die in bron geregistreerd is.")] = None,
        bronadres_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bronadres_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bronadres_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bronadres_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bronadres_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_einde: Annotated[Optional[date], Field(description="Datum wanneer het cluster geen relaties meer heeft met containers met status=1.")] = None,
        datum_einde_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_einde_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_einde_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_einde_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_einde_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_einde_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_ontstaan: Annotated[Optional[date], Field(description="Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_ontstaan_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_ontstaan_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_ontstaan_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_ontstaan_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_ontstaan_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_ontstaan_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        datum_opvoer: Annotated[Optional[datetime], Field(description="Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016")] = None,
        datum_opvoer_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_opvoer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_opvoer_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_opvoer_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        opmerking: Annotated[Optional[StrictStr], Field(description="Extra aanwijzing van de locatie voor de bestuurder.")] = None,
        opmerking_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        opmerking_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        opmerking_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        opmerking_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        opmerking_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        status: Annotated[Optional[StrictInt], Field(description="Status van het cluster (0 - inactief , 1 - actief)")] = None,
        status_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        status_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        status_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        status_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        status_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        status_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        status_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        subcluster_indicatie: Annotated[Optional[StrictBool], Field(description="Indicatie of het een cluster betreft dat is gesplitst door een weg")] = None,
        subcluster_indicatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is bij de bronhouder")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """huishoudelijkafval_cluster_retrieve_slash


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_hoofdadres_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_hoofdadres_verblijfsobject_identificatie: str
        :param bag_hoofdadres_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_hoofdadres_verblijfsobject_identificatie_in: List[str]
        :param bag_hoofdadres_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isempty: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_hoofdadres_verblijfsobject_identificatie_isnull: bool
        :param bag_hoofdadres_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_hoofdadres_verblijfsobject_identificatie_like: str
        :param bag_hoofdadres_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_hoofdadres_verblijfsobject_identificatie_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bronadres: Adres van het cluster zoals die in bron geregistreerd is.
        :type bronadres: str
        :param bronadres_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bronadres_in: List[str]
        :param bronadres_isempty: Whether the field is empty or not.
        :type bronadres_isempty: bool
        :param bronadres_isnull: Whether the field has a NULL value or not.
        :type bronadres_isnull: bool
        :param bronadres_like: Matches text using wildcards (? and *).
        :type bronadres_like: str
        :param bronadres_not: Exclude matches; text
        :type bronadres_not: List[str]
        :param datum_einde: Datum wanneer het cluster geen relaties meer heeft met containers met status=1.
        :type datum_einde: date
        :param datum_einde_gt: Greater than; use yyyy-mm-dd
        :type datum_einde_gt: date
        :param datum_einde_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_einde_gte: date
        :param datum_einde_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_einde_in: List[date]
        :param datum_einde_isnull: Whether the field has a NULL value or not.
        :type datum_einde_isnull: bool
        :param datum_einde_lt: Less than; use yyyy-mm-dd
        :type datum_einde_lt: date
        :param datum_einde_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_einde_lte: date
        :param datum_einde_not: Exclude matches; use yyyy-mm-dd
        :type datum_einde_not: List[date]
        :param datum_ontstaan: Datum ontstaan van het cluster. Dit is afgeleid van de plaatsingsdatum van de oudste container ,wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_ontstaan: date
        :param datum_ontstaan_gt: Greater than; use yyyy-mm-dd
        :type datum_ontstaan_gt: date
        :param datum_ontstaan_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_gte: date
        :param datum_ontstaan_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_ontstaan_in: List[date]
        :param datum_ontstaan_isnull: Whether the field has a NULL value or not.
        :type datum_ontstaan_isnull: bool
        :param datum_ontstaan_lt: Less than; use yyyy-mm-dd
        :type datum_ontstaan_lt: date
        :param datum_ontstaan_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_ontstaan_lte: date
        :param datum_ontstaan_not: Exclude matches; use yyyy-mm-dd
        :type datum_ontstaan_not: List[date]
        :param datum_opvoer: Datum opvoer van het cluster. Dit is afgeleid van wanneer het gegeven bij het systeem bekend is of peildatum 01-01-2016
        :type datum_opvoer: datetime
        :param datum_opvoer_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gt: datetime
        :param datum_opvoer_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_gte: datetime
        :param datum_opvoer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_opvoer_in: List[datetime]
        :param datum_opvoer_isnull: Whether the field has a NULL value or not.
        :type datum_opvoer_isnull: bool
        :param datum_opvoer_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lt: datetime
        :param datum_opvoer_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_lte: datetime
        :param datum_opvoer_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_opvoer_not: List[datetime]
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param geometrie: Geometrie van het type POINT van de het zwaartepunt van het cluster in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Uniek identificerend kenmerk van cluster
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param opmerking: Extra aanwijzing van de locatie voor de bestuurder.
        :type opmerking: str
        :param opmerking_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type opmerking_in: List[str]
        :param opmerking_isempty: Whether the field is empty or not.
        :type opmerking_isempty: bool
        :param opmerking_isnull: Whether the field has a NULL value or not.
        :type opmerking_isnull: bool
        :param opmerking_like: Matches text using wildcards (? and *).
        :type opmerking_like: str
        :param opmerking_not: Exclude matches; text
        :type opmerking_not: List[str]
        :param status: Status van het cluster (0 - inactief , 1 - actief)
        :type status: int
        :param status_gt: Greater than; number
        :type status_gt: int
        :param status_gte: Greater than or equal to; number
        :type status_gte: int
        :param status_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type status_in: List[int]
        :param status_isnull: Whether the field has a NULL value or not.
        :type status_isnull: bool
        :param status_lt: Less than; number
        :type status_lt: int
        :param status_lte: Less than or equal to; number
        :type status_lte: int
        :param status_not: Exclude matches; number
        :type status_not: List[int]
        :param subcluster_indicatie: Indicatie of het een cluster betreft dat is gesplitst door een weg
        :type subcluster_indicatie: bool
        :param subcluster_indicatie_isnull: Whether the field has a NULL value or not.
        :type subcluster_indicatie_isnull: bool
        :param verwijderd_dp: Indicatie of het object verwijderd is bij de bronhouder
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_cluster_retrieve_slash_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            bag_hoofdadres_verblijfsobject_identificatie=bag_hoofdadres_verblijfsobject_identificatie,
            bag_hoofdadres_verblijfsobject_identificatie_in=bag_hoofdadres_verblijfsobject_identificatie_in,
            bag_hoofdadres_verblijfsobject_identificatie_isempty=bag_hoofdadres_verblijfsobject_identificatie_isempty,
            bag_hoofdadres_verblijfsobject_identificatie_isnull=bag_hoofdadres_verblijfsobject_identificatie_isnull,
            bag_hoofdadres_verblijfsobject_identificatie_like=bag_hoofdadres_verblijfsobject_identificatie_like,
            bag_hoofdadres_verblijfsobject_identificatie_not=bag_hoofdadres_verblijfsobject_identificatie_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bronadres=bronadres,
            bronadres_in=bronadres_in,
            bronadres_isempty=bronadres_isempty,
            bronadres_isnull=bronadres_isnull,
            bronadres_like=bronadres_like,
            bronadres_not=bronadres_not,
            datum_einde=datum_einde,
            datum_einde_gt=datum_einde_gt,
            datum_einde_gte=datum_einde_gte,
            datum_einde_in=datum_einde_in,
            datum_einde_isnull=datum_einde_isnull,
            datum_einde_lt=datum_einde_lt,
            datum_einde_lte=datum_einde_lte,
            datum_einde_not=datum_einde_not,
            datum_ontstaan=datum_ontstaan,
            datum_ontstaan_gt=datum_ontstaan_gt,
            datum_ontstaan_gte=datum_ontstaan_gte,
            datum_ontstaan_in=datum_ontstaan_in,
            datum_ontstaan_isnull=datum_ontstaan_isnull,
            datum_ontstaan_lt=datum_ontstaan_lt,
            datum_ontstaan_lte=datum_ontstaan_lte,
            datum_ontstaan_not=datum_ontstaan_not,
            datum_opvoer=datum_opvoer,
            datum_opvoer_gt=datum_opvoer_gt,
            datum_opvoer_gte=datum_opvoer_gte,
            datum_opvoer_in=datum_opvoer_in,
            datum_opvoer_isnull=datum_opvoer_isnull,
            datum_opvoer_lt=datum_opvoer_lt,
            datum_opvoer_lte=datum_opvoer_lte,
            datum_opvoer_not=datum_opvoer_not,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            opmerking=opmerking,
            opmerking_in=opmerking_in,
            opmerking_isempty=opmerking_isempty,
            opmerking_isnull=opmerking_isnull,
            opmerking_like=opmerking_like,
            opmerking_not=opmerking_not,
            status=status,
            status_gt=status_gt,
            status_gte=status_gte,
            status_in=status_in,
            status_isnull=status_isnull,
            status_lt=status_lt,
            status_lte=status_lte,
            status_not=status_not,
            subcluster_indicatie=subcluster_indicatie,
            subcluster_indicatie_isnull=subcluster_indicatie_isnull,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Huishoudelijkafvalcluster",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _huishoudelijkafval_cluster_retrieve_slash_serialize(
        self,
        id,
        accept_crs,
        content_crs,
        x_api_key,
        csv_header,
        csv_separator,
        expand,
        expand_scope,
        fields,
        format,
        sort,
        bag_hoofdadres_verblijfsobject_identificatie,
        bag_hoofdadres_verblijfsobject_identificatie_in,
        bag_hoofdadres_verblijfsobject_identificatie_isempty,
        bag_hoofdadres_verblijfsobject_identificatie_isnull,
        bag_hoofdadres_verblijfsobject_identificatie_like,
        bag_hoofdadres_verblijfsobject_identificatie_not,
        bag_nummeraanduiding_identificatie,
        bag_nummeraanduiding_identificatie_in,
        bag_nummeraanduiding_identificatie_isempty,
        bag_nummeraanduiding_identificatie_isnull,
        bag_nummeraanduiding_identificatie_like,
        bag_nummeraanduiding_identificatie_not,
        bag_openbareruimte_identificatie,
        bag_openbareruimte_identificatie_in,
        bag_openbareruimte_identificatie_isempty,
        bag_openbareruimte_identificatie_isnull,
        bag_openbareruimte_identificatie_like,
        bag_openbareruimte_identificatie_not,
        bronadres,
        bronadres_in,
        bronadres_isempty,
        bronadres_isnull,
        bronadres_like,
        bronadres_not,
        datum_einde,
        datum_einde_gt,
        datum_einde_gte,
        datum_einde_in,
        datum_einde_isnull,
        datum_einde_lt,
        datum_einde_lte,
        datum_einde_not,
        datum_ontstaan,
        datum_ontstaan_gt,
        datum_ontstaan_gte,
        datum_ontstaan_in,
        datum_ontstaan_isnull,
        datum_ontstaan_lt,
        datum_ontstaan_lte,
        datum_ontstaan_not,
        datum_opvoer,
        datum_opvoer_gt,
        datum_opvoer_gte,
        datum_opvoer_in,
        datum_opvoer_isnull,
        datum_opvoer_lt,
        datum_opvoer_lte,
        datum_opvoer_not,
        gbd_buurt_identificatie,
        gbd_buurt_identificatie_in,
        gbd_buurt_identificatie_isempty,
        gbd_buurt_identificatie_isnull,
        gbd_buurt_identificatie_like,
        gbd_buurt_identificatie_not,
        geometrie,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        id2,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        opmerking,
        opmerking_in,
        opmerking_isempty,
        opmerking_isnull,
        opmerking_like,
        opmerking_not,
        status,
        status_gt,
        status_gte,
        status_in,
        status_isnull,
        status_lt,
        status_lte,
        status_not,
        subcluster_indicatie,
        subcluster_indicatie_isnull,
        verwijderd_dp,
        verwijderd_dp_isnull,
        wijzigingsdatum_dp,
        wijzigingsdatum_dp_gt,
        wijzigingsdatum_dp_gte,
        wijzigingsdatum_dp_in,
        wijzigingsdatum_dp_isnull,
        wijzigingsdatum_dp_lt,
        wijzigingsdatum_dp_lte,
        wijzigingsdatum_dp_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'bagHoofdadresVerblijfsobject.identificatie[in]': 'csv',
            'bagHoofdadresVerblijfsobject.identificatie[not]': 'multi',
            'bagNummeraanduiding.identificatie[in]': 'csv',
            'bagNummeraanduiding.identificatie[not]': 'multi',
            'bagOpenbareruimte.identificatie[in]': 'csv',
            'bagOpenbareruimte.identificatie[not]': 'multi',
            'bronadres[in]': 'csv',
            'bronadres[not]': 'multi',
            'datumEinde[in]': 'csv',
            'datumEinde[not]': 'multi',
            'datumOntstaan[in]': 'csv',
            'datumOntstaan[not]': 'multi',
            'datumOpvoer[in]': 'csv',
            'datumOpvoer[not]': 'multi',
            'gbdBuurt.identificatie[in]': 'csv',
            'gbdBuurt.identificatie[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'opmerking[in]': 'csv',
            'opmerking[not]': 'multi',
            'status[in]': 'csv',
            'status[not]': 'multi',
            'wijzigingsdatumDp[in]': 'csv',
            'wijzigingsdatumDp[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if csv_header is not None:
            
            _query_params.append(('_csv_header', csv_header))
            
        if csv_separator is not None:
            
            _query_params.append(('_csv_separator', csv_separator))
            
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if bag_hoofdadres_verblijfsobject_identificatie is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie', bag_hoofdadres_verblijfsobject_identificatie))
            
        if bag_hoofdadres_verblijfsobject_identificatie_in is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[in]', bag_hoofdadres_verblijfsobject_identificatie_in))
            
        if bag_hoofdadres_verblijfsobject_identificatie_isempty is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[isempty]', bag_hoofdadres_verblijfsobject_identificatie_isempty))
            
        if bag_hoofdadres_verblijfsobject_identificatie_isnull is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[isnull]', bag_hoofdadres_verblijfsobject_identificatie_isnull))
            
        if bag_hoofdadres_verblijfsobject_identificatie_like is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[like]', bag_hoofdadres_verblijfsobject_identificatie_like))
            
        if bag_hoofdadres_verblijfsobject_identificatie_not is not None:
            
            _query_params.append(('bagHoofdadresVerblijfsobject.identificatie[not]', bag_hoofdadres_verblijfsobject_identificatie_not))
            
        if bag_nummeraanduiding_identificatie is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie', bag_nummeraanduiding_identificatie))
            
        if bag_nummeraanduiding_identificatie_in is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[in]', bag_nummeraanduiding_identificatie_in))
            
        if bag_nummeraanduiding_identificatie_isempty is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isempty]', bag_nummeraanduiding_identificatie_isempty))
            
        if bag_nummeraanduiding_identificatie_isnull is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isnull]', bag_nummeraanduiding_identificatie_isnull))
            
        if bag_nummeraanduiding_identificatie_like is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[like]', bag_nummeraanduiding_identificatie_like))
            
        if bag_nummeraanduiding_identificatie_not is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[not]', bag_nummeraanduiding_identificatie_not))
            
        if bag_openbareruimte_identificatie is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie', bag_openbareruimte_identificatie))
            
        if bag_openbareruimte_identificatie_in is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[in]', bag_openbareruimte_identificatie_in))
            
        if bag_openbareruimte_identificatie_isempty is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isempty]', bag_openbareruimte_identificatie_isempty))
            
        if bag_openbareruimte_identificatie_isnull is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isnull]', bag_openbareruimte_identificatie_isnull))
            
        if bag_openbareruimte_identificatie_like is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[like]', bag_openbareruimte_identificatie_like))
            
        if bag_openbareruimte_identificatie_not is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[not]', bag_openbareruimte_identificatie_not))
            
        if bronadres is not None:
            
            _query_params.append(('bronadres', bronadres))
            
        if bronadres_in is not None:
            
            _query_params.append(('bronadres[in]', bronadres_in))
            
        if bronadres_isempty is not None:
            
            _query_params.append(('bronadres[isempty]', bronadres_isempty))
            
        if bronadres_isnull is not None:
            
            _query_params.append(('bronadres[isnull]', bronadres_isnull))
            
        if bronadres_like is not None:
            
            _query_params.append(('bronadres[like]', bronadres_like))
            
        if bronadres_not is not None:
            
            _query_params.append(('bronadres[not]', bronadres_not))
            
        if datum_einde is not None:
            if isinstance(datum_einde, date):
                _query_params.append(
                    (
                        'datumEinde',
                        datum_einde.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde', datum_einde))
            
        if datum_einde_gt is not None:
            if isinstance(datum_einde_gt, date):
                _query_params.append(
                    (
                        'datumEinde[gt]',
                        datum_einde_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[gt]', datum_einde_gt))
            
        if datum_einde_gte is not None:
            if isinstance(datum_einde_gte, date):
                _query_params.append(
                    (
                        'datumEinde[gte]',
                        datum_einde_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[gte]', datum_einde_gte))
            
        if datum_einde_in is not None:
            
            _query_params.append(('datumEinde[in]', datum_einde_in))
            
        if datum_einde_isnull is not None:
            
            _query_params.append(('datumEinde[isnull]', datum_einde_isnull))
            
        if datum_einde_lt is not None:
            if isinstance(datum_einde_lt, date):
                _query_params.append(
                    (
                        'datumEinde[lt]',
                        datum_einde_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[lt]', datum_einde_lt))
            
        if datum_einde_lte is not None:
            if isinstance(datum_einde_lte, date):
                _query_params.append(
                    (
                        'datumEinde[lte]',
                        datum_einde_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumEinde[lte]', datum_einde_lte))
            
        if datum_einde_not is not None:
            
            _query_params.append(('datumEinde[not]', datum_einde_not))
            
        if datum_ontstaan is not None:
            if isinstance(datum_ontstaan, date):
                _query_params.append(
                    (
                        'datumOntstaan',
                        datum_ontstaan.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan', datum_ontstaan))
            
        if datum_ontstaan_gt is not None:
            if isinstance(datum_ontstaan_gt, date):
                _query_params.append(
                    (
                        'datumOntstaan[gt]',
                        datum_ontstaan_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[gt]', datum_ontstaan_gt))
            
        if datum_ontstaan_gte is not None:
            if isinstance(datum_ontstaan_gte, date):
                _query_params.append(
                    (
                        'datumOntstaan[gte]',
                        datum_ontstaan_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[gte]', datum_ontstaan_gte))
            
        if datum_ontstaan_in is not None:
            
            _query_params.append(('datumOntstaan[in]', datum_ontstaan_in))
            
        if datum_ontstaan_isnull is not None:
            
            _query_params.append(('datumOntstaan[isnull]', datum_ontstaan_isnull))
            
        if datum_ontstaan_lt is not None:
            if isinstance(datum_ontstaan_lt, date):
                _query_params.append(
                    (
                        'datumOntstaan[lt]',
                        datum_ontstaan_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[lt]', datum_ontstaan_lt))
            
        if datum_ontstaan_lte is not None:
            if isinstance(datum_ontstaan_lte, date):
                _query_params.append(
                    (
                        'datumOntstaan[lte]',
                        datum_ontstaan_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOntstaan[lte]', datum_ontstaan_lte))
            
        if datum_ontstaan_not is not None:
            
            _query_params.append(('datumOntstaan[not]', datum_ontstaan_not))
            
        if datum_opvoer is not None:
            if isinstance(datum_opvoer, datetime):
                _query_params.append(
                    (
                        'datumOpvoer',
                        datum_opvoer.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer', datum_opvoer))
            
        if datum_opvoer_gt is not None:
            if isinstance(datum_opvoer_gt, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[gt]',
                        datum_opvoer_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[gt]', datum_opvoer_gt))
            
        if datum_opvoer_gte is not None:
            if isinstance(datum_opvoer_gte, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[gte]',
                        datum_opvoer_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[gte]', datum_opvoer_gte))
            
        if datum_opvoer_in is not None:
            
            _query_params.append(('datumOpvoer[in]', datum_opvoer_in))
            
        if datum_opvoer_isnull is not None:
            
            _query_params.append(('datumOpvoer[isnull]', datum_opvoer_isnull))
            
        if datum_opvoer_lt is not None:
            if isinstance(datum_opvoer_lt, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[lt]',
                        datum_opvoer_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[lt]', datum_opvoer_lt))
            
        if datum_opvoer_lte is not None:
            if isinstance(datum_opvoer_lte, datetime):
                _query_params.append(
                    (
                        'datumOpvoer[lte]',
                        datum_opvoer_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumOpvoer[lte]', datum_opvoer_lte))
            
        if datum_opvoer_not is not None:
            
            _query_params.append(('datumOpvoer[not]', datum_opvoer_not))
            
        if gbd_buurt_identificatie is not None:
            
            _query_params.append(('gbdBuurt.identificatie', gbd_buurt_identificatie))
            
        if gbd_buurt_identificatie_in is not None:
            
            _query_params.append(('gbdBuurt.identificatie[in]', gbd_buurt_identificatie_in))
            
        if gbd_buurt_identificatie_isempty is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isempty]', gbd_buurt_identificatie_isempty))
            
        if gbd_buurt_identificatie_isnull is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isnull]', gbd_buurt_identificatie_isnull))
            
        if gbd_buurt_identificatie_like is not None:
            
            _query_params.append(('gbdBuurt.identificatie[like]', gbd_buurt_identificatie_like))
            
        if gbd_buurt_identificatie_not is not None:
            
            _query_params.append(('gbdBuurt.identificatie[not]', gbd_buurt_identificatie_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if id2 is not None:
            
            _query_params.append(('id', id2))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if opmerking is not None:
            
            _query_params.append(('opmerking', opmerking))
            
        if opmerking_in is not None:
            
            _query_params.append(('opmerking[in]', opmerking_in))
            
        if opmerking_isempty is not None:
            
            _query_params.append(('opmerking[isempty]', opmerking_isempty))
            
        if opmerking_isnull is not None:
            
            _query_params.append(('opmerking[isnull]', opmerking_isnull))
            
        if opmerking_like is not None:
            
            _query_params.append(('opmerking[like]', opmerking_like))
            
        if opmerking_not is not None:
            
            _query_params.append(('opmerking[not]', opmerking_not))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if status_gt is not None:
            
            _query_params.append(('status[gt]', status_gt))
            
        if status_gte is not None:
            
            _query_params.append(('status[gte]', status_gte))
            
        if status_in is not None:
            
            _query_params.append(('status[in]', status_in))
            
        if status_isnull is not None:
            
            _query_params.append(('status[isnull]', status_isnull))
            
        if status_lt is not None:
            
            _query_params.append(('status[lt]', status_lt))
            
        if status_lte is not None:
            
            _query_params.append(('status[lte]', status_lte))
            
        if status_not is not None:
            
            _query_params.append(('status[not]', status_not))
            
        if subcluster_indicatie is not None:
            
            _query_params.append(('subclusterIndicatie', subcluster_indicatie))
            
        if subcluster_indicatie_isnull is not None:
            
            _query_params.append(('subclusterIndicatie[isnull]', subcluster_indicatie_isnull))
            
        if verwijderd_dp is not None:
            
            _query_params.append(('verwijderdDp', verwijderd_dp))
            
        if verwijderd_dp_isnull is not None:
            
            _query_params.append(('verwijderdDp[isnull]', verwijderd_dp_isnull))
            
        if wijzigingsdatum_dp is not None:
            if isinstance(wijzigingsdatum_dp, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp',
                        wijzigingsdatum_dp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp', wijzigingsdatum_dp))
            
        if wijzigingsdatum_dp_gt is not None:
            if isinstance(wijzigingsdatum_dp_gt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gt]',
                        wijzigingsdatum_dp_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gt]', wijzigingsdatum_dp_gt))
            
        if wijzigingsdatum_dp_gte is not None:
            if isinstance(wijzigingsdatum_dp_gte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gte]',
                        wijzigingsdatum_dp_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gte]', wijzigingsdatum_dp_gte))
            
        if wijzigingsdatum_dp_in is not None:
            
            _query_params.append(('wijzigingsdatumDp[in]', wijzigingsdatum_dp_in))
            
        if wijzigingsdatum_dp_isnull is not None:
            
            _query_params.append(('wijzigingsdatumDp[isnull]', wijzigingsdatum_dp_isnull))
            
        if wijzigingsdatum_dp_lt is not None:
            if isinstance(wijzigingsdatum_dp_lt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lt]',
                        wijzigingsdatum_dp_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lt]', wijzigingsdatum_dp_lt))
            
        if wijzigingsdatum_dp_lte is not None:
            if isinstance(wijzigingsdatum_dp_lte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lte]',
                        wijzigingsdatum_dp_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lte]', wijzigingsdatum_dp_lte))
            
        if wijzigingsdatum_dp_not is not None:
            
            _query_params.append(('wijzigingsdatumDp[not]', wijzigingsdatum_dp_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/cluster/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


