# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvalbag_object_loopafstand_v2 import HuishoudelijkafvalbagObjectLoopafstandV2
from huishoudelijkafval_api_client.models.paginated_huishoudelijkafvalbag_object_loopafstand_v2_list import PaginatedHuishoudelijkafvalbagObjectLoopafstandV2List

from huishoudelijkafval_api_client.api_client import ApiClient, RequestSerialized
from huishoudelijkafval_api_client.api_response import ApiResponse
from huishoudelijkafval_api_client.rest import RESTResponseType


class BagObjectLoopafstandV2Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def huishoudelijkafval_bag_object_loopafstand_v2_list2(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_object_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van bagobject")] = None,
        bag_object_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_object_type: Annotated[Optional[StrictStr], Field(description="Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats")] = None,
        bag_object_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie: Annotated[Optional[StrictStr], Field(description="Code afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving: Annotated[Optional[StrictStr], Field(description="Omschrijving afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_omschrijving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_omschrijving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_omschrijving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_omschrijving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type MULTIPOLYGON in RD (epsg:28992))")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van het record")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie")] = None,
        loopafstand_categorie_id: Annotated[Optional[StrictStr], Field(description="identificatie categorie loopafstand")] = None,
        loopafstand_categorie_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_categorie_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        loopafstand_categorie_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_categorie_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        loopafstand_categorie_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand_gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than; number")] = None,
        loopafstand_gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than or equal to; number")] = None,
        loopafstand_in: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than; number")] = None,
        loopafstand_lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than or equal to; number")] = None,
        loopafstand_not: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Exclude matches; number")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is in de datapijplijn")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedHuishoudelijkafvalbagObjectLoopafstandV2List:
        """huishoudelijkafval_bag_object_loopafstand_v2_list2


        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_object_id: Uniek identificerend kenmerk van bagobject
        :type bag_object_id: str
        :param bag_object_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_id_in: List[str]
        :param bag_object_id_isempty: Whether the field is empty or not.
        :type bag_object_id_isempty: bool
        :param bag_object_id_isnull: Whether the field has a NULL value or not.
        :type bag_object_id_isnull: bool
        :param bag_object_id_like: Matches text using wildcards (? and *).
        :type bag_object_id_like: str
        :param bag_object_id_not: Exclude matches; text
        :type bag_object_id_not: List[str]
        :param bag_object_type: Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats
        :type bag_object_type: str
        :param bag_object_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_type_in: List[str]
        :param bag_object_type_isempty: Whether the field is empty or not.
        :type bag_object_type_isempty: bool
        :param bag_object_type_isnull: Whether the field has a NULL value or not.
        :type bag_object_type_isnull: bool
        :param bag_object_type_like: Matches text using wildcards (? and *).
        :type bag_object_type_like: str
        :param bag_object_type_not: Exclude matches; text
        :type bag_object_type_not: List[str]
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param fractie: Code afvalfractie waarnaar de afstand is bepaald
        :type fractie: str
        :param fractie_omschrijving: Omschrijving afvalfractie waarnaar de afstand is bepaald
        :type fractie_omschrijving: str
        :param fractie_omschrijving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_omschrijving_in: List[str]
        :param fractie_omschrijving_isempty: Whether the field is empty or not.
        :type fractie_omschrijving_isempty: bool
        :param fractie_omschrijving_isnull: Whether the field has a NULL value or not.
        :type fractie_omschrijving_isnull: bool
        :param fractie_omschrijving_like: Matches text using wildcards (? and *).
        :type fractie_omschrijving_like: str
        :param fractie_omschrijving_not: Exclude matches; text
        :type fractie_omschrijving_not: List[str]
        :param fractie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_in: List[str]
        :param fractie_isempty: Whether the field is empty or not.
        :type fractie_isempty: bool
        :param fractie_isnull: Whether the field has a NULL value or not.
        :type fractie_isnull: bool
        :param fractie_like: Matches text using wildcards (? and *).
        :type fractie_like: str
        :param fractie_not: Exclude matches; text
        :type fractie_not: List[str]
        :param geometrie: Geometrie van het type MULTIPOLYGON in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Uniek identificerend kenmerk van het record
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param loopafstand: Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie
        :type loopafstand: float
        :param loopafstand_categorie_id: identificatie categorie loopafstand
        :type loopafstand_categorie_id: str
        :param loopafstand_categorie_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_categorie_id_in: List[str]
        :param loopafstand_categorie_id_isempty: Whether the field is empty or not.
        :type loopafstand_categorie_id_isempty: bool
        :param loopafstand_categorie_id_isnull: Whether the field has a NULL value or not.
        :type loopafstand_categorie_id_isnull: bool
        :param loopafstand_categorie_id_like: Matches text using wildcards (? and *).
        :type loopafstand_categorie_id_like: str
        :param loopafstand_categorie_id_not: Exclude matches; text
        :type loopafstand_categorie_id_not: List[str]
        :param loopafstand_gt: Greater than; number
        :type loopafstand_gt: float
        :param loopafstand_gte: Greater than or equal to; number
        :type loopafstand_gte: float
        :param loopafstand_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_in: List[float]
        :param loopafstand_isnull: Whether the field has a NULL value or not.
        :type loopafstand_isnull: bool
        :param loopafstand_lt: Less than; number
        :type loopafstand_lt: float
        :param loopafstand_lte: Less than or equal to; number
        :type loopafstand_lte: float
        :param loopafstand_not: Exclude matches; number
        :type loopafstand_not: List[float]
        :param page: A page number within the paginated result set.
        :type page: int
        :param verwijderd_dp: Indicatie of het object verwijderd is in de datapijplijn
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bag_object_loopafstand_v2_list2_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            bag_object_id=bag_object_id,
            bag_object_id_in=bag_object_id_in,
            bag_object_id_isempty=bag_object_id_isempty,
            bag_object_id_isnull=bag_object_id_isnull,
            bag_object_id_like=bag_object_id_like,
            bag_object_id_not=bag_object_id_not,
            bag_object_type=bag_object_type,
            bag_object_type_in=bag_object_type_in,
            bag_object_type_isempty=bag_object_type_isempty,
            bag_object_type_isnull=bag_object_type_isnull,
            bag_object_type_like=bag_object_type_like,
            bag_object_type_not=bag_object_type_not,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            fractie=fractie,
            fractie_omschrijving=fractie_omschrijving,
            fractie_omschrijving_in=fractie_omschrijving_in,
            fractie_omschrijving_isempty=fractie_omschrijving_isempty,
            fractie_omschrijving_isnull=fractie_omschrijving_isnull,
            fractie_omschrijving_like=fractie_omschrijving_like,
            fractie_omschrijving_not=fractie_omschrijving_not,
            fractie_in=fractie_in,
            fractie_isempty=fractie_isempty,
            fractie_isnull=fractie_isnull,
            fractie_like=fractie_like,
            fractie_not=fractie_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            loopafstand=loopafstand,
            loopafstand_categorie_id=loopafstand_categorie_id,
            loopafstand_categorie_id_in=loopafstand_categorie_id_in,
            loopafstand_categorie_id_isempty=loopafstand_categorie_id_isempty,
            loopafstand_categorie_id_isnull=loopafstand_categorie_id_isnull,
            loopafstand_categorie_id_like=loopafstand_categorie_id_like,
            loopafstand_categorie_id_not=loopafstand_categorie_id_not,
            loopafstand_gt=loopafstand_gt,
            loopafstand_gte=loopafstand_gte,
            loopafstand_in=loopafstand_in,
            loopafstand_isnull=loopafstand_isnull,
            loopafstand_lt=loopafstand_lt,
            loopafstand_lte=loopafstand_lte,
            loopafstand_not=loopafstand_not,
            page=page,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalbagObjectLoopafstandV2List",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def huishoudelijkafval_bag_object_loopafstand_v2_list2_with_http_info(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_object_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van bagobject")] = None,
        bag_object_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_object_type: Annotated[Optional[StrictStr], Field(description="Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats")] = None,
        bag_object_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie: Annotated[Optional[StrictStr], Field(description="Code afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving: Annotated[Optional[StrictStr], Field(description="Omschrijving afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_omschrijving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_omschrijving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_omschrijving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_omschrijving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type MULTIPOLYGON in RD (epsg:28992))")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van het record")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie")] = None,
        loopafstand_categorie_id: Annotated[Optional[StrictStr], Field(description="identificatie categorie loopafstand")] = None,
        loopafstand_categorie_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_categorie_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        loopafstand_categorie_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_categorie_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        loopafstand_categorie_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand_gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than; number")] = None,
        loopafstand_gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than or equal to; number")] = None,
        loopafstand_in: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than; number")] = None,
        loopafstand_lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than or equal to; number")] = None,
        loopafstand_not: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Exclude matches; number")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is in de datapijplijn")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedHuishoudelijkafvalbagObjectLoopafstandV2List]:
        """huishoudelijkafval_bag_object_loopafstand_v2_list2


        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_object_id: Uniek identificerend kenmerk van bagobject
        :type bag_object_id: str
        :param bag_object_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_id_in: List[str]
        :param bag_object_id_isempty: Whether the field is empty or not.
        :type bag_object_id_isempty: bool
        :param bag_object_id_isnull: Whether the field has a NULL value or not.
        :type bag_object_id_isnull: bool
        :param bag_object_id_like: Matches text using wildcards (? and *).
        :type bag_object_id_like: str
        :param bag_object_id_not: Exclude matches; text
        :type bag_object_id_not: List[str]
        :param bag_object_type: Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats
        :type bag_object_type: str
        :param bag_object_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_type_in: List[str]
        :param bag_object_type_isempty: Whether the field is empty or not.
        :type bag_object_type_isempty: bool
        :param bag_object_type_isnull: Whether the field has a NULL value or not.
        :type bag_object_type_isnull: bool
        :param bag_object_type_like: Matches text using wildcards (? and *).
        :type bag_object_type_like: str
        :param bag_object_type_not: Exclude matches; text
        :type bag_object_type_not: List[str]
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param fractie: Code afvalfractie waarnaar de afstand is bepaald
        :type fractie: str
        :param fractie_omschrijving: Omschrijving afvalfractie waarnaar de afstand is bepaald
        :type fractie_omschrijving: str
        :param fractie_omschrijving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_omschrijving_in: List[str]
        :param fractie_omschrijving_isempty: Whether the field is empty or not.
        :type fractie_omschrijving_isempty: bool
        :param fractie_omschrijving_isnull: Whether the field has a NULL value or not.
        :type fractie_omschrijving_isnull: bool
        :param fractie_omschrijving_like: Matches text using wildcards (? and *).
        :type fractie_omschrijving_like: str
        :param fractie_omschrijving_not: Exclude matches; text
        :type fractie_omschrijving_not: List[str]
        :param fractie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_in: List[str]
        :param fractie_isempty: Whether the field is empty or not.
        :type fractie_isempty: bool
        :param fractie_isnull: Whether the field has a NULL value or not.
        :type fractie_isnull: bool
        :param fractie_like: Matches text using wildcards (? and *).
        :type fractie_like: str
        :param fractie_not: Exclude matches; text
        :type fractie_not: List[str]
        :param geometrie: Geometrie van het type MULTIPOLYGON in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Uniek identificerend kenmerk van het record
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param loopafstand: Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie
        :type loopafstand: float
        :param loopafstand_categorie_id: identificatie categorie loopafstand
        :type loopafstand_categorie_id: str
        :param loopafstand_categorie_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_categorie_id_in: List[str]
        :param loopafstand_categorie_id_isempty: Whether the field is empty or not.
        :type loopafstand_categorie_id_isempty: bool
        :param loopafstand_categorie_id_isnull: Whether the field has a NULL value or not.
        :type loopafstand_categorie_id_isnull: bool
        :param loopafstand_categorie_id_like: Matches text using wildcards (? and *).
        :type loopafstand_categorie_id_like: str
        :param loopafstand_categorie_id_not: Exclude matches; text
        :type loopafstand_categorie_id_not: List[str]
        :param loopafstand_gt: Greater than; number
        :type loopafstand_gt: float
        :param loopafstand_gte: Greater than or equal to; number
        :type loopafstand_gte: float
        :param loopafstand_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_in: List[float]
        :param loopafstand_isnull: Whether the field has a NULL value or not.
        :type loopafstand_isnull: bool
        :param loopafstand_lt: Less than; number
        :type loopafstand_lt: float
        :param loopafstand_lte: Less than or equal to; number
        :type loopafstand_lte: float
        :param loopafstand_not: Exclude matches; number
        :type loopafstand_not: List[float]
        :param page: A page number within the paginated result set.
        :type page: int
        :param verwijderd_dp: Indicatie of het object verwijderd is in de datapijplijn
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bag_object_loopafstand_v2_list2_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            bag_object_id=bag_object_id,
            bag_object_id_in=bag_object_id_in,
            bag_object_id_isempty=bag_object_id_isempty,
            bag_object_id_isnull=bag_object_id_isnull,
            bag_object_id_like=bag_object_id_like,
            bag_object_id_not=bag_object_id_not,
            bag_object_type=bag_object_type,
            bag_object_type_in=bag_object_type_in,
            bag_object_type_isempty=bag_object_type_isempty,
            bag_object_type_isnull=bag_object_type_isnull,
            bag_object_type_like=bag_object_type_like,
            bag_object_type_not=bag_object_type_not,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            fractie=fractie,
            fractie_omschrijving=fractie_omschrijving,
            fractie_omschrijving_in=fractie_omschrijving_in,
            fractie_omschrijving_isempty=fractie_omschrijving_isempty,
            fractie_omschrijving_isnull=fractie_omschrijving_isnull,
            fractie_omschrijving_like=fractie_omschrijving_like,
            fractie_omschrijving_not=fractie_omschrijving_not,
            fractie_in=fractie_in,
            fractie_isempty=fractie_isempty,
            fractie_isnull=fractie_isnull,
            fractie_like=fractie_like,
            fractie_not=fractie_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            loopafstand=loopafstand,
            loopafstand_categorie_id=loopafstand_categorie_id,
            loopafstand_categorie_id_in=loopafstand_categorie_id_in,
            loopafstand_categorie_id_isempty=loopafstand_categorie_id_isempty,
            loopafstand_categorie_id_isnull=loopafstand_categorie_id_isnull,
            loopafstand_categorie_id_like=loopafstand_categorie_id_like,
            loopafstand_categorie_id_not=loopafstand_categorie_id_not,
            loopafstand_gt=loopafstand_gt,
            loopafstand_gte=loopafstand_gte,
            loopafstand_in=loopafstand_in,
            loopafstand_isnull=loopafstand_isnull,
            loopafstand_lt=loopafstand_lt,
            loopafstand_lte=loopafstand_lte,
            loopafstand_not=loopafstand_not,
            page=page,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalbagObjectLoopafstandV2List",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def huishoudelijkafval_bag_object_loopafstand_v2_list2_without_preload_content(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_object_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van bagobject")] = None,
        bag_object_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_object_type: Annotated[Optional[StrictStr], Field(description="Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats")] = None,
        bag_object_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie: Annotated[Optional[StrictStr], Field(description="Code afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving: Annotated[Optional[StrictStr], Field(description="Omschrijving afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_omschrijving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_omschrijving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_omschrijving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_omschrijving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type MULTIPOLYGON in RD (epsg:28992))")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van het record")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie")] = None,
        loopafstand_categorie_id: Annotated[Optional[StrictStr], Field(description="identificatie categorie loopafstand")] = None,
        loopafstand_categorie_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_categorie_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        loopafstand_categorie_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_categorie_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        loopafstand_categorie_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand_gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than; number")] = None,
        loopafstand_gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than or equal to; number")] = None,
        loopafstand_in: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than; number")] = None,
        loopafstand_lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than or equal to; number")] = None,
        loopafstand_not: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Exclude matches; number")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is in de datapijplijn")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """huishoudelijkafval_bag_object_loopafstand_v2_list2


        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_object_id: Uniek identificerend kenmerk van bagobject
        :type bag_object_id: str
        :param bag_object_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_id_in: List[str]
        :param bag_object_id_isempty: Whether the field is empty or not.
        :type bag_object_id_isempty: bool
        :param bag_object_id_isnull: Whether the field has a NULL value or not.
        :type bag_object_id_isnull: bool
        :param bag_object_id_like: Matches text using wildcards (? and *).
        :type bag_object_id_like: str
        :param bag_object_id_not: Exclude matches; text
        :type bag_object_id_not: List[str]
        :param bag_object_type: Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats
        :type bag_object_type: str
        :param bag_object_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_type_in: List[str]
        :param bag_object_type_isempty: Whether the field is empty or not.
        :type bag_object_type_isempty: bool
        :param bag_object_type_isnull: Whether the field has a NULL value or not.
        :type bag_object_type_isnull: bool
        :param bag_object_type_like: Matches text using wildcards (? and *).
        :type bag_object_type_like: str
        :param bag_object_type_not: Exclude matches; text
        :type bag_object_type_not: List[str]
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param fractie: Code afvalfractie waarnaar de afstand is bepaald
        :type fractie: str
        :param fractie_omschrijving: Omschrijving afvalfractie waarnaar de afstand is bepaald
        :type fractie_omschrijving: str
        :param fractie_omschrijving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_omschrijving_in: List[str]
        :param fractie_omschrijving_isempty: Whether the field is empty or not.
        :type fractie_omschrijving_isempty: bool
        :param fractie_omschrijving_isnull: Whether the field has a NULL value or not.
        :type fractie_omschrijving_isnull: bool
        :param fractie_omschrijving_like: Matches text using wildcards (? and *).
        :type fractie_omschrijving_like: str
        :param fractie_omschrijving_not: Exclude matches; text
        :type fractie_omschrijving_not: List[str]
        :param fractie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_in: List[str]
        :param fractie_isempty: Whether the field is empty or not.
        :type fractie_isempty: bool
        :param fractie_isnull: Whether the field has a NULL value or not.
        :type fractie_isnull: bool
        :param fractie_like: Matches text using wildcards (? and *).
        :type fractie_like: str
        :param fractie_not: Exclude matches; text
        :type fractie_not: List[str]
        :param geometrie: Geometrie van het type MULTIPOLYGON in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Uniek identificerend kenmerk van het record
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param loopafstand: Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie
        :type loopafstand: float
        :param loopafstand_categorie_id: identificatie categorie loopafstand
        :type loopafstand_categorie_id: str
        :param loopafstand_categorie_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_categorie_id_in: List[str]
        :param loopafstand_categorie_id_isempty: Whether the field is empty or not.
        :type loopafstand_categorie_id_isempty: bool
        :param loopafstand_categorie_id_isnull: Whether the field has a NULL value or not.
        :type loopafstand_categorie_id_isnull: bool
        :param loopafstand_categorie_id_like: Matches text using wildcards (? and *).
        :type loopafstand_categorie_id_like: str
        :param loopafstand_categorie_id_not: Exclude matches; text
        :type loopafstand_categorie_id_not: List[str]
        :param loopafstand_gt: Greater than; number
        :type loopafstand_gt: float
        :param loopafstand_gte: Greater than or equal to; number
        :type loopafstand_gte: float
        :param loopafstand_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_in: List[float]
        :param loopafstand_isnull: Whether the field has a NULL value or not.
        :type loopafstand_isnull: bool
        :param loopafstand_lt: Less than; number
        :type loopafstand_lt: float
        :param loopafstand_lte: Less than or equal to; number
        :type loopafstand_lte: float
        :param loopafstand_not: Exclude matches; number
        :type loopafstand_not: List[float]
        :param page: A page number within the paginated result set.
        :type page: int
        :param verwijderd_dp: Indicatie of het object verwijderd is in de datapijplijn
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bag_object_loopafstand_v2_list2_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            bag_object_id=bag_object_id,
            bag_object_id_in=bag_object_id_in,
            bag_object_id_isempty=bag_object_id_isempty,
            bag_object_id_isnull=bag_object_id_isnull,
            bag_object_id_like=bag_object_id_like,
            bag_object_id_not=bag_object_id_not,
            bag_object_type=bag_object_type,
            bag_object_type_in=bag_object_type_in,
            bag_object_type_isempty=bag_object_type_isempty,
            bag_object_type_isnull=bag_object_type_isnull,
            bag_object_type_like=bag_object_type_like,
            bag_object_type_not=bag_object_type_not,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            fractie=fractie,
            fractie_omschrijving=fractie_omschrijving,
            fractie_omschrijving_in=fractie_omschrijving_in,
            fractie_omschrijving_isempty=fractie_omschrijving_isempty,
            fractie_omschrijving_isnull=fractie_omschrijving_isnull,
            fractie_omschrijving_like=fractie_omschrijving_like,
            fractie_omschrijving_not=fractie_omschrijving_not,
            fractie_in=fractie_in,
            fractie_isempty=fractie_isempty,
            fractie_isnull=fractie_isnull,
            fractie_like=fractie_like,
            fractie_not=fractie_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            loopafstand=loopafstand,
            loopafstand_categorie_id=loopafstand_categorie_id,
            loopafstand_categorie_id_in=loopafstand_categorie_id_in,
            loopafstand_categorie_id_isempty=loopafstand_categorie_id_isempty,
            loopafstand_categorie_id_isnull=loopafstand_categorie_id_isnull,
            loopafstand_categorie_id_like=loopafstand_categorie_id_like,
            loopafstand_categorie_id_not=loopafstand_categorie_id_not,
            loopafstand_gt=loopafstand_gt,
            loopafstand_gte=loopafstand_gte,
            loopafstand_in=loopafstand_in,
            loopafstand_isnull=loopafstand_isnull,
            loopafstand_lt=loopafstand_lt,
            loopafstand_lte=loopafstand_lte,
            loopafstand_not=loopafstand_not,
            page=page,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalbagObjectLoopafstandV2List",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _huishoudelijkafval_bag_object_loopafstand_v2_list2_serialize(
        self,
        accept_crs,
        content_crs,
        x_api_key,
        count,
        expand,
        expand_scope,
        fields,
        format,
        page_size,
        sort,
        bag_object_id,
        bag_object_id_in,
        bag_object_id_isempty,
        bag_object_id_isnull,
        bag_object_id_like,
        bag_object_id_not,
        bag_object_type,
        bag_object_type_in,
        bag_object_type_isempty,
        bag_object_type_isnull,
        bag_object_type_like,
        bag_object_type_not,
        cluster_id,
        cluster_id_in,
        cluster_id_isempty,
        cluster_id_isnull,
        cluster_id_like,
        cluster_id_not,
        fractie,
        fractie_omschrijving,
        fractie_omschrijving_in,
        fractie_omschrijving_isempty,
        fractie_omschrijving_isnull,
        fractie_omschrijving_like,
        fractie_omschrijving_not,
        fractie_in,
        fractie_isempty,
        fractie_isnull,
        fractie_like,
        fractie_not,
        geometrie,
        geometrie_contains,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        id,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        loopafstand,
        loopafstand_categorie_id,
        loopafstand_categorie_id_in,
        loopafstand_categorie_id_isempty,
        loopafstand_categorie_id_isnull,
        loopafstand_categorie_id_like,
        loopafstand_categorie_id_not,
        loopafstand_gt,
        loopafstand_gte,
        loopafstand_in,
        loopafstand_isnull,
        loopafstand_lt,
        loopafstand_lte,
        loopafstand_not,
        page,
        verwijderd_dp,
        verwijderd_dp_isnull,
        wijzigingsdatum_dp,
        wijzigingsdatum_dp_gt,
        wijzigingsdatum_dp_gte,
        wijzigingsdatum_dp_in,
        wijzigingsdatum_dp_isnull,
        wijzigingsdatum_dp_lt,
        wijzigingsdatum_dp_lte,
        wijzigingsdatum_dp_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'bagObjectId[in]': 'csv',
            'bagObjectId[not]': 'multi',
            'bagObjectType[in]': 'csv',
            'bagObjectType[not]': 'multi',
            'cluster.id[in]': 'csv',
            'cluster.id[not]': 'multi',
            'fractieOmschrijving[in]': 'csv',
            'fractieOmschrijving[not]': 'multi',
            'fractie[in]': 'csv',
            'fractie[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'loopafstandCategorie.id[in]': 'csv',
            'loopafstandCategorie.id[not]': 'multi',
            'loopafstand[in]': 'csv',
            'loopafstand[not]': 'multi',
            'wijzigingsdatumDp[in]': 'csv',
            'wijzigingsdatumDp[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('_count', count))
            
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if page_size is not None:
            
            _query_params.append(('_pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if bag_object_id is not None:
            
            _query_params.append(('bagObjectId', bag_object_id))
            
        if bag_object_id_in is not None:
            
            _query_params.append(('bagObjectId[in]', bag_object_id_in))
            
        if bag_object_id_isempty is not None:
            
            _query_params.append(('bagObjectId[isempty]', bag_object_id_isempty))
            
        if bag_object_id_isnull is not None:
            
            _query_params.append(('bagObjectId[isnull]', bag_object_id_isnull))
            
        if bag_object_id_like is not None:
            
            _query_params.append(('bagObjectId[like]', bag_object_id_like))
            
        if bag_object_id_not is not None:
            
            _query_params.append(('bagObjectId[not]', bag_object_id_not))
            
        if bag_object_type is not None:
            
            _query_params.append(('bagObjectType', bag_object_type))
            
        if bag_object_type_in is not None:
            
            _query_params.append(('bagObjectType[in]', bag_object_type_in))
            
        if bag_object_type_isempty is not None:
            
            _query_params.append(('bagObjectType[isempty]', bag_object_type_isempty))
            
        if bag_object_type_isnull is not None:
            
            _query_params.append(('bagObjectType[isnull]', bag_object_type_isnull))
            
        if bag_object_type_like is not None:
            
            _query_params.append(('bagObjectType[like]', bag_object_type_like))
            
        if bag_object_type_not is not None:
            
            _query_params.append(('bagObjectType[not]', bag_object_type_not))
            
        if cluster_id is not None:
            
            _query_params.append(('cluster.id', cluster_id))
            
        if cluster_id_in is not None:
            
            _query_params.append(('cluster.id[in]', cluster_id_in))
            
        if cluster_id_isempty is not None:
            
            _query_params.append(('cluster.id[isempty]', cluster_id_isempty))
            
        if cluster_id_isnull is not None:
            
            _query_params.append(('cluster.id[isnull]', cluster_id_isnull))
            
        if cluster_id_like is not None:
            
            _query_params.append(('cluster.id[like]', cluster_id_like))
            
        if cluster_id_not is not None:
            
            _query_params.append(('cluster.id[not]', cluster_id_not))
            
        if fractie is not None:
            
            _query_params.append(('fractie', fractie))
            
        if fractie_omschrijving is not None:
            
            _query_params.append(('fractieOmschrijving', fractie_omschrijving))
            
        if fractie_omschrijving_in is not None:
            
            _query_params.append(('fractieOmschrijving[in]', fractie_omschrijving_in))
            
        if fractie_omschrijving_isempty is not None:
            
            _query_params.append(('fractieOmschrijving[isempty]', fractie_omschrijving_isempty))
            
        if fractie_omschrijving_isnull is not None:
            
            _query_params.append(('fractieOmschrijving[isnull]', fractie_omschrijving_isnull))
            
        if fractie_omschrijving_like is not None:
            
            _query_params.append(('fractieOmschrijving[like]', fractie_omschrijving_like))
            
        if fractie_omschrijving_not is not None:
            
            _query_params.append(('fractieOmschrijving[not]', fractie_omschrijving_not))
            
        if fractie_in is not None:
            
            _query_params.append(('fractie[in]', fractie_in))
            
        if fractie_isempty is not None:
            
            _query_params.append(('fractie[isempty]', fractie_isempty))
            
        if fractie_isnull is not None:
            
            _query_params.append(('fractie[isnull]', fractie_isnull))
            
        if fractie_like is not None:
            
            _query_params.append(('fractie[like]', fractie_like))
            
        if fractie_not is not None:
            
            _query_params.append(('fractie[not]', fractie_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_contains is not None:
            
            _query_params.append(('geometrie[contains]', geometrie_contains))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if loopafstand is not None:
            
            _query_params.append(('loopafstand', loopafstand))
            
        if loopafstand_categorie_id is not None:
            
            _query_params.append(('loopafstandCategorie.id', loopafstand_categorie_id))
            
        if loopafstand_categorie_id_in is not None:
            
            _query_params.append(('loopafstandCategorie.id[in]', loopafstand_categorie_id_in))
            
        if loopafstand_categorie_id_isempty is not None:
            
            _query_params.append(('loopafstandCategorie.id[isempty]', loopafstand_categorie_id_isempty))
            
        if loopafstand_categorie_id_isnull is not None:
            
            _query_params.append(('loopafstandCategorie.id[isnull]', loopafstand_categorie_id_isnull))
            
        if loopafstand_categorie_id_like is not None:
            
            _query_params.append(('loopafstandCategorie.id[like]', loopafstand_categorie_id_like))
            
        if loopafstand_categorie_id_not is not None:
            
            _query_params.append(('loopafstandCategorie.id[not]', loopafstand_categorie_id_not))
            
        if loopafstand_gt is not None:
            
            _query_params.append(('loopafstand[gt]', loopafstand_gt))
            
        if loopafstand_gte is not None:
            
            _query_params.append(('loopafstand[gte]', loopafstand_gte))
            
        if loopafstand_in is not None:
            
            _query_params.append(('loopafstand[in]', loopafstand_in))
            
        if loopafstand_isnull is not None:
            
            _query_params.append(('loopafstand[isnull]', loopafstand_isnull))
            
        if loopafstand_lt is not None:
            
            _query_params.append(('loopafstand[lt]', loopafstand_lt))
            
        if loopafstand_lte is not None:
            
            _query_params.append(('loopafstand[lte]', loopafstand_lte))
            
        if loopafstand_not is not None:
            
            _query_params.append(('loopafstand[not]', loopafstand_not))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if verwijderd_dp is not None:
            
            _query_params.append(('verwijderdDp', verwijderd_dp))
            
        if verwijderd_dp_isnull is not None:
            
            _query_params.append(('verwijderdDp[isnull]', verwijderd_dp_isnull))
            
        if wijzigingsdatum_dp is not None:
            if isinstance(wijzigingsdatum_dp, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp',
                        wijzigingsdatum_dp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp', wijzigingsdatum_dp))
            
        if wijzigingsdatum_dp_gt is not None:
            if isinstance(wijzigingsdatum_dp_gt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gt]',
                        wijzigingsdatum_dp_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gt]', wijzigingsdatum_dp_gt))
            
        if wijzigingsdatum_dp_gte is not None:
            if isinstance(wijzigingsdatum_dp_gte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gte]',
                        wijzigingsdatum_dp_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gte]', wijzigingsdatum_dp_gte))
            
        if wijzigingsdatum_dp_in is not None:
            
            _query_params.append(('wijzigingsdatumDp[in]', wijzigingsdatum_dp_in))
            
        if wijzigingsdatum_dp_isnull is not None:
            
            _query_params.append(('wijzigingsdatumDp[isnull]', wijzigingsdatum_dp_isnull))
            
        if wijzigingsdatum_dp_lt is not None:
            if isinstance(wijzigingsdatum_dp_lt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lt]',
                        wijzigingsdatum_dp_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lt]', wijzigingsdatum_dp_lt))
            
        if wijzigingsdatum_dp_lte is not None:
            if isinstance(wijzigingsdatum_dp_lte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lte]',
                        wijzigingsdatum_dp_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lte]', wijzigingsdatum_dp_lte))
            
        if wijzigingsdatum_dp_not is not None:
            
            _query_params.append(('wijzigingsdatumDp[not]', wijzigingsdatum_dp_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bag_object_loopafstand_v2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def huishoudelijkafval_bag_object_loopafstand_v2_retrieve2(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_object_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van bagobject")] = None,
        bag_object_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_object_type: Annotated[Optional[StrictStr], Field(description="Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats")] = None,
        bag_object_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie: Annotated[Optional[StrictStr], Field(description="Code afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving: Annotated[Optional[StrictStr], Field(description="Omschrijving afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_omschrijving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_omschrijving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_omschrijving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_omschrijving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type MULTIPOLYGON in RD (epsg:28992))")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van het record")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie")] = None,
        loopafstand_categorie_id: Annotated[Optional[StrictStr], Field(description="identificatie categorie loopafstand")] = None,
        loopafstand_categorie_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_categorie_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        loopafstand_categorie_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_categorie_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        loopafstand_categorie_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand_gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than; number")] = None,
        loopafstand_gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than or equal to; number")] = None,
        loopafstand_in: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than; number")] = None,
        loopafstand_lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than or equal to; number")] = None,
        loopafstand_not: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Exclude matches; number")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is in de datapijplijn")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HuishoudelijkafvalbagObjectLoopafstandV2:
        """huishoudelijkafval_bag_object_loopafstand_v2_retrieve2


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_object_id: Uniek identificerend kenmerk van bagobject
        :type bag_object_id: str
        :param bag_object_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_id_in: List[str]
        :param bag_object_id_isempty: Whether the field is empty or not.
        :type bag_object_id_isempty: bool
        :param bag_object_id_isnull: Whether the field has a NULL value or not.
        :type bag_object_id_isnull: bool
        :param bag_object_id_like: Matches text using wildcards (? and *).
        :type bag_object_id_like: str
        :param bag_object_id_not: Exclude matches; text
        :type bag_object_id_not: List[str]
        :param bag_object_type: Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats
        :type bag_object_type: str
        :param bag_object_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_type_in: List[str]
        :param bag_object_type_isempty: Whether the field is empty or not.
        :type bag_object_type_isempty: bool
        :param bag_object_type_isnull: Whether the field has a NULL value or not.
        :type bag_object_type_isnull: bool
        :param bag_object_type_like: Matches text using wildcards (? and *).
        :type bag_object_type_like: str
        :param bag_object_type_not: Exclude matches; text
        :type bag_object_type_not: List[str]
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param fractie: Code afvalfractie waarnaar de afstand is bepaald
        :type fractie: str
        :param fractie_omschrijving: Omschrijving afvalfractie waarnaar de afstand is bepaald
        :type fractie_omschrijving: str
        :param fractie_omschrijving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_omschrijving_in: List[str]
        :param fractie_omschrijving_isempty: Whether the field is empty or not.
        :type fractie_omschrijving_isempty: bool
        :param fractie_omschrijving_isnull: Whether the field has a NULL value or not.
        :type fractie_omschrijving_isnull: bool
        :param fractie_omschrijving_like: Matches text using wildcards (? and *).
        :type fractie_omschrijving_like: str
        :param fractie_omschrijving_not: Exclude matches; text
        :type fractie_omschrijving_not: List[str]
        :param fractie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_in: List[str]
        :param fractie_isempty: Whether the field is empty or not.
        :type fractie_isempty: bool
        :param fractie_isnull: Whether the field has a NULL value or not.
        :type fractie_isnull: bool
        :param fractie_like: Matches text using wildcards (? and *).
        :type fractie_like: str
        :param fractie_not: Exclude matches; text
        :type fractie_not: List[str]
        :param geometrie: Geometrie van het type MULTIPOLYGON in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Uniek identificerend kenmerk van het record
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param loopafstand: Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie
        :type loopafstand: float
        :param loopafstand_categorie_id: identificatie categorie loopafstand
        :type loopafstand_categorie_id: str
        :param loopafstand_categorie_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_categorie_id_in: List[str]
        :param loopafstand_categorie_id_isempty: Whether the field is empty or not.
        :type loopafstand_categorie_id_isempty: bool
        :param loopafstand_categorie_id_isnull: Whether the field has a NULL value or not.
        :type loopafstand_categorie_id_isnull: bool
        :param loopafstand_categorie_id_like: Matches text using wildcards (? and *).
        :type loopafstand_categorie_id_like: str
        :param loopafstand_categorie_id_not: Exclude matches; text
        :type loopafstand_categorie_id_not: List[str]
        :param loopafstand_gt: Greater than; number
        :type loopafstand_gt: float
        :param loopafstand_gte: Greater than or equal to; number
        :type loopafstand_gte: float
        :param loopafstand_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_in: List[float]
        :param loopafstand_isnull: Whether the field has a NULL value or not.
        :type loopafstand_isnull: bool
        :param loopafstand_lt: Less than; number
        :type loopafstand_lt: float
        :param loopafstand_lte: Less than or equal to; number
        :type loopafstand_lte: float
        :param loopafstand_not: Exclude matches; number
        :type loopafstand_not: List[float]
        :param verwijderd_dp: Indicatie of het object verwijderd is in de datapijplijn
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bag_object_loopafstand_v2_retrieve2_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            bag_object_id=bag_object_id,
            bag_object_id_in=bag_object_id_in,
            bag_object_id_isempty=bag_object_id_isempty,
            bag_object_id_isnull=bag_object_id_isnull,
            bag_object_id_like=bag_object_id_like,
            bag_object_id_not=bag_object_id_not,
            bag_object_type=bag_object_type,
            bag_object_type_in=bag_object_type_in,
            bag_object_type_isempty=bag_object_type_isempty,
            bag_object_type_isnull=bag_object_type_isnull,
            bag_object_type_like=bag_object_type_like,
            bag_object_type_not=bag_object_type_not,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            fractie=fractie,
            fractie_omschrijving=fractie_omschrijving,
            fractie_omschrijving_in=fractie_omschrijving_in,
            fractie_omschrijving_isempty=fractie_omschrijving_isempty,
            fractie_omschrijving_isnull=fractie_omschrijving_isnull,
            fractie_omschrijving_like=fractie_omschrijving_like,
            fractie_omschrijving_not=fractie_omschrijving_not,
            fractie_in=fractie_in,
            fractie_isempty=fractie_isempty,
            fractie_isnull=fractie_isnull,
            fractie_like=fractie_like,
            fractie_not=fractie_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            loopafstand=loopafstand,
            loopafstand_categorie_id=loopafstand_categorie_id,
            loopafstand_categorie_id_in=loopafstand_categorie_id_in,
            loopafstand_categorie_id_isempty=loopafstand_categorie_id_isempty,
            loopafstand_categorie_id_isnull=loopafstand_categorie_id_isnull,
            loopafstand_categorie_id_like=loopafstand_categorie_id_like,
            loopafstand_categorie_id_not=loopafstand_categorie_id_not,
            loopafstand_gt=loopafstand_gt,
            loopafstand_gte=loopafstand_gte,
            loopafstand_in=loopafstand_in,
            loopafstand_isnull=loopafstand_isnull,
            loopafstand_lt=loopafstand_lt,
            loopafstand_lte=loopafstand_lte,
            loopafstand_not=loopafstand_not,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HuishoudelijkafvalbagObjectLoopafstandV2",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def huishoudelijkafval_bag_object_loopafstand_v2_retrieve2_with_http_info(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_object_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van bagobject")] = None,
        bag_object_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_object_type: Annotated[Optional[StrictStr], Field(description="Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats")] = None,
        bag_object_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie: Annotated[Optional[StrictStr], Field(description="Code afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving: Annotated[Optional[StrictStr], Field(description="Omschrijving afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_omschrijving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_omschrijving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_omschrijving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_omschrijving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type MULTIPOLYGON in RD (epsg:28992))")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van het record")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie")] = None,
        loopafstand_categorie_id: Annotated[Optional[StrictStr], Field(description="identificatie categorie loopafstand")] = None,
        loopafstand_categorie_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_categorie_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        loopafstand_categorie_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_categorie_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        loopafstand_categorie_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand_gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than; number")] = None,
        loopafstand_gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than or equal to; number")] = None,
        loopafstand_in: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than; number")] = None,
        loopafstand_lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than or equal to; number")] = None,
        loopafstand_not: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Exclude matches; number")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is in de datapijplijn")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HuishoudelijkafvalbagObjectLoopafstandV2]:
        """huishoudelijkafval_bag_object_loopafstand_v2_retrieve2


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_object_id: Uniek identificerend kenmerk van bagobject
        :type bag_object_id: str
        :param bag_object_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_id_in: List[str]
        :param bag_object_id_isempty: Whether the field is empty or not.
        :type bag_object_id_isempty: bool
        :param bag_object_id_isnull: Whether the field has a NULL value or not.
        :type bag_object_id_isnull: bool
        :param bag_object_id_like: Matches text using wildcards (? and *).
        :type bag_object_id_like: str
        :param bag_object_id_not: Exclude matches; text
        :type bag_object_id_not: List[str]
        :param bag_object_type: Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats
        :type bag_object_type: str
        :param bag_object_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_type_in: List[str]
        :param bag_object_type_isempty: Whether the field is empty or not.
        :type bag_object_type_isempty: bool
        :param bag_object_type_isnull: Whether the field has a NULL value or not.
        :type bag_object_type_isnull: bool
        :param bag_object_type_like: Matches text using wildcards (? and *).
        :type bag_object_type_like: str
        :param bag_object_type_not: Exclude matches; text
        :type bag_object_type_not: List[str]
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param fractie: Code afvalfractie waarnaar de afstand is bepaald
        :type fractie: str
        :param fractie_omschrijving: Omschrijving afvalfractie waarnaar de afstand is bepaald
        :type fractie_omschrijving: str
        :param fractie_omschrijving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_omschrijving_in: List[str]
        :param fractie_omschrijving_isempty: Whether the field is empty or not.
        :type fractie_omschrijving_isempty: bool
        :param fractie_omschrijving_isnull: Whether the field has a NULL value or not.
        :type fractie_omschrijving_isnull: bool
        :param fractie_omschrijving_like: Matches text using wildcards (? and *).
        :type fractie_omschrijving_like: str
        :param fractie_omschrijving_not: Exclude matches; text
        :type fractie_omschrijving_not: List[str]
        :param fractie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_in: List[str]
        :param fractie_isempty: Whether the field is empty or not.
        :type fractie_isempty: bool
        :param fractie_isnull: Whether the field has a NULL value or not.
        :type fractie_isnull: bool
        :param fractie_like: Matches text using wildcards (? and *).
        :type fractie_like: str
        :param fractie_not: Exclude matches; text
        :type fractie_not: List[str]
        :param geometrie: Geometrie van het type MULTIPOLYGON in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Uniek identificerend kenmerk van het record
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param loopafstand: Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie
        :type loopafstand: float
        :param loopafstand_categorie_id: identificatie categorie loopafstand
        :type loopafstand_categorie_id: str
        :param loopafstand_categorie_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_categorie_id_in: List[str]
        :param loopafstand_categorie_id_isempty: Whether the field is empty or not.
        :type loopafstand_categorie_id_isempty: bool
        :param loopafstand_categorie_id_isnull: Whether the field has a NULL value or not.
        :type loopafstand_categorie_id_isnull: bool
        :param loopafstand_categorie_id_like: Matches text using wildcards (? and *).
        :type loopafstand_categorie_id_like: str
        :param loopafstand_categorie_id_not: Exclude matches; text
        :type loopafstand_categorie_id_not: List[str]
        :param loopafstand_gt: Greater than; number
        :type loopafstand_gt: float
        :param loopafstand_gte: Greater than or equal to; number
        :type loopafstand_gte: float
        :param loopafstand_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_in: List[float]
        :param loopafstand_isnull: Whether the field has a NULL value or not.
        :type loopafstand_isnull: bool
        :param loopafstand_lt: Less than; number
        :type loopafstand_lt: float
        :param loopafstand_lte: Less than or equal to; number
        :type loopafstand_lte: float
        :param loopafstand_not: Exclude matches; number
        :type loopafstand_not: List[float]
        :param verwijderd_dp: Indicatie of het object verwijderd is in de datapijplijn
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bag_object_loopafstand_v2_retrieve2_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            bag_object_id=bag_object_id,
            bag_object_id_in=bag_object_id_in,
            bag_object_id_isempty=bag_object_id_isempty,
            bag_object_id_isnull=bag_object_id_isnull,
            bag_object_id_like=bag_object_id_like,
            bag_object_id_not=bag_object_id_not,
            bag_object_type=bag_object_type,
            bag_object_type_in=bag_object_type_in,
            bag_object_type_isempty=bag_object_type_isempty,
            bag_object_type_isnull=bag_object_type_isnull,
            bag_object_type_like=bag_object_type_like,
            bag_object_type_not=bag_object_type_not,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            fractie=fractie,
            fractie_omschrijving=fractie_omschrijving,
            fractie_omschrijving_in=fractie_omschrijving_in,
            fractie_omschrijving_isempty=fractie_omschrijving_isempty,
            fractie_omschrijving_isnull=fractie_omschrijving_isnull,
            fractie_omschrijving_like=fractie_omschrijving_like,
            fractie_omschrijving_not=fractie_omschrijving_not,
            fractie_in=fractie_in,
            fractie_isempty=fractie_isempty,
            fractie_isnull=fractie_isnull,
            fractie_like=fractie_like,
            fractie_not=fractie_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            loopafstand=loopafstand,
            loopafstand_categorie_id=loopafstand_categorie_id,
            loopafstand_categorie_id_in=loopafstand_categorie_id_in,
            loopafstand_categorie_id_isempty=loopafstand_categorie_id_isempty,
            loopafstand_categorie_id_isnull=loopafstand_categorie_id_isnull,
            loopafstand_categorie_id_like=loopafstand_categorie_id_like,
            loopafstand_categorie_id_not=loopafstand_categorie_id_not,
            loopafstand_gt=loopafstand_gt,
            loopafstand_gte=loopafstand_gte,
            loopafstand_in=loopafstand_in,
            loopafstand_isnull=loopafstand_isnull,
            loopafstand_lt=loopafstand_lt,
            loopafstand_lte=loopafstand_lte,
            loopafstand_not=loopafstand_not,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HuishoudelijkafvalbagObjectLoopafstandV2",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def huishoudelijkafval_bag_object_loopafstand_v2_retrieve2_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        bag_object_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van bagobject")] = None,
        bag_object_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_object_type: Annotated[Optional[StrictStr], Field(description="Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats")] = None,
        bag_object_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_object_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_object_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_object_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_object_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie: Annotated[Optional[StrictStr], Field(description="Code afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving: Annotated[Optional[StrictStr], Field(description="Omschrijving afvalfractie waarnaar de afstand is bepaald")] = None,
        fractie_omschrijving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_omschrijving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_omschrijving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_omschrijving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_omschrijving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        fractie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        fractie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        fractie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        fractie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        fractie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type MULTIPOLYGON in RD (epsg:28992))")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van het record")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie")] = None,
        loopafstand_categorie_id: Annotated[Optional[StrictStr], Field(description="identificatie categorie loopafstand")] = None,
        loopafstand_categorie_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_categorie_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        loopafstand_categorie_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_categorie_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        loopafstand_categorie_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        loopafstand_gt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than; number")] = None,
        loopafstand_gte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Greater than or equal to; number")] = None,
        loopafstand_in: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        loopafstand_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        loopafstand_lt: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than; number")] = None,
        loopafstand_lte: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Less than or equal to; number")] = None,
        loopafstand_not: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Exclude matches; number")] = None,
        verwijderd_dp: Annotated[Optional[StrictBool], Field(description="Indicatie of het object verwijderd is in de datapijplijn")] = None,
        verwijderd_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp: Annotated[Optional[datetime], Field(description="Datum waarop het object is gewijzigd")] = None,
        wijzigingsdatum_dp_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        wijzigingsdatum_dp_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        wijzigingsdatum_dp_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        wijzigingsdatum_dp_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """huishoudelijkafval_bag_object_loopafstand_v2_retrieve2


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param bag_object_id: Uniek identificerend kenmerk van bagobject
        :type bag_object_id: str
        :param bag_object_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_id_in: List[str]
        :param bag_object_id_isempty: Whether the field is empty or not.
        :type bag_object_id_isempty: bool
        :param bag_object_id_isnull: Whether the field has a NULL value or not.
        :type bag_object_id_isnull: bool
        :param bag_object_id_like: Matches text using wildcards (? and *).
        :type bag_object_id_like: str
        :param bag_object_id_not: Exclude matches; text
        :type bag_object_id_not: List[str]
        :param bag_object_type: Typering adresseerbaar object conform BAG: verblijfsobject, ligplaats , standplaats
        :type bag_object_type: str
        :param bag_object_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_object_type_in: List[str]
        :param bag_object_type_isempty: Whether the field is empty or not.
        :type bag_object_type_isempty: bool
        :param bag_object_type_isnull: Whether the field has a NULL value or not.
        :type bag_object_type_isnull: bool
        :param bag_object_type_like: Matches text using wildcards (? and *).
        :type bag_object_type_like: str
        :param bag_object_type_not: Exclude matches; text
        :type bag_object_type_not: List[str]
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param fractie: Code afvalfractie waarnaar de afstand is bepaald
        :type fractie: str
        :param fractie_omschrijving: Omschrijving afvalfractie waarnaar de afstand is bepaald
        :type fractie_omschrijving: str
        :param fractie_omschrijving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_omschrijving_in: List[str]
        :param fractie_omschrijving_isempty: Whether the field is empty or not.
        :type fractie_omschrijving_isempty: bool
        :param fractie_omschrijving_isnull: Whether the field has a NULL value or not.
        :type fractie_omschrijving_isnull: bool
        :param fractie_omschrijving_like: Matches text using wildcards (? and *).
        :type fractie_omschrijving_like: str
        :param fractie_omschrijving_not: Exclude matches; text
        :type fractie_omschrijving_not: List[str]
        :param fractie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type fractie_in: List[str]
        :param fractie_isempty: Whether the field is empty or not.
        :type fractie_isempty: bool
        :param fractie_isnull: Whether the field has a NULL value or not.
        :type fractie_isnull: bool
        :param fractie_like: Matches text using wildcards (? and *).
        :type fractie_like: str
        :param fractie_not: Exclude matches; text
        :type fractie_not: List[str]
        :param geometrie: Geometrie van het type MULTIPOLYGON in RD (epsg:28992))
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Uniek identificerend kenmerk van het record
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param loopafstand: Berekende afstand over de weg in meter  van woning tot cluster van containers van de betreffende afvalfractie
        :type loopafstand: float
        :param loopafstand_categorie_id: identificatie categorie loopafstand
        :type loopafstand_categorie_id: str
        :param loopafstand_categorie_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_categorie_id_in: List[str]
        :param loopafstand_categorie_id_isempty: Whether the field is empty or not.
        :type loopafstand_categorie_id_isempty: bool
        :param loopafstand_categorie_id_isnull: Whether the field has a NULL value or not.
        :type loopafstand_categorie_id_isnull: bool
        :param loopafstand_categorie_id_like: Matches text using wildcards (? and *).
        :type loopafstand_categorie_id_like: str
        :param loopafstand_categorie_id_not: Exclude matches; text
        :type loopafstand_categorie_id_not: List[str]
        :param loopafstand_gt: Greater than; number
        :type loopafstand_gt: float
        :param loopafstand_gte: Greater than or equal to; number
        :type loopafstand_gte: float
        :param loopafstand_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type loopafstand_in: List[float]
        :param loopafstand_isnull: Whether the field has a NULL value or not.
        :type loopafstand_isnull: bool
        :param loopafstand_lt: Less than; number
        :type loopafstand_lt: float
        :param loopafstand_lte: Less than or equal to; number
        :type loopafstand_lte: float
        :param loopafstand_not: Exclude matches; number
        :type loopafstand_not: List[float]
        :param verwijderd_dp: Indicatie of het object verwijderd is in de datapijplijn
        :type verwijderd_dp: bool
        :param verwijderd_dp_isnull: Whether the field has a NULL value or not.
        :type verwijderd_dp_isnull: bool
        :param wijzigingsdatum_dp: Datum waarop het object is gewijzigd
        :type wijzigingsdatum_dp: datetime
        :param wijzigingsdatum_dp_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gt: datetime
        :param wijzigingsdatum_dp_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_gte: datetime
        :param wijzigingsdatum_dp_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type wijzigingsdatum_dp_in: List[datetime]
        :param wijzigingsdatum_dp_isnull: Whether the field has a NULL value or not.
        :type wijzigingsdatum_dp_isnull: bool
        :param wijzigingsdatum_dp_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lt: datetime
        :param wijzigingsdatum_dp_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_lte: datetime
        :param wijzigingsdatum_dp_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type wijzigingsdatum_dp_not: List[datetime]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bag_object_loopafstand_v2_retrieve2_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            bag_object_id=bag_object_id,
            bag_object_id_in=bag_object_id_in,
            bag_object_id_isempty=bag_object_id_isempty,
            bag_object_id_isnull=bag_object_id_isnull,
            bag_object_id_like=bag_object_id_like,
            bag_object_id_not=bag_object_id_not,
            bag_object_type=bag_object_type,
            bag_object_type_in=bag_object_type_in,
            bag_object_type_isempty=bag_object_type_isempty,
            bag_object_type_isnull=bag_object_type_isnull,
            bag_object_type_like=bag_object_type_like,
            bag_object_type_not=bag_object_type_not,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            fractie=fractie,
            fractie_omschrijving=fractie_omschrijving,
            fractie_omschrijving_in=fractie_omschrijving_in,
            fractie_omschrijving_isempty=fractie_omschrijving_isempty,
            fractie_omschrijving_isnull=fractie_omschrijving_isnull,
            fractie_omschrijving_like=fractie_omschrijving_like,
            fractie_omschrijving_not=fractie_omschrijving_not,
            fractie_in=fractie_in,
            fractie_isempty=fractie_isempty,
            fractie_isnull=fractie_isnull,
            fractie_like=fractie_like,
            fractie_not=fractie_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            loopafstand=loopafstand,
            loopafstand_categorie_id=loopafstand_categorie_id,
            loopafstand_categorie_id_in=loopafstand_categorie_id_in,
            loopafstand_categorie_id_isempty=loopafstand_categorie_id_isempty,
            loopafstand_categorie_id_isnull=loopafstand_categorie_id_isnull,
            loopafstand_categorie_id_like=loopafstand_categorie_id_like,
            loopafstand_categorie_id_not=loopafstand_categorie_id_not,
            loopafstand_gt=loopafstand_gt,
            loopafstand_gte=loopafstand_gte,
            loopafstand_in=loopafstand_in,
            loopafstand_isnull=loopafstand_isnull,
            loopafstand_lt=loopafstand_lt,
            loopafstand_lte=loopafstand_lte,
            loopafstand_not=loopafstand_not,
            verwijderd_dp=verwijderd_dp,
            verwijderd_dp_isnull=verwijderd_dp_isnull,
            wijzigingsdatum_dp=wijzigingsdatum_dp,
            wijzigingsdatum_dp_gt=wijzigingsdatum_dp_gt,
            wijzigingsdatum_dp_gte=wijzigingsdatum_dp_gte,
            wijzigingsdatum_dp_in=wijzigingsdatum_dp_in,
            wijzigingsdatum_dp_isnull=wijzigingsdatum_dp_isnull,
            wijzigingsdatum_dp_lt=wijzigingsdatum_dp_lt,
            wijzigingsdatum_dp_lte=wijzigingsdatum_dp_lte,
            wijzigingsdatum_dp_not=wijzigingsdatum_dp_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HuishoudelijkafvalbagObjectLoopafstandV2",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _huishoudelijkafval_bag_object_loopafstand_v2_retrieve2_serialize(
        self,
        id,
        accept_crs,
        content_crs,
        x_api_key,
        expand,
        expand_scope,
        fields,
        format,
        sort,
        bag_object_id,
        bag_object_id_in,
        bag_object_id_isempty,
        bag_object_id_isnull,
        bag_object_id_like,
        bag_object_id_not,
        bag_object_type,
        bag_object_type_in,
        bag_object_type_isempty,
        bag_object_type_isnull,
        bag_object_type_like,
        bag_object_type_not,
        cluster_id,
        cluster_id_in,
        cluster_id_isempty,
        cluster_id_isnull,
        cluster_id_like,
        cluster_id_not,
        fractie,
        fractie_omschrijving,
        fractie_omschrijving_in,
        fractie_omschrijving_isempty,
        fractie_omschrijving_isnull,
        fractie_omschrijving_like,
        fractie_omschrijving_not,
        fractie_in,
        fractie_isempty,
        fractie_isnull,
        fractie_like,
        fractie_not,
        geometrie,
        geometrie_contains,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        id2,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        loopafstand,
        loopafstand_categorie_id,
        loopafstand_categorie_id_in,
        loopafstand_categorie_id_isempty,
        loopafstand_categorie_id_isnull,
        loopafstand_categorie_id_like,
        loopafstand_categorie_id_not,
        loopafstand_gt,
        loopafstand_gte,
        loopafstand_in,
        loopafstand_isnull,
        loopafstand_lt,
        loopafstand_lte,
        loopafstand_not,
        verwijderd_dp,
        verwijderd_dp_isnull,
        wijzigingsdatum_dp,
        wijzigingsdatum_dp_gt,
        wijzigingsdatum_dp_gte,
        wijzigingsdatum_dp_in,
        wijzigingsdatum_dp_isnull,
        wijzigingsdatum_dp_lt,
        wijzigingsdatum_dp_lte,
        wijzigingsdatum_dp_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'bagObjectId[in]': 'csv',
            'bagObjectId[not]': 'multi',
            'bagObjectType[in]': 'csv',
            'bagObjectType[not]': 'multi',
            'cluster.id[in]': 'csv',
            'cluster.id[not]': 'multi',
            'fractieOmschrijving[in]': 'csv',
            'fractieOmschrijving[not]': 'multi',
            'fractie[in]': 'csv',
            'fractie[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'loopafstandCategorie.id[in]': 'csv',
            'loopafstandCategorie.id[not]': 'multi',
            'loopafstand[in]': 'csv',
            'loopafstand[not]': 'multi',
            'wijzigingsdatumDp[in]': 'csv',
            'wijzigingsdatumDp[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if bag_object_id is not None:
            
            _query_params.append(('bagObjectId', bag_object_id))
            
        if bag_object_id_in is not None:
            
            _query_params.append(('bagObjectId[in]', bag_object_id_in))
            
        if bag_object_id_isempty is not None:
            
            _query_params.append(('bagObjectId[isempty]', bag_object_id_isempty))
            
        if bag_object_id_isnull is not None:
            
            _query_params.append(('bagObjectId[isnull]', bag_object_id_isnull))
            
        if bag_object_id_like is not None:
            
            _query_params.append(('bagObjectId[like]', bag_object_id_like))
            
        if bag_object_id_not is not None:
            
            _query_params.append(('bagObjectId[not]', bag_object_id_not))
            
        if bag_object_type is not None:
            
            _query_params.append(('bagObjectType', bag_object_type))
            
        if bag_object_type_in is not None:
            
            _query_params.append(('bagObjectType[in]', bag_object_type_in))
            
        if bag_object_type_isempty is not None:
            
            _query_params.append(('bagObjectType[isempty]', bag_object_type_isempty))
            
        if bag_object_type_isnull is not None:
            
            _query_params.append(('bagObjectType[isnull]', bag_object_type_isnull))
            
        if bag_object_type_like is not None:
            
            _query_params.append(('bagObjectType[like]', bag_object_type_like))
            
        if bag_object_type_not is not None:
            
            _query_params.append(('bagObjectType[not]', bag_object_type_not))
            
        if cluster_id is not None:
            
            _query_params.append(('cluster.id', cluster_id))
            
        if cluster_id_in is not None:
            
            _query_params.append(('cluster.id[in]', cluster_id_in))
            
        if cluster_id_isempty is not None:
            
            _query_params.append(('cluster.id[isempty]', cluster_id_isempty))
            
        if cluster_id_isnull is not None:
            
            _query_params.append(('cluster.id[isnull]', cluster_id_isnull))
            
        if cluster_id_like is not None:
            
            _query_params.append(('cluster.id[like]', cluster_id_like))
            
        if cluster_id_not is not None:
            
            _query_params.append(('cluster.id[not]', cluster_id_not))
            
        if fractie is not None:
            
            _query_params.append(('fractie', fractie))
            
        if fractie_omschrijving is not None:
            
            _query_params.append(('fractieOmschrijving', fractie_omschrijving))
            
        if fractie_omschrijving_in is not None:
            
            _query_params.append(('fractieOmschrijving[in]', fractie_omschrijving_in))
            
        if fractie_omschrijving_isempty is not None:
            
            _query_params.append(('fractieOmschrijving[isempty]', fractie_omschrijving_isempty))
            
        if fractie_omschrijving_isnull is not None:
            
            _query_params.append(('fractieOmschrijving[isnull]', fractie_omschrijving_isnull))
            
        if fractie_omschrijving_like is not None:
            
            _query_params.append(('fractieOmschrijving[like]', fractie_omschrijving_like))
            
        if fractie_omschrijving_not is not None:
            
            _query_params.append(('fractieOmschrijving[not]', fractie_omschrijving_not))
            
        if fractie_in is not None:
            
            _query_params.append(('fractie[in]', fractie_in))
            
        if fractie_isempty is not None:
            
            _query_params.append(('fractie[isempty]', fractie_isempty))
            
        if fractie_isnull is not None:
            
            _query_params.append(('fractie[isnull]', fractie_isnull))
            
        if fractie_like is not None:
            
            _query_params.append(('fractie[like]', fractie_like))
            
        if fractie_not is not None:
            
            _query_params.append(('fractie[not]', fractie_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_contains is not None:
            
            _query_params.append(('geometrie[contains]', geometrie_contains))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if id2 is not None:
            
            _query_params.append(('id', id2))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if loopafstand is not None:
            
            _query_params.append(('loopafstand', loopafstand))
            
        if loopafstand_categorie_id is not None:
            
            _query_params.append(('loopafstandCategorie.id', loopafstand_categorie_id))
            
        if loopafstand_categorie_id_in is not None:
            
            _query_params.append(('loopafstandCategorie.id[in]', loopafstand_categorie_id_in))
            
        if loopafstand_categorie_id_isempty is not None:
            
            _query_params.append(('loopafstandCategorie.id[isempty]', loopafstand_categorie_id_isempty))
            
        if loopafstand_categorie_id_isnull is not None:
            
            _query_params.append(('loopafstandCategorie.id[isnull]', loopafstand_categorie_id_isnull))
            
        if loopafstand_categorie_id_like is not None:
            
            _query_params.append(('loopafstandCategorie.id[like]', loopafstand_categorie_id_like))
            
        if loopafstand_categorie_id_not is not None:
            
            _query_params.append(('loopafstandCategorie.id[not]', loopafstand_categorie_id_not))
            
        if loopafstand_gt is not None:
            
            _query_params.append(('loopafstand[gt]', loopafstand_gt))
            
        if loopafstand_gte is not None:
            
            _query_params.append(('loopafstand[gte]', loopafstand_gte))
            
        if loopafstand_in is not None:
            
            _query_params.append(('loopafstand[in]', loopafstand_in))
            
        if loopafstand_isnull is not None:
            
            _query_params.append(('loopafstand[isnull]', loopafstand_isnull))
            
        if loopafstand_lt is not None:
            
            _query_params.append(('loopafstand[lt]', loopafstand_lt))
            
        if loopafstand_lte is not None:
            
            _query_params.append(('loopafstand[lte]', loopafstand_lte))
            
        if loopafstand_not is not None:
            
            _query_params.append(('loopafstand[not]', loopafstand_not))
            
        if verwijderd_dp is not None:
            
            _query_params.append(('verwijderdDp', verwijderd_dp))
            
        if verwijderd_dp_isnull is not None:
            
            _query_params.append(('verwijderdDp[isnull]', verwijderd_dp_isnull))
            
        if wijzigingsdatum_dp is not None:
            if isinstance(wijzigingsdatum_dp, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp',
                        wijzigingsdatum_dp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp', wijzigingsdatum_dp))
            
        if wijzigingsdatum_dp_gt is not None:
            if isinstance(wijzigingsdatum_dp_gt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gt]',
                        wijzigingsdatum_dp_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gt]', wijzigingsdatum_dp_gt))
            
        if wijzigingsdatum_dp_gte is not None:
            if isinstance(wijzigingsdatum_dp_gte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[gte]',
                        wijzigingsdatum_dp_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[gte]', wijzigingsdatum_dp_gte))
            
        if wijzigingsdatum_dp_in is not None:
            
            _query_params.append(('wijzigingsdatumDp[in]', wijzigingsdatum_dp_in))
            
        if wijzigingsdatum_dp_isnull is not None:
            
            _query_params.append(('wijzigingsdatumDp[isnull]', wijzigingsdatum_dp_isnull))
            
        if wijzigingsdatum_dp_lt is not None:
            if isinstance(wijzigingsdatum_dp_lt, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lt]',
                        wijzigingsdatum_dp_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lt]', wijzigingsdatum_dp_lt))
            
        if wijzigingsdatum_dp_lte is not None:
            if isinstance(wijzigingsdatum_dp_lte, datetime):
                _query_params.append(
                    (
                        'wijzigingsdatumDp[lte]',
                        wijzigingsdatum_dp_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('wijzigingsdatumDp[lte]', wijzigingsdatum_dp_lte))
            
        if wijzigingsdatum_dp_not is not None:
            
            _query_params.append(('wijzigingsdatumDp[not]', wijzigingsdatum_dp_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bag_object_loopafstand_v2/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


