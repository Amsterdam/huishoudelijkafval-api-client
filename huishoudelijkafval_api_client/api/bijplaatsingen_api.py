# coding: utf-8

"""
    Afvalcontainers, putten en weeggegevens

    Alle locaties van afvalcontainers (ondergrondse afvalcontainers, bovengrondse afvalcontainers en rolcontainers) en  betonputten van de Gemeente Amsterdam. De locaties worden dagelijks bijgewerkt en bevatten de fracties Rest, Papier, Glas en Textiel. Naast de objectinformatie zijn ook de weeggegevens beschikbaar.

    The version of the OpenAPI document: 2.5.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from huishoudelijkafval_api_client.models.huishoudelijkafvalbijplaatsingen import Huishoudelijkafvalbijplaatsingen
from huishoudelijkafval_api_client.models.paginated_huishoudelijkafvalbijplaatsingen_list import PaginatedHuishoudelijkafvalbijplaatsingenList

from huishoudelijkafval_api_client.api_client import ApiClient, RequestSerialized
from huishoudelijkafval_api_client.api_response import ApiResponse
from huishoudelijkafval_api_client.rest import RESTResponseType


class BijplaatsingenApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def huishoudelijkafval_bijplaatsingen_list_slash(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        adres_type: Annotated[Optional[StrictStr], Field(description="Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. ")] = None,
        adres_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        adres_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        adres_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        adres_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        adres_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_woonplaats_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van een woonplaats")] = None,
        bag_woonplaats_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_woonplaats_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_woonplaats_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_woonplaats_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_woonplaats_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bruingoed: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (bruingoed) rondom de container(s)")] = None,
        bruingoed_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        containervies: Annotated[Optional[StrictBool], Field(description="De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt")] = None,
        containervies_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score: Annotated[Optional[StrictStr], Field(description="De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks")] = None,
        crow_score_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        crow_score_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        crow_score_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        crow_score_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_waarneming: Annotated[Optional[date], Field(description="De datum waarop de waarneming is geregistreerd.")] = None,
        datum_waarneming_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_waarneming_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_waarneming_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_waarneming_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        dumpplek: Annotated[Optional[StrictBool], Field(description="Het geeft aan of de locatie een dumpplek is.")] = None,
        dumpplek_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_buurt_code: Annotated[Optional[StrictStr], Field(description="Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)")] = None,
        gbd_buurt_code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_stadsdeel_naam: Annotated[Optional[StrictStr], Field(description="Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        gbd_stadsdeel_naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_stadsdeel_naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_stadsdeel_naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_stadsdeel_naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_stadsdeel_naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gebruikers_rol: Annotated[Optional[StrictStr], Field(description="De rol van de gebruiker in de applicatie.")] = None,
        gebruikers_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gebruikers_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gebruikers_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gebruikers_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gebruikers_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de waarneming RD(epsg:28992)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        glas: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (glas afval) rondom de container(s)")] = None,
        glas_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasgestremd: Annotated[Optional[StrictBool], Field(description="De glascontainer is gestremd")] = None,
        glasgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glastoegankelijk: Annotated[Optional[StrictBool], Field(description="De glascontainer is toegangelijk")] = None,
        glastoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasvol: Annotated[Optional[StrictBool], Field(description="De glascontainer is vol")] = None,
        glasvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grof: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (grofvuil) rondom de container(s)")] = None,
        grof_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen: Annotated[Optional[StrictStr], Field(description="De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.")] = None,
        grofvuildagen_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        grofvuildagen_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        grofvuildagen_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        grofvuildagen_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        handhaving: Annotated[Optional[StrictBool], Field(description="Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig")] = None,
        handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        huisvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (huisvuil) rondom de container(s)")] = None,
        huisvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het record.")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        karton: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (karton) rondom de container(s)")] = None,
        karton_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer: Annotated[Optional[StrictStr], Field(description="De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.")] = None,
        locatie_waarnemer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        locatie_waarnemer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        locatie_waarnemer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        locatie_waarnemer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        melding_door_collega_doorgezet: Annotated[Optional[StrictStr], Field(description="Het geeft aan of de waarneming door een collega is doorgezet.")] = None,
        melding_door_collega_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        melding_door_collega_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        melding_door_collega_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        melding_door_collega_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        melding_door_collega_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam_melding_doorgezet: Annotated[Optional[StrictStr], Field(description="Soort doorgezette waarneming.")] = None,
        naam_melding_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_melding_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_melding_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_melding_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_melding_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        overig: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (overig) rondom de container(s)")] = None,
        overig_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        papiergestremd: Annotated[Optional[StrictBool], Field(description="De papiercontainer is gestremd")] = None,
        papiergestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiertoegankelijk: Annotated[Optional[StrictBool], Field(description="De papiercontainer is toegankelijk")] = None,
        papiertoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiervol: Annotated[Optional[StrictBool], Field(description="De papiercontainer is vol")] = None,
        papiervol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        postcode_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        postcode_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        postcode_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        postcode_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        restgestremd: Annotated[Optional[StrictBool], Field(description="De restcontainer is gestremd")] = None,
        restgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        resttoegankelijk: Annotated[Optional[StrictBool], Field(description="De restcontainer is toegankelijk")] = None,
        resttoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        restvol: Annotated[Optional[StrictBool], Field(description="De restcontainer is vol")] = None,
        restvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam: Annotated[Optional[StrictStr], Field(description="De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).")] = None,
        straatnaam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        straatnaam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        straatnaam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        straatnaam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        tijd_waarneming: Annotated[Optional[StrictStr], Field(description="De tijdstip waarop de waarneming is geregistreerd.")] = None,
        tijd_waarneming_gt: Annotated[Optional[StrictStr], Field(description="Greater than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_gte: Annotated[Optional[StrictStr], Field(description="Greater than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        tijd_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        tijd_waarneming_lt: Annotated[Optional[StrictStr], Field(description="Less than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_lte: Annotated[Optional[StrictStr], Field(description="Less than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; use hh:mm[:ss[.ms]]")] = None,
        type_waarneming: Annotated[Optional[StrictStr], Field(description="Geeft aan of de waarneming een CROW waarneming is.")] = None,
        type_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        type_waarneming_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        type_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        type_waarneming_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        type_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        veegvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (veegvuil) rondom de container(s)")] = None,
        veegvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving: Annotated[Optional[StrictStr], Field(description="Hoe veel items met adresgegevens zijn er aangetroffen?")] = None,
        waarde_handhaving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarde_handhaving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarde_handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarde_handhaving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        waarnemer_rol: Annotated[Optional[StrictStr], Field(description="De rol van de melder")] = None,
        waarnemer_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarnemer_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarnemer_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarnemer_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarnemer_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        zwerfafval: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (zwerfafval) rondom de container(s)")] = None,
        zwerfafval_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedHuishoudelijkafvalbijplaatsingenList:
        """huishoudelijkafval_bijplaatsingen_list_slash

        De Aanpak Bijplaatsingen (ABP) richt zich op afval dat op onjuiste wijze buiten wordt geplaatst. Momenteel wordt dit door de Gemeente Amsterdam op wijkniveau aangepakt via de ABP. Door communicatiemiddelen en interventies in te zetten rondom de meest vervuilde containerlocaties, neemt de netheid toe en daalt het aantal bijplaatsingen. Dit dataproduct bevat de registratie van bijplaatsingen zoals vastgelegd door de bevoegde medewerkers.

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param adres_type: Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. 
        :type adres_type: str
        :param adres_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type adres_type_in: List[str]
        :param adres_type_isempty: Whether the field is empty or not.
        :type adres_type_isempty: bool
        :param adres_type_isnull: Whether the field has a NULL value or not.
        :type adres_type_isnull: bool
        :param adres_type_like: Matches text using wildcards (? and *).
        :type adres_type_like: str
        :param adres_type_not: Exclude matches; text
        :type adres_type_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bag_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_verblijfsobject_identificatie: str
        :param bag_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_verblijfsobject_identificatie_in: List[str]
        :param bag_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_verblijfsobject_identificatie_isempty: bool
        :param bag_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_verblijfsobject_identificatie_isnull: bool
        :param bag_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_verblijfsobject_identificatie_like: str
        :param bag_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_verblijfsobject_identificatie_not: List[str]
        :param bag_woonplaats_identificatie: Unieke aanduiding van een woonplaats
        :type bag_woonplaats_identificatie: str
        :param bag_woonplaats_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_woonplaats_identificatie_in: List[str]
        :param bag_woonplaats_identificatie_isempty: Whether the field is empty or not.
        :type bag_woonplaats_identificatie_isempty: bool
        :param bag_woonplaats_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_woonplaats_identificatie_isnull: bool
        :param bag_woonplaats_identificatie_like: Matches text using wildcards (? and *).
        :type bag_woonplaats_identificatie_like: str
        :param bag_woonplaats_identificatie_not: Exclude matches; text
        :type bag_woonplaats_identificatie_not: List[str]
        :param bruingoed: Aangetroffen afvalsoort (bruingoed) rondom de container(s)
        :type bruingoed: bool
        :param bruingoed_isnull: Whether the field has a NULL value or not.
        :type bruingoed_isnull: bool
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param containervies: De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt
        :type containervies: bool
        :param containervies_isnull: Whether the field has a NULL value or not.
        :type containervies_isnull: bool
        :param crow_score: De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks
        :type crow_score: str
        :param crow_score_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type crow_score_in: List[str]
        :param crow_score_isempty: Whether the field is empty or not.
        :type crow_score_isempty: bool
        :param crow_score_isnull: Whether the field has a NULL value or not.
        :type crow_score_isnull: bool
        :param crow_score_like: Matches text using wildcards (? and *).
        :type crow_score_like: str
        :param crow_score_not: Exclude matches; text
        :type crow_score_not: List[str]
        :param datum_waarneming: De datum waarop de waarneming is geregistreerd.
        :type datum_waarneming: date
        :param datum_waarneming_gt: Greater than; use yyyy-mm-dd
        :type datum_waarneming_gt: date
        :param datum_waarneming_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_waarneming_gte: date
        :param datum_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_waarneming_in: List[date]
        :param datum_waarneming_isnull: Whether the field has a NULL value or not.
        :type datum_waarneming_isnull: bool
        :param datum_waarneming_lt: Less than; use yyyy-mm-dd
        :type datum_waarneming_lt: date
        :param datum_waarneming_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_waarneming_lte: date
        :param datum_waarneming_not: Exclude matches; use yyyy-mm-dd
        :type datum_waarneming_not: List[date]
        :param dumpplek: Het geeft aan of de locatie een dumpplek is.
        :type dumpplek: bool
        :param dumpplek_isnull: Whether the field has a NULL value or not.
        :type dumpplek_isnull: bool
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param gbd_buurt_code: Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)
        :type gbd_buurt_code: str
        :param gbd_buurt_code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_code_in: List[str]
        :param gbd_buurt_code_isempty: Whether the field is empty or not.
        :type gbd_buurt_code_isempty: bool
        :param gbd_buurt_code_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_code_isnull: bool
        :param gbd_buurt_code_like: Matches text using wildcards (? and *).
        :type gbd_buurt_code_like: str
        :param gbd_buurt_code_not: Exclude matches; text
        :type gbd_buurt_code_not: List[str]
        :param gbd_stadsdeel_naam: Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type gbd_stadsdeel_naam: str
        :param gbd_stadsdeel_naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_stadsdeel_naam_in: List[str]
        :param gbd_stadsdeel_naam_isempty: Whether the field is empty or not.
        :type gbd_stadsdeel_naam_isempty: bool
        :param gbd_stadsdeel_naam_isnull: Whether the field has a NULL value or not.
        :type gbd_stadsdeel_naam_isnull: bool
        :param gbd_stadsdeel_naam_like: Matches text using wildcards (? and *).
        :type gbd_stadsdeel_naam_like: str
        :param gbd_stadsdeel_naam_not: Exclude matches; text
        :type gbd_stadsdeel_naam_not: List[str]
        :param gebruikers_rol: De rol van de gebruiker in de applicatie.
        :type gebruikers_rol: str
        :param gebruikers_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gebruikers_rol_in: List[str]
        :param gebruikers_rol_isempty: Whether the field is empty or not.
        :type gebruikers_rol_isempty: bool
        :param gebruikers_rol_isnull: Whether the field has a NULL value or not.
        :type gebruikers_rol_isnull: bool
        :param gebruikers_rol_like: Matches text using wildcards (? and *).
        :type gebruikers_rol_like: str
        :param gebruikers_rol_not: Exclude matches; text
        :type gebruikers_rol_not: List[str]
        :param geometrie: Geometrie van het type POINT van de waarneming RD(epsg:28992)
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param glas: Aangetroffen afvalsoort (glas afval) rondom de container(s)
        :type glas: bool
        :param glas_isnull: Whether the field has a NULL value or not.
        :type glas_isnull: bool
        :param glasgestremd: De glascontainer is gestremd
        :type glasgestremd: bool
        :param glasgestremd_isnull: Whether the field has a NULL value or not.
        :type glasgestremd_isnull: bool
        :param glastoegankelijk: De glascontainer is toegangelijk
        :type glastoegankelijk: bool
        :param glastoegankelijk_isnull: Whether the field has a NULL value or not.
        :type glastoegankelijk_isnull: bool
        :param glasvol: De glascontainer is vol
        :type glasvol: bool
        :param glasvol_isnull: Whether the field has a NULL value or not.
        :type glasvol_isnull: bool
        :param grof: Aangetroffen afvalsoort (grofvuil) rondom de container(s)
        :type grof: bool
        :param grof_isnull: Whether the field has a NULL value or not.
        :type grof_isnull: bool
        :param grofvuildagen: De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.
        :type grofvuildagen: str
        :param grofvuildagen_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type grofvuildagen_in: List[str]
        :param grofvuildagen_isempty: Whether the field is empty or not.
        :type grofvuildagen_isempty: bool
        :param grofvuildagen_isnull: Whether the field has a NULL value or not.
        :type grofvuildagen_isnull: bool
        :param grofvuildagen_like: Matches text using wildcards (? and *).
        :type grofvuildagen_like: str
        :param grofvuildagen_not: Exclude matches; text
        :type grofvuildagen_not: List[str]
        :param handhaving: Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig
        :type handhaving: bool
        :param handhaving_isnull: Whether the field has a NULL value or not.
        :type handhaving_isnull: bool
        :param huisvuil: Aangetroffen afvalsoort (huisvuil) rondom de container(s)
        :type huisvuil: bool
        :param huisvuil_isnull: Whether the field has a NULL value or not.
        :type huisvuil_isnull: bool
        :param id: Unieke aanduiding van het record.
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param karton: Aangetroffen afvalsoort (karton) rondom de container(s)
        :type karton: bool
        :param karton_isnull: Whether the field has a NULL value or not.
        :type karton_isnull: bool
        :param locatie_waarnemer: De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.
        :type locatie_waarnemer: str
        :param locatie_waarnemer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type locatie_waarnemer_in: List[str]
        :param locatie_waarnemer_isempty: Whether the field is empty or not.
        :type locatie_waarnemer_isempty: bool
        :param locatie_waarnemer_isnull: Whether the field has a NULL value or not.
        :type locatie_waarnemer_isnull: bool
        :param locatie_waarnemer_like: Matches text using wildcards (? and *).
        :type locatie_waarnemer_like: str
        :param locatie_waarnemer_not: Exclude matches; text
        :type locatie_waarnemer_not: List[str]
        :param melding_door_collega_doorgezet: Het geeft aan of de waarneming door een collega is doorgezet.
        :type melding_door_collega_doorgezet: str
        :param melding_door_collega_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type melding_door_collega_doorgezet_in: List[str]
        :param melding_door_collega_doorgezet_isempty: Whether the field is empty or not.
        :type melding_door_collega_doorgezet_isempty: bool
        :param melding_door_collega_doorgezet_isnull: Whether the field has a NULL value or not.
        :type melding_door_collega_doorgezet_isnull: bool
        :param melding_door_collega_doorgezet_like: Matches text using wildcards (? and *).
        :type melding_door_collega_doorgezet_like: str
        :param melding_door_collega_doorgezet_not: Exclude matches; text
        :type melding_door_collega_doorgezet_not: List[str]
        :param naam_melding_doorgezet: Soort doorgezette waarneming.
        :type naam_melding_doorgezet: str
        :param naam_melding_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_melding_doorgezet_in: List[str]
        :param naam_melding_doorgezet_isempty: Whether the field is empty or not.
        :type naam_melding_doorgezet_isempty: bool
        :param naam_melding_doorgezet_isnull: Whether the field has a NULL value or not.
        :type naam_melding_doorgezet_isnull: bool
        :param naam_melding_doorgezet_like: Matches text using wildcards (? and *).
        :type naam_melding_doorgezet_like: str
        :param naam_melding_doorgezet_not: Exclude matches; text
        :type naam_melding_doorgezet_not: List[str]
        :param overig: Aangetroffen afvalsoort (overig) rondom de container(s)
        :type overig: bool
        :param overig_isnull: Whether the field has a NULL value or not.
        :type overig_isnull: bool
        :param page: A page number within the paginated result set.
        :type page: int
        :param papiergestremd: De papiercontainer is gestremd
        :type papiergestremd: bool
        :param papiergestremd_isnull: Whether the field has a NULL value or not.
        :type papiergestremd_isnull: bool
        :param papiertoegankelijk: De papiercontainer is toegankelijk
        :type papiertoegankelijk: bool
        :param papiertoegankelijk_isnull: Whether the field has a NULL value or not.
        :type papiertoegankelijk_isnull: bool
        :param papiervol: De papiercontainer is vol
        :type papiervol: bool
        :param papiervol_isnull: Whether the field has a NULL value or not.
        :type papiervol_isnull: bool
        :param postcode: De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type postcode: str
        :param postcode_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type postcode_in: List[str]
        :param postcode_isempty: Whether the field is empty or not.
        :type postcode_isempty: bool
        :param postcode_isnull: Whether the field has a NULL value or not.
        :type postcode_isnull: bool
        :param postcode_like: Matches text using wildcards (? and *).
        :type postcode_like: str
        :param postcode_not: Exclude matches; text
        :type postcode_not: List[str]
        :param restgestremd: De restcontainer is gestremd
        :type restgestremd: bool
        :param restgestremd_isnull: Whether the field has a NULL value or not.
        :type restgestremd_isnull: bool
        :param resttoegankelijk: De restcontainer is toegankelijk
        :type resttoegankelijk: bool
        :param resttoegankelijk_isnull: Whether the field has a NULL value or not.
        :type resttoegankelijk_isnull: bool
        :param restvol: De restcontainer is vol
        :type restvol: bool
        :param restvol_isnull: Whether the field has a NULL value or not.
        :type restvol_isnull: bool
        :param straatnaam: De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).
        :type straatnaam: str
        :param straatnaam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type straatnaam_in: List[str]
        :param straatnaam_isempty: Whether the field is empty or not.
        :type straatnaam_isempty: bool
        :param straatnaam_isnull: Whether the field has a NULL value or not.
        :type straatnaam_isnull: bool
        :param straatnaam_like: Matches text using wildcards (? and *).
        :type straatnaam_like: str
        :param straatnaam_not: Exclude matches; text
        :type straatnaam_not: List[str]
        :param tijd_waarneming: De tijdstip waarop de waarneming is geregistreerd.
        :type tijd_waarneming: str
        :param tijd_waarneming_gt: Greater than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gt: str
        :param tijd_waarneming_gte: Greater than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gte: str
        :param tijd_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type tijd_waarneming_in: List[str]
        :param tijd_waarneming_isnull: Whether the field has a NULL value or not.
        :type tijd_waarneming_isnull: bool
        :param tijd_waarneming_lt: Less than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lt: str
        :param tijd_waarneming_lte: Less than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lte: str
        :param tijd_waarneming_not: Exclude matches; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_not: List[str]
        :param type_waarneming: Geeft aan of de waarneming een CROW waarneming is.
        :type type_waarneming: str
        :param type_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type type_waarneming_in: List[str]
        :param type_waarneming_isempty: Whether the field is empty or not.
        :type type_waarneming_isempty: bool
        :param type_waarneming_isnull: Whether the field has a NULL value or not.
        :type type_waarneming_isnull: bool
        :param type_waarneming_like: Matches text using wildcards (? and *).
        :type type_waarneming_like: str
        :param type_waarneming_not: Exclude matches; text
        :type type_waarneming_not: List[str]
        :param veegvuil: Aangetroffen afvalsoort (veegvuil) rondom de container(s)
        :type veegvuil: bool
        :param veegvuil_isnull: Whether the field has a NULL value or not.
        :type veegvuil_isnull: bool
        :param waarde_handhaving: Hoe veel items met adresgegevens zijn er aangetroffen?
        :type waarde_handhaving: str
        :param waarde_handhaving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarde_handhaving_in: List[str]
        :param waarde_handhaving_isempty: Whether the field is empty or not.
        :type waarde_handhaving_isempty: bool
        :param waarde_handhaving_isnull: Whether the field has a NULL value or not.
        :type waarde_handhaving_isnull: bool
        :param waarde_handhaving_like: Matches text using wildcards (? and *).
        :type waarde_handhaving_like: str
        :param waarde_handhaving_not: Exclude matches; text
        :type waarde_handhaving_not: List[str]
        :param waarnemer_rol: De rol van de melder
        :type waarnemer_rol: str
        :param waarnemer_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarnemer_rol_in: List[str]
        :param waarnemer_rol_isempty: Whether the field is empty or not.
        :type waarnemer_rol_isempty: bool
        :param waarnemer_rol_isnull: Whether the field has a NULL value or not.
        :type waarnemer_rol_isnull: bool
        :param waarnemer_rol_like: Matches text using wildcards (? and *).
        :type waarnemer_rol_like: str
        :param waarnemer_rol_not: Exclude matches; text
        :type waarnemer_rol_not: List[str]
        :param zwerfafval: Aangetroffen afvalsoort (zwerfafval) rondom de container(s)
        :type zwerfafval: bool
        :param zwerfafval_isnull: Whether the field has a NULL value or not.
        :type zwerfafval_isnull: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bijplaatsingen_list_slash_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            adres_type=adres_type,
            adres_type_in=adres_type_in,
            adres_type_isempty=adres_type_isempty,
            adres_type_isnull=adres_type_isnull,
            adres_type_like=adres_type_like,
            adres_type_not=adres_type_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bag_verblijfsobject_identificatie=bag_verblijfsobject_identificatie,
            bag_verblijfsobject_identificatie_in=bag_verblijfsobject_identificatie_in,
            bag_verblijfsobject_identificatie_isempty=bag_verblijfsobject_identificatie_isempty,
            bag_verblijfsobject_identificatie_isnull=bag_verblijfsobject_identificatie_isnull,
            bag_verblijfsobject_identificatie_like=bag_verblijfsobject_identificatie_like,
            bag_verblijfsobject_identificatie_not=bag_verblijfsobject_identificatie_not,
            bag_woonplaats_identificatie=bag_woonplaats_identificatie,
            bag_woonplaats_identificatie_in=bag_woonplaats_identificatie_in,
            bag_woonplaats_identificatie_isempty=bag_woonplaats_identificatie_isempty,
            bag_woonplaats_identificatie_isnull=bag_woonplaats_identificatie_isnull,
            bag_woonplaats_identificatie_like=bag_woonplaats_identificatie_like,
            bag_woonplaats_identificatie_not=bag_woonplaats_identificatie_not,
            bruingoed=bruingoed,
            bruingoed_isnull=bruingoed_isnull,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            containervies=containervies,
            containervies_isnull=containervies_isnull,
            crow_score=crow_score,
            crow_score_in=crow_score_in,
            crow_score_isempty=crow_score_isempty,
            crow_score_isnull=crow_score_isnull,
            crow_score_like=crow_score_like,
            crow_score_not=crow_score_not,
            datum_waarneming=datum_waarneming,
            datum_waarneming_gt=datum_waarneming_gt,
            datum_waarneming_gte=datum_waarneming_gte,
            datum_waarneming_in=datum_waarneming_in,
            datum_waarneming_isnull=datum_waarneming_isnull,
            datum_waarneming_lt=datum_waarneming_lt,
            datum_waarneming_lte=datum_waarneming_lte,
            datum_waarneming_not=datum_waarneming_not,
            dumpplek=dumpplek,
            dumpplek_isnull=dumpplek_isnull,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            gbd_buurt_code=gbd_buurt_code,
            gbd_buurt_code_in=gbd_buurt_code_in,
            gbd_buurt_code_isempty=gbd_buurt_code_isempty,
            gbd_buurt_code_isnull=gbd_buurt_code_isnull,
            gbd_buurt_code_like=gbd_buurt_code_like,
            gbd_buurt_code_not=gbd_buurt_code_not,
            gbd_stadsdeel_naam=gbd_stadsdeel_naam,
            gbd_stadsdeel_naam_in=gbd_stadsdeel_naam_in,
            gbd_stadsdeel_naam_isempty=gbd_stadsdeel_naam_isempty,
            gbd_stadsdeel_naam_isnull=gbd_stadsdeel_naam_isnull,
            gbd_stadsdeel_naam_like=gbd_stadsdeel_naam_like,
            gbd_stadsdeel_naam_not=gbd_stadsdeel_naam_not,
            gebruikers_rol=gebruikers_rol,
            gebruikers_rol_in=gebruikers_rol_in,
            gebruikers_rol_isempty=gebruikers_rol_isempty,
            gebruikers_rol_isnull=gebruikers_rol_isnull,
            gebruikers_rol_like=gebruikers_rol_like,
            gebruikers_rol_not=gebruikers_rol_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            glas=glas,
            glas_isnull=glas_isnull,
            glasgestremd=glasgestremd,
            glasgestremd_isnull=glasgestremd_isnull,
            glastoegankelijk=glastoegankelijk,
            glastoegankelijk_isnull=glastoegankelijk_isnull,
            glasvol=glasvol,
            glasvol_isnull=glasvol_isnull,
            grof=grof,
            grof_isnull=grof_isnull,
            grofvuildagen=grofvuildagen,
            grofvuildagen_in=grofvuildagen_in,
            grofvuildagen_isempty=grofvuildagen_isempty,
            grofvuildagen_isnull=grofvuildagen_isnull,
            grofvuildagen_like=grofvuildagen_like,
            grofvuildagen_not=grofvuildagen_not,
            handhaving=handhaving,
            handhaving_isnull=handhaving_isnull,
            huisvuil=huisvuil,
            huisvuil_isnull=huisvuil_isnull,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            karton=karton,
            karton_isnull=karton_isnull,
            locatie_waarnemer=locatie_waarnemer,
            locatie_waarnemer_in=locatie_waarnemer_in,
            locatie_waarnemer_isempty=locatie_waarnemer_isempty,
            locatie_waarnemer_isnull=locatie_waarnemer_isnull,
            locatie_waarnemer_like=locatie_waarnemer_like,
            locatie_waarnemer_not=locatie_waarnemer_not,
            melding_door_collega_doorgezet=melding_door_collega_doorgezet,
            melding_door_collega_doorgezet_in=melding_door_collega_doorgezet_in,
            melding_door_collega_doorgezet_isempty=melding_door_collega_doorgezet_isempty,
            melding_door_collega_doorgezet_isnull=melding_door_collega_doorgezet_isnull,
            melding_door_collega_doorgezet_like=melding_door_collega_doorgezet_like,
            melding_door_collega_doorgezet_not=melding_door_collega_doorgezet_not,
            naam_melding_doorgezet=naam_melding_doorgezet,
            naam_melding_doorgezet_in=naam_melding_doorgezet_in,
            naam_melding_doorgezet_isempty=naam_melding_doorgezet_isempty,
            naam_melding_doorgezet_isnull=naam_melding_doorgezet_isnull,
            naam_melding_doorgezet_like=naam_melding_doorgezet_like,
            naam_melding_doorgezet_not=naam_melding_doorgezet_not,
            overig=overig,
            overig_isnull=overig_isnull,
            page=page,
            papiergestremd=papiergestremd,
            papiergestremd_isnull=papiergestremd_isnull,
            papiertoegankelijk=papiertoegankelijk,
            papiertoegankelijk_isnull=papiertoegankelijk_isnull,
            papiervol=papiervol,
            papiervol_isnull=papiervol_isnull,
            postcode=postcode,
            postcode_in=postcode_in,
            postcode_isempty=postcode_isempty,
            postcode_isnull=postcode_isnull,
            postcode_like=postcode_like,
            postcode_not=postcode_not,
            restgestremd=restgestremd,
            restgestremd_isnull=restgestremd_isnull,
            resttoegankelijk=resttoegankelijk,
            resttoegankelijk_isnull=resttoegankelijk_isnull,
            restvol=restvol,
            restvol_isnull=restvol_isnull,
            straatnaam=straatnaam,
            straatnaam_in=straatnaam_in,
            straatnaam_isempty=straatnaam_isempty,
            straatnaam_isnull=straatnaam_isnull,
            straatnaam_like=straatnaam_like,
            straatnaam_not=straatnaam_not,
            tijd_waarneming=tijd_waarneming,
            tijd_waarneming_gt=tijd_waarneming_gt,
            tijd_waarneming_gte=tijd_waarneming_gte,
            tijd_waarneming_in=tijd_waarneming_in,
            tijd_waarneming_isnull=tijd_waarneming_isnull,
            tijd_waarneming_lt=tijd_waarneming_lt,
            tijd_waarneming_lte=tijd_waarneming_lte,
            tijd_waarneming_not=tijd_waarneming_not,
            type_waarneming=type_waarneming,
            type_waarneming_in=type_waarneming_in,
            type_waarneming_isempty=type_waarneming_isempty,
            type_waarneming_isnull=type_waarneming_isnull,
            type_waarneming_like=type_waarneming_like,
            type_waarneming_not=type_waarneming_not,
            veegvuil=veegvuil,
            veegvuil_isnull=veegvuil_isnull,
            waarde_handhaving=waarde_handhaving,
            waarde_handhaving_in=waarde_handhaving_in,
            waarde_handhaving_isempty=waarde_handhaving_isempty,
            waarde_handhaving_isnull=waarde_handhaving_isnull,
            waarde_handhaving_like=waarde_handhaving_like,
            waarde_handhaving_not=waarde_handhaving_not,
            waarnemer_rol=waarnemer_rol,
            waarnemer_rol_in=waarnemer_rol_in,
            waarnemer_rol_isempty=waarnemer_rol_isempty,
            waarnemer_rol_isnull=waarnemer_rol_isnull,
            waarnemer_rol_like=waarnemer_rol_like,
            waarnemer_rol_not=waarnemer_rol_not,
            zwerfafval=zwerfafval,
            zwerfafval_isnull=zwerfafval_isnull,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalbijplaatsingenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def huishoudelijkafval_bijplaatsingen_list_slash_with_http_info(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        adres_type: Annotated[Optional[StrictStr], Field(description="Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. ")] = None,
        adres_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        adres_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        adres_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        adres_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        adres_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_woonplaats_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van een woonplaats")] = None,
        bag_woonplaats_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_woonplaats_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_woonplaats_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_woonplaats_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_woonplaats_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bruingoed: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (bruingoed) rondom de container(s)")] = None,
        bruingoed_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        containervies: Annotated[Optional[StrictBool], Field(description="De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt")] = None,
        containervies_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score: Annotated[Optional[StrictStr], Field(description="De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks")] = None,
        crow_score_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        crow_score_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        crow_score_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        crow_score_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_waarneming: Annotated[Optional[date], Field(description="De datum waarop de waarneming is geregistreerd.")] = None,
        datum_waarneming_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_waarneming_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_waarneming_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_waarneming_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        dumpplek: Annotated[Optional[StrictBool], Field(description="Het geeft aan of de locatie een dumpplek is.")] = None,
        dumpplek_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_buurt_code: Annotated[Optional[StrictStr], Field(description="Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)")] = None,
        gbd_buurt_code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_stadsdeel_naam: Annotated[Optional[StrictStr], Field(description="Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        gbd_stadsdeel_naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_stadsdeel_naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_stadsdeel_naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_stadsdeel_naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_stadsdeel_naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gebruikers_rol: Annotated[Optional[StrictStr], Field(description="De rol van de gebruiker in de applicatie.")] = None,
        gebruikers_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gebruikers_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gebruikers_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gebruikers_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gebruikers_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de waarneming RD(epsg:28992)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        glas: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (glas afval) rondom de container(s)")] = None,
        glas_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasgestremd: Annotated[Optional[StrictBool], Field(description="De glascontainer is gestremd")] = None,
        glasgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glastoegankelijk: Annotated[Optional[StrictBool], Field(description="De glascontainer is toegangelijk")] = None,
        glastoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasvol: Annotated[Optional[StrictBool], Field(description="De glascontainer is vol")] = None,
        glasvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grof: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (grofvuil) rondom de container(s)")] = None,
        grof_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen: Annotated[Optional[StrictStr], Field(description="De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.")] = None,
        grofvuildagen_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        grofvuildagen_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        grofvuildagen_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        grofvuildagen_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        handhaving: Annotated[Optional[StrictBool], Field(description="Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig")] = None,
        handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        huisvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (huisvuil) rondom de container(s)")] = None,
        huisvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het record.")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        karton: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (karton) rondom de container(s)")] = None,
        karton_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer: Annotated[Optional[StrictStr], Field(description="De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.")] = None,
        locatie_waarnemer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        locatie_waarnemer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        locatie_waarnemer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        locatie_waarnemer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        melding_door_collega_doorgezet: Annotated[Optional[StrictStr], Field(description="Het geeft aan of de waarneming door een collega is doorgezet.")] = None,
        melding_door_collega_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        melding_door_collega_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        melding_door_collega_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        melding_door_collega_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        melding_door_collega_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam_melding_doorgezet: Annotated[Optional[StrictStr], Field(description="Soort doorgezette waarneming.")] = None,
        naam_melding_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_melding_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_melding_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_melding_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_melding_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        overig: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (overig) rondom de container(s)")] = None,
        overig_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        papiergestremd: Annotated[Optional[StrictBool], Field(description="De papiercontainer is gestremd")] = None,
        papiergestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiertoegankelijk: Annotated[Optional[StrictBool], Field(description="De papiercontainer is toegankelijk")] = None,
        papiertoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiervol: Annotated[Optional[StrictBool], Field(description="De papiercontainer is vol")] = None,
        papiervol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        postcode_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        postcode_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        postcode_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        postcode_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        restgestremd: Annotated[Optional[StrictBool], Field(description="De restcontainer is gestremd")] = None,
        restgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        resttoegankelijk: Annotated[Optional[StrictBool], Field(description="De restcontainer is toegankelijk")] = None,
        resttoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        restvol: Annotated[Optional[StrictBool], Field(description="De restcontainer is vol")] = None,
        restvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam: Annotated[Optional[StrictStr], Field(description="De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).")] = None,
        straatnaam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        straatnaam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        straatnaam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        straatnaam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        tijd_waarneming: Annotated[Optional[StrictStr], Field(description="De tijdstip waarop de waarneming is geregistreerd.")] = None,
        tijd_waarneming_gt: Annotated[Optional[StrictStr], Field(description="Greater than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_gte: Annotated[Optional[StrictStr], Field(description="Greater than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        tijd_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        tijd_waarneming_lt: Annotated[Optional[StrictStr], Field(description="Less than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_lte: Annotated[Optional[StrictStr], Field(description="Less than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; use hh:mm[:ss[.ms]]")] = None,
        type_waarneming: Annotated[Optional[StrictStr], Field(description="Geeft aan of de waarneming een CROW waarneming is.")] = None,
        type_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        type_waarneming_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        type_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        type_waarneming_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        type_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        veegvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (veegvuil) rondom de container(s)")] = None,
        veegvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving: Annotated[Optional[StrictStr], Field(description="Hoe veel items met adresgegevens zijn er aangetroffen?")] = None,
        waarde_handhaving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarde_handhaving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarde_handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarde_handhaving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        waarnemer_rol: Annotated[Optional[StrictStr], Field(description="De rol van de melder")] = None,
        waarnemer_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarnemer_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarnemer_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarnemer_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarnemer_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        zwerfafval: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (zwerfafval) rondom de container(s)")] = None,
        zwerfafval_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedHuishoudelijkafvalbijplaatsingenList]:
        """huishoudelijkafval_bijplaatsingen_list_slash

        De Aanpak Bijplaatsingen (ABP) richt zich op afval dat op onjuiste wijze buiten wordt geplaatst. Momenteel wordt dit door de Gemeente Amsterdam op wijkniveau aangepakt via de ABP. Door communicatiemiddelen en interventies in te zetten rondom de meest vervuilde containerlocaties, neemt de netheid toe en daalt het aantal bijplaatsingen. Dit dataproduct bevat de registratie van bijplaatsingen zoals vastgelegd door de bevoegde medewerkers.

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param adres_type: Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. 
        :type adres_type: str
        :param adres_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type adres_type_in: List[str]
        :param adres_type_isempty: Whether the field is empty or not.
        :type adres_type_isempty: bool
        :param adres_type_isnull: Whether the field has a NULL value or not.
        :type adres_type_isnull: bool
        :param adres_type_like: Matches text using wildcards (? and *).
        :type adres_type_like: str
        :param adres_type_not: Exclude matches; text
        :type adres_type_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bag_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_verblijfsobject_identificatie: str
        :param bag_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_verblijfsobject_identificatie_in: List[str]
        :param bag_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_verblijfsobject_identificatie_isempty: bool
        :param bag_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_verblijfsobject_identificatie_isnull: bool
        :param bag_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_verblijfsobject_identificatie_like: str
        :param bag_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_verblijfsobject_identificatie_not: List[str]
        :param bag_woonplaats_identificatie: Unieke aanduiding van een woonplaats
        :type bag_woonplaats_identificatie: str
        :param bag_woonplaats_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_woonplaats_identificatie_in: List[str]
        :param bag_woonplaats_identificatie_isempty: Whether the field is empty or not.
        :type bag_woonplaats_identificatie_isempty: bool
        :param bag_woonplaats_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_woonplaats_identificatie_isnull: bool
        :param bag_woonplaats_identificatie_like: Matches text using wildcards (? and *).
        :type bag_woonplaats_identificatie_like: str
        :param bag_woonplaats_identificatie_not: Exclude matches; text
        :type bag_woonplaats_identificatie_not: List[str]
        :param bruingoed: Aangetroffen afvalsoort (bruingoed) rondom de container(s)
        :type bruingoed: bool
        :param bruingoed_isnull: Whether the field has a NULL value or not.
        :type bruingoed_isnull: bool
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param containervies: De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt
        :type containervies: bool
        :param containervies_isnull: Whether the field has a NULL value or not.
        :type containervies_isnull: bool
        :param crow_score: De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks
        :type crow_score: str
        :param crow_score_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type crow_score_in: List[str]
        :param crow_score_isempty: Whether the field is empty or not.
        :type crow_score_isempty: bool
        :param crow_score_isnull: Whether the field has a NULL value or not.
        :type crow_score_isnull: bool
        :param crow_score_like: Matches text using wildcards (? and *).
        :type crow_score_like: str
        :param crow_score_not: Exclude matches; text
        :type crow_score_not: List[str]
        :param datum_waarneming: De datum waarop de waarneming is geregistreerd.
        :type datum_waarneming: date
        :param datum_waarneming_gt: Greater than; use yyyy-mm-dd
        :type datum_waarneming_gt: date
        :param datum_waarneming_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_waarneming_gte: date
        :param datum_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_waarneming_in: List[date]
        :param datum_waarneming_isnull: Whether the field has a NULL value or not.
        :type datum_waarneming_isnull: bool
        :param datum_waarneming_lt: Less than; use yyyy-mm-dd
        :type datum_waarneming_lt: date
        :param datum_waarneming_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_waarneming_lte: date
        :param datum_waarneming_not: Exclude matches; use yyyy-mm-dd
        :type datum_waarneming_not: List[date]
        :param dumpplek: Het geeft aan of de locatie een dumpplek is.
        :type dumpplek: bool
        :param dumpplek_isnull: Whether the field has a NULL value or not.
        :type dumpplek_isnull: bool
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param gbd_buurt_code: Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)
        :type gbd_buurt_code: str
        :param gbd_buurt_code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_code_in: List[str]
        :param gbd_buurt_code_isempty: Whether the field is empty or not.
        :type gbd_buurt_code_isempty: bool
        :param gbd_buurt_code_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_code_isnull: bool
        :param gbd_buurt_code_like: Matches text using wildcards (? and *).
        :type gbd_buurt_code_like: str
        :param gbd_buurt_code_not: Exclude matches; text
        :type gbd_buurt_code_not: List[str]
        :param gbd_stadsdeel_naam: Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type gbd_stadsdeel_naam: str
        :param gbd_stadsdeel_naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_stadsdeel_naam_in: List[str]
        :param gbd_stadsdeel_naam_isempty: Whether the field is empty or not.
        :type gbd_stadsdeel_naam_isempty: bool
        :param gbd_stadsdeel_naam_isnull: Whether the field has a NULL value or not.
        :type gbd_stadsdeel_naam_isnull: bool
        :param gbd_stadsdeel_naam_like: Matches text using wildcards (? and *).
        :type gbd_stadsdeel_naam_like: str
        :param gbd_stadsdeel_naam_not: Exclude matches; text
        :type gbd_stadsdeel_naam_not: List[str]
        :param gebruikers_rol: De rol van de gebruiker in de applicatie.
        :type gebruikers_rol: str
        :param gebruikers_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gebruikers_rol_in: List[str]
        :param gebruikers_rol_isempty: Whether the field is empty or not.
        :type gebruikers_rol_isempty: bool
        :param gebruikers_rol_isnull: Whether the field has a NULL value or not.
        :type gebruikers_rol_isnull: bool
        :param gebruikers_rol_like: Matches text using wildcards (? and *).
        :type gebruikers_rol_like: str
        :param gebruikers_rol_not: Exclude matches; text
        :type gebruikers_rol_not: List[str]
        :param geometrie: Geometrie van het type POINT van de waarneming RD(epsg:28992)
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param glas: Aangetroffen afvalsoort (glas afval) rondom de container(s)
        :type glas: bool
        :param glas_isnull: Whether the field has a NULL value or not.
        :type glas_isnull: bool
        :param glasgestremd: De glascontainer is gestremd
        :type glasgestremd: bool
        :param glasgestremd_isnull: Whether the field has a NULL value or not.
        :type glasgestremd_isnull: bool
        :param glastoegankelijk: De glascontainer is toegangelijk
        :type glastoegankelijk: bool
        :param glastoegankelijk_isnull: Whether the field has a NULL value or not.
        :type glastoegankelijk_isnull: bool
        :param glasvol: De glascontainer is vol
        :type glasvol: bool
        :param glasvol_isnull: Whether the field has a NULL value or not.
        :type glasvol_isnull: bool
        :param grof: Aangetroffen afvalsoort (grofvuil) rondom de container(s)
        :type grof: bool
        :param grof_isnull: Whether the field has a NULL value or not.
        :type grof_isnull: bool
        :param grofvuildagen: De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.
        :type grofvuildagen: str
        :param grofvuildagen_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type grofvuildagen_in: List[str]
        :param grofvuildagen_isempty: Whether the field is empty or not.
        :type grofvuildagen_isempty: bool
        :param grofvuildagen_isnull: Whether the field has a NULL value or not.
        :type grofvuildagen_isnull: bool
        :param grofvuildagen_like: Matches text using wildcards (? and *).
        :type grofvuildagen_like: str
        :param grofvuildagen_not: Exclude matches; text
        :type grofvuildagen_not: List[str]
        :param handhaving: Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig
        :type handhaving: bool
        :param handhaving_isnull: Whether the field has a NULL value or not.
        :type handhaving_isnull: bool
        :param huisvuil: Aangetroffen afvalsoort (huisvuil) rondom de container(s)
        :type huisvuil: bool
        :param huisvuil_isnull: Whether the field has a NULL value or not.
        :type huisvuil_isnull: bool
        :param id: Unieke aanduiding van het record.
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param karton: Aangetroffen afvalsoort (karton) rondom de container(s)
        :type karton: bool
        :param karton_isnull: Whether the field has a NULL value or not.
        :type karton_isnull: bool
        :param locatie_waarnemer: De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.
        :type locatie_waarnemer: str
        :param locatie_waarnemer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type locatie_waarnemer_in: List[str]
        :param locatie_waarnemer_isempty: Whether the field is empty or not.
        :type locatie_waarnemer_isempty: bool
        :param locatie_waarnemer_isnull: Whether the field has a NULL value or not.
        :type locatie_waarnemer_isnull: bool
        :param locatie_waarnemer_like: Matches text using wildcards (? and *).
        :type locatie_waarnemer_like: str
        :param locatie_waarnemer_not: Exclude matches; text
        :type locatie_waarnemer_not: List[str]
        :param melding_door_collega_doorgezet: Het geeft aan of de waarneming door een collega is doorgezet.
        :type melding_door_collega_doorgezet: str
        :param melding_door_collega_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type melding_door_collega_doorgezet_in: List[str]
        :param melding_door_collega_doorgezet_isempty: Whether the field is empty or not.
        :type melding_door_collega_doorgezet_isempty: bool
        :param melding_door_collega_doorgezet_isnull: Whether the field has a NULL value or not.
        :type melding_door_collega_doorgezet_isnull: bool
        :param melding_door_collega_doorgezet_like: Matches text using wildcards (? and *).
        :type melding_door_collega_doorgezet_like: str
        :param melding_door_collega_doorgezet_not: Exclude matches; text
        :type melding_door_collega_doorgezet_not: List[str]
        :param naam_melding_doorgezet: Soort doorgezette waarneming.
        :type naam_melding_doorgezet: str
        :param naam_melding_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_melding_doorgezet_in: List[str]
        :param naam_melding_doorgezet_isempty: Whether the field is empty or not.
        :type naam_melding_doorgezet_isempty: bool
        :param naam_melding_doorgezet_isnull: Whether the field has a NULL value or not.
        :type naam_melding_doorgezet_isnull: bool
        :param naam_melding_doorgezet_like: Matches text using wildcards (? and *).
        :type naam_melding_doorgezet_like: str
        :param naam_melding_doorgezet_not: Exclude matches; text
        :type naam_melding_doorgezet_not: List[str]
        :param overig: Aangetroffen afvalsoort (overig) rondom de container(s)
        :type overig: bool
        :param overig_isnull: Whether the field has a NULL value or not.
        :type overig_isnull: bool
        :param page: A page number within the paginated result set.
        :type page: int
        :param papiergestremd: De papiercontainer is gestremd
        :type papiergestremd: bool
        :param papiergestremd_isnull: Whether the field has a NULL value or not.
        :type papiergestremd_isnull: bool
        :param papiertoegankelijk: De papiercontainer is toegankelijk
        :type papiertoegankelijk: bool
        :param papiertoegankelijk_isnull: Whether the field has a NULL value or not.
        :type papiertoegankelijk_isnull: bool
        :param papiervol: De papiercontainer is vol
        :type papiervol: bool
        :param papiervol_isnull: Whether the field has a NULL value or not.
        :type papiervol_isnull: bool
        :param postcode: De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type postcode: str
        :param postcode_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type postcode_in: List[str]
        :param postcode_isempty: Whether the field is empty or not.
        :type postcode_isempty: bool
        :param postcode_isnull: Whether the field has a NULL value or not.
        :type postcode_isnull: bool
        :param postcode_like: Matches text using wildcards (? and *).
        :type postcode_like: str
        :param postcode_not: Exclude matches; text
        :type postcode_not: List[str]
        :param restgestremd: De restcontainer is gestremd
        :type restgestremd: bool
        :param restgestremd_isnull: Whether the field has a NULL value or not.
        :type restgestremd_isnull: bool
        :param resttoegankelijk: De restcontainer is toegankelijk
        :type resttoegankelijk: bool
        :param resttoegankelijk_isnull: Whether the field has a NULL value or not.
        :type resttoegankelijk_isnull: bool
        :param restvol: De restcontainer is vol
        :type restvol: bool
        :param restvol_isnull: Whether the field has a NULL value or not.
        :type restvol_isnull: bool
        :param straatnaam: De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).
        :type straatnaam: str
        :param straatnaam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type straatnaam_in: List[str]
        :param straatnaam_isempty: Whether the field is empty or not.
        :type straatnaam_isempty: bool
        :param straatnaam_isnull: Whether the field has a NULL value or not.
        :type straatnaam_isnull: bool
        :param straatnaam_like: Matches text using wildcards (? and *).
        :type straatnaam_like: str
        :param straatnaam_not: Exclude matches; text
        :type straatnaam_not: List[str]
        :param tijd_waarneming: De tijdstip waarop de waarneming is geregistreerd.
        :type tijd_waarneming: str
        :param tijd_waarneming_gt: Greater than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gt: str
        :param tijd_waarneming_gte: Greater than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gte: str
        :param tijd_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type tijd_waarneming_in: List[str]
        :param tijd_waarneming_isnull: Whether the field has a NULL value or not.
        :type tijd_waarneming_isnull: bool
        :param tijd_waarneming_lt: Less than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lt: str
        :param tijd_waarneming_lte: Less than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lte: str
        :param tijd_waarneming_not: Exclude matches; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_not: List[str]
        :param type_waarneming: Geeft aan of de waarneming een CROW waarneming is.
        :type type_waarneming: str
        :param type_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type type_waarneming_in: List[str]
        :param type_waarneming_isempty: Whether the field is empty or not.
        :type type_waarneming_isempty: bool
        :param type_waarneming_isnull: Whether the field has a NULL value or not.
        :type type_waarneming_isnull: bool
        :param type_waarneming_like: Matches text using wildcards (? and *).
        :type type_waarneming_like: str
        :param type_waarneming_not: Exclude matches; text
        :type type_waarneming_not: List[str]
        :param veegvuil: Aangetroffen afvalsoort (veegvuil) rondom de container(s)
        :type veegvuil: bool
        :param veegvuil_isnull: Whether the field has a NULL value or not.
        :type veegvuil_isnull: bool
        :param waarde_handhaving: Hoe veel items met adresgegevens zijn er aangetroffen?
        :type waarde_handhaving: str
        :param waarde_handhaving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarde_handhaving_in: List[str]
        :param waarde_handhaving_isempty: Whether the field is empty or not.
        :type waarde_handhaving_isempty: bool
        :param waarde_handhaving_isnull: Whether the field has a NULL value or not.
        :type waarde_handhaving_isnull: bool
        :param waarde_handhaving_like: Matches text using wildcards (? and *).
        :type waarde_handhaving_like: str
        :param waarde_handhaving_not: Exclude matches; text
        :type waarde_handhaving_not: List[str]
        :param waarnemer_rol: De rol van de melder
        :type waarnemer_rol: str
        :param waarnemer_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarnemer_rol_in: List[str]
        :param waarnemer_rol_isempty: Whether the field is empty or not.
        :type waarnemer_rol_isempty: bool
        :param waarnemer_rol_isnull: Whether the field has a NULL value or not.
        :type waarnemer_rol_isnull: bool
        :param waarnemer_rol_like: Matches text using wildcards (? and *).
        :type waarnemer_rol_like: str
        :param waarnemer_rol_not: Exclude matches; text
        :type waarnemer_rol_not: List[str]
        :param zwerfafval: Aangetroffen afvalsoort (zwerfafval) rondom de container(s)
        :type zwerfafval: bool
        :param zwerfafval_isnull: Whether the field has a NULL value or not.
        :type zwerfafval_isnull: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bijplaatsingen_list_slash_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            adres_type=adres_type,
            adres_type_in=adres_type_in,
            adres_type_isempty=adres_type_isempty,
            adres_type_isnull=adres_type_isnull,
            adres_type_like=adres_type_like,
            adres_type_not=adres_type_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bag_verblijfsobject_identificatie=bag_verblijfsobject_identificatie,
            bag_verblijfsobject_identificatie_in=bag_verblijfsobject_identificatie_in,
            bag_verblijfsobject_identificatie_isempty=bag_verblijfsobject_identificatie_isempty,
            bag_verblijfsobject_identificatie_isnull=bag_verblijfsobject_identificatie_isnull,
            bag_verblijfsobject_identificatie_like=bag_verblijfsobject_identificatie_like,
            bag_verblijfsobject_identificatie_not=bag_verblijfsobject_identificatie_not,
            bag_woonplaats_identificatie=bag_woonplaats_identificatie,
            bag_woonplaats_identificatie_in=bag_woonplaats_identificatie_in,
            bag_woonplaats_identificatie_isempty=bag_woonplaats_identificatie_isempty,
            bag_woonplaats_identificatie_isnull=bag_woonplaats_identificatie_isnull,
            bag_woonplaats_identificatie_like=bag_woonplaats_identificatie_like,
            bag_woonplaats_identificatie_not=bag_woonplaats_identificatie_not,
            bruingoed=bruingoed,
            bruingoed_isnull=bruingoed_isnull,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            containervies=containervies,
            containervies_isnull=containervies_isnull,
            crow_score=crow_score,
            crow_score_in=crow_score_in,
            crow_score_isempty=crow_score_isempty,
            crow_score_isnull=crow_score_isnull,
            crow_score_like=crow_score_like,
            crow_score_not=crow_score_not,
            datum_waarneming=datum_waarneming,
            datum_waarneming_gt=datum_waarneming_gt,
            datum_waarneming_gte=datum_waarneming_gte,
            datum_waarneming_in=datum_waarneming_in,
            datum_waarneming_isnull=datum_waarneming_isnull,
            datum_waarneming_lt=datum_waarneming_lt,
            datum_waarneming_lte=datum_waarneming_lte,
            datum_waarneming_not=datum_waarneming_not,
            dumpplek=dumpplek,
            dumpplek_isnull=dumpplek_isnull,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            gbd_buurt_code=gbd_buurt_code,
            gbd_buurt_code_in=gbd_buurt_code_in,
            gbd_buurt_code_isempty=gbd_buurt_code_isempty,
            gbd_buurt_code_isnull=gbd_buurt_code_isnull,
            gbd_buurt_code_like=gbd_buurt_code_like,
            gbd_buurt_code_not=gbd_buurt_code_not,
            gbd_stadsdeel_naam=gbd_stadsdeel_naam,
            gbd_stadsdeel_naam_in=gbd_stadsdeel_naam_in,
            gbd_stadsdeel_naam_isempty=gbd_stadsdeel_naam_isempty,
            gbd_stadsdeel_naam_isnull=gbd_stadsdeel_naam_isnull,
            gbd_stadsdeel_naam_like=gbd_stadsdeel_naam_like,
            gbd_stadsdeel_naam_not=gbd_stadsdeel_naam_not,
            gebruikers_rol=gebruikers_rol,
            gebruikers_rol_in=gebruikers_rol_in,
            gebruikers_rol_isempty=gebruikers_rol_isempty,
            gebruikers_rol_isnull=gebruikers_rol_isnull,
            gebruikers_rol_like=gebruikers_rol_like,
            gebruikers_rol_not=gebruikers_rol_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            glas=glas,
            glas_isnull=glas_isnull,
            glasgestremd=glasgestremd,
            glasgestremd_isnull=glasgestremd_isnull,
            glastoegankelijk=glastoegankelijk,
            glastoegankelijk_isnull=glastoegankelijk_isnull,
            glasvol=glasvol,
            glasvol_isnull=glasvol_isnull,
            grof=grof,
            grof_isnull=grof_isnull,
            grofvuildagen=grofvuildagen,
            grofvuildagen_in=grofvuildagen_in,
            grofvuildagen_isempty=grofvuildagen_isempty,
            grofvuildagen_isnull=grofvuildagen_isnull,
            grofvuildagen_like=grofvuildagen_like,
            grofvuildagen_not=grofvuildagen_not,
            handhaving=handhaving,
            handhaving_isnull=handhaving_isnull,
            huisvuil=huisvuil,
            huisvuil_isnull=huisvuil_isnull,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            karton=karton,
            karton_isnull=karton_isnull,
            locatie_waarnemer=locatie_waarnemer,
            locatie_waarnemer_in=locatie_waarnemer_in,
            locatie_waarnemer_isempty=locatie_waarnemer_isempty,
            locatie_waarnemer_isnull=locatie_waarnemer_isnull,
            locatie_waarnemer_like=locatie_waarnemer_like,
            locatie_waarnemer_not=locatie_waarnemer_not,
            melding_door_collega_doorgezet=melding_door_collega_doorgezet,
            melding_door_collega_doorgezet_in=melding_door_collega_doorgezet_in,
            melding_door_collega_doorgezet_isempty=melding_door_collega_doorgezet_isempty,
            melding_door_collega_doorgezet_isnull=melding_door_collega_doorgezet_isnull,
            melding_door_collega_doorgezet_like=melding_door_collega_doorgezet_like,
            melding_door_collega_doorgezet_not=melding_door_collega_doorgezet_not,
            naam_melding_doorgezet=naam_melding_doorgezet,
            naam_melding_doorgezet_in=naam_melding_doorgezet_in,
            naam_melding_doorgezet_isempty=naam_melding_doorgezet_isempty,
            naam_melding_doorgezet_isnull=naam_melding_doorgezet_isnull,
            naam_melding_doorgezet_like=naam_melding_doorgezet_like,
            naam_melding_doorgezet_not=naam_melding_doorgezet_not,
            overig=overig,
            overig_isnull=overig_isnull,
            page=page,
            papiergestremd=papiergestremd,
            papiergestremd_isnull=papiergestremd_isnull,
            papiertoegankelijk=papiertoegankelijk,
            papiertoegankelijk_isnull=papiertoegankelijk_isnull,
            papiervol=papiervol,
            papiervol_isnull=papiervol_isnull,
            postcode=postcode,
            postcode_in=postcode_in,
            postcode_isempty=postcode_isempty,
            postcode_isnull=postcode_isnull,
            postcode_like=postcode_like,
            postcode_not=postcode_not,
            restgestremd=restgestremd,
            restgestremd_isnull=restgestremd_isnull,
            resttoegankelijk=resttoegankelijk,
            resttoegankelijk_isnull=resttoegankelijk_isnull,
            restvol=restvol,
            restvol_isnull=restvol_isnull,
            straatnaam=straatnaam,
            straatnaam_in=straatnaam_in,
            straatnaam_isempty=straatnaam_isempty,
            straatnaam_isnull=straatnaam_isnull,
            straatnaam_like=straatnaam_like,
            straatnaam_not=straatnaam_not,
            tijd_waarneming=tijd_waarneming,
            tijd_waarneming_gt=tijd_waarneming_gt,
            tijd_waarneming_gte=tijd_waarneming_gte,
            tijd_waarneming_in=tijd_waarneming_in,
            tijd_waarneming_isnull=tijd_waarneming_isnull,
            tijd_waarneming_lt=tijd_waarneming_lt,
            tijd_waarneming_lte=tijd_waarneming_lte,
            tijd_waarneming_not=tijd_waarneming_not,
            type_waarneming=type_waarneming,
            type_waarneming_in=type_waarneming_in,
            type_waarneming_isempty=type_waarneming_isempty,
            type_waarneming_isnull=type_waarneming_isnull,
            type_waarneming_like=type_waarneming_like,
            type_waarneming_not=type_waarneming_not,
            veegvuil=veegvuil,
            veegvuil_isnull=veegvuil_isnull,
            waarde_handhaving=waarde_handhaving,
            waarde_handhaving_in=waarde_handhaving_in,
            waarde_handhaving_isempty=waarde_handhaving_isempty,
            waarde_handhaving_isnull=waarde_handhaving_isnull,
            waarde_handhaving_like=waarde_handhaving_like,
            waarde_handhaving_not=waarde_handhaving_not,
            waarnemer_rol=waarnemer_rol,
            waarnemer_rol_in=waarnemer_rol_in,
            waarnemer_rol_isempty=waarnemer_rol_isempty,
            waarnemer_rol_isnull=waarnemer_rol_isnull,
            waarnemer_rol_like=waarnemer_rol_like,
            waarnemer_rol_not=waarnemer_rol_not,
            zwerfafval=zwerfafval,
            zwerfafval_isnull=zwerfafval_isnull,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalbijplaatsingenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def huishoudelijkafval_bijplaatsingen_list_slash_without_preload_content(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        adres_type: Annotated[Optional[StrictStr], Field(description="Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. ")] = None,
        adres_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        adres_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        adres_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        adres_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        adres_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_woonplaats_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van een woonplaats")] = None,
        bag_woonplaats_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_woonplaats_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_woonplaats_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_woonplaats_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_woonplaats_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bruingoed: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (bruingoed) rondom de container(s)")] = None,
        bruingoed_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        containervies: Annotated[Optional[StrictBool], Field(description="De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt")] = None,
        containervies_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score: Annotated[Optional[StrictStr], Field(description="De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks")] = None,
        crow_score_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        crow_score_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        crow_score_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        crow_score_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_waarneming: Annotated[Optional[date], Field(description="De datum waarop de waarneming is geregistreerd.")] = None,
        datum_waarneming_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_waarneming_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_waarneming_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_waarneming_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        dumpplek: Annotated[Optional[StrictBool], Field(description="Het geeft aan of de locatie een dumpplek is.")] = None,
        dumpplek_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_buurt_code: Annotated[Optional[StrictStr], Field(description="Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)")] = None,
        gbd_buurt_code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_stadsdeel_naam: Annotated[Optional[StrictStr], Field(description="Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        gbd_stadsdeel_naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_stadsdeel_naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_stadsdeel_naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_stadsdeel_naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_stadsdeel_naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gebruikers_rol: Annotated[Optional[StrictStr], Field(description="De rol van de gebruiker in de applicatie.")] = None,
        gebruikers_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gebruikers_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gebruikers_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gebruikers_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gebruikers_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de waarneming RD(epsg:28992)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        glas: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (glas afval) rondom de container(s)")] = None,
        glas_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasgestremd: Annotated[Optional[StrictBool], Field(description="De glascontainer is gestremd")] = None,
        glasgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glastoegankelijk: Annotated[Optional[StrictBool], Field(description="De glascontainer is toegangelijk")] = None,
        glastoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasvol: Annotated[Optional[StrictBool], Field(description="De glascontainer is vol")] = None,
        glasvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grof: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (grofvuil) rondom de container(s)")] = None,
        grof_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen: Annotated[Optional[StrictStr], Field(description="De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.")] = None,
        grofvuildagen_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        grofvuildagen_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        grofvuildagen_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        grofvuildagen_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        handhaving: Annotated[Optional[StrictBool], Field(description="Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig")] = None,
        handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        huisvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (huisvuil) rondom de container(s)")] = None,
        huisvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het record.")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        karton: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (karton) rondom de container(s)")] = None,
        karton_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer: Annotated[Optional[StrictStr], Field(description="De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.")] = None,
        locatie_waarnemer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        locatie_waarnemer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        locatie_waarnemer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        locatie_waarnemer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        melding_door_collega_doorgezet: Annotated[Optional[StrictStr], Field(description="Het geeft aan of de waarneming door een collega is doorgezet.")] = None,
        melding_door_collega_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        melding_door_collega_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        melding_door_collega_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        melding_door_collega_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        melding_door_collega_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam_melding_doorgezet: Annotated[Optional[StrictStr], Field(description="Soort doorgezette waarneming.")] = None,
        naam_melding_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_melding_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_melding_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_melding_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_melding_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        overig: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (overig) rondom de container(s)")] = None,
        overig_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        papiergestremd: Annotated[Optional[StrictBool], Field(description="De papiercontainer is gestremd")] = None,
        papiergestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiertoegankelijk: Annotated[Optional[StrictBool], Field(description="De papiercontainer is toegankelijk")] = None,
        papiertoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiervol: Annotated[Optional[StrictBool], Field(description="De papiercontainer is vol")] = None,
        papiervol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        postcode_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        postcode_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        postcode_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        postcode_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        restgestremd: Annotated[Optional[StrictBool], Field(description="De restcontainer is gestremd")] = None,
        restgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        resttoegankelijk: Annotated[Optional[StrictBool], Field(description="De restcontainer is toegankelijk")] = None,
        resttoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        restvol: Annotated[Optional[StrictBool], Field(description="De restcontainer is vol")] = None,
        restvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam: Annotated[Optional[StrictStr], Field(description="De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).")] = None,
        straatnaam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        straatnaam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        straatnaam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        straatnaam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        tijd_waarneming: Annotated[Optional[StrictStr], Field(description="De tijdstip waarop de waarneming is geregistreerd.")] = None,
        tijd_waarneming_gt: Annotated[Optional[StrictStr], Field(description="Greater than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_gte: Annotated[Optional[StrictStr], Field(description="Greater than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        tijd_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        tijd_waarneming_lt: Annotated[Optional[StrictStr], Field(description="Less than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_lte: Annotated[Optional[StrictStr], Field(description="Less than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; use hh:mm[:ss[.ms]]")] = None,
        type_waarneming: Annotated[Optional[StrictStr], Field(description="Geeft aan of de waarneming een CROW waarneming is.")] = None,
        type_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        type_waarneming_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        type_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        type_waarneming_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        type_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        veegvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (veegvuil) rondom de container(s)")] = None,
        veegvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving: Annotated[Optional[StrictStr], Field(description="Hoe veel items met adresgegevens zijn er aangetroffen?")] = None,
        waarde_handhaving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarde_handhaving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarde_handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarde_handhaving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        waarnemer_rol: Annotated[Optional[StrictStr], Field(description="De rol van de melder")] = None,
        waarnemer_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarnemer_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarnemer_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarnemer_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarnemer_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        zwerfafval: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (zwerfafval) rondom de container(s)")] = None,
        zwerfafval_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """huishoudelijkafval_bijplaatsingen_list_slash

        De Aanpak Bijplaatsingen (ABP) richt zich op afval dat op onjuiste wijze buiten wordt geplaatst. Momenteel wordt dit door de Gemeente Amsterdam op wijkniveau aangepakt via de ABP. Door communicatiemiddelen en interventies in te zetten rondom de meest vervuilde containerlocaties, neemt de netheid toe en daalt het aantal bijplaatsingen. Dit dataproduct bevat de registratie van bijplaatsingen zoals vastgelegd door de bevoegde medewerkers.

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param adres_type: Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. 
        :type adres_type: str
        :param adres_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type adres_type_in: List[str]
        :param adres_type_isempty: Whether the field is empty or not.
        :type adres_type_isempty: bool
        :param adres_type_isnull: Whether the field has a NULL value or not.
        :type adres_type_isnull: bool
        :param adres_type_like: Matches text using wildcards (? and *).
        :type adres_type_like: str
        :param adres_type_not: Exclude matches; text
        :type adres_type_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bag_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_verblijfsobject_identificatie: str
        :param bag_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_verblijfsobject_identificatie_in: List[str]
        :param bag_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_verblijfsobject_identificatie_isempty: bool
        :param bag_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_verblijfsobject_identificatie_isnull: bool
        :param bag_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_verblijfsobject_identificatie_like: str
        :param bag_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_verblijfsobject_identificatie_not: List[str]
        :param bag_woonplaats_identificatie: Unieke aanduiding van een woonplaats
        :type bag_woonplaats_identificatie: str
        :param bag_woonplaats_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_woonplaats_identificatie_in: List[str]
        :param bag_woonplaats_identificatie_isempty: Whether the field is empty or not.
        :type bag_woonplaats_identificatie_isempty: bool
        :param bag_woonplaats_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_woonplaats_identificatie_isnull: bool
        :param bag_woonplaats_identificatie_like: Matches text using wildcards (? and *).
        :type bag_woonplaats_identificatie_like: str
        :param bag_woonplaats_identificatie_not: Exclude matches; text
        :type bag_woonplaats_identificatie_not: List[str]
        :param bruingoed: Aangetroffen afvalsoort (bruingoed) rondom de container(s)
        :type bruingoed: bool
        :param bruingoed_isnull: Whether the field has a NULL value or not.
        :type bruingoed_isnull: bool
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param containervies: De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt
        :type containervies: bool
        :param containervies_isnull: Whether the field has a NULL value or not.
        :type containervies_isnull: bool
        :param crow_score: De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks
        :type crow_score: str
        :param crow_score_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type crow_score_in: List[str]
        :param crow_score_isempty: Whether the field is empty or not.
        :type crow_score_isempty: bool
        :param crow_score_isnull: Whether the field has a NULL value or not.
        :type crow_score_isnull: bool
        :param crow_score_like: Matches text using wildcards (? and *).
        :type crow_score_like: str
        :param crow_score_not: Exclude matches; text
        :type crow_score_not: List[str]
        :param datum_waarneming: De datum waarop de waarneming is geregistreerd.
        :type datum_waarneming: date
        :param datum_waarneming_gt: Greater than; use yyyy-mm-dd
        :type datum_waarneming_gt: date
        :param datum_waarneming_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_waarneming_gte: date
        :param datum_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_waarneming_in: List[date]
        :param datum_waarneming_isnull: Whether the field has a NULL value or not.
        :type datum_waarneming_isnull: bool
        :param datum_waarneming_lt: Less than; use yyyy-mm-dd
        :type datum_waarneming_lt: date
        :param datum_waarneming_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_waarneming_lte: date
        :param datum_waarneming_not: Exclude matches; use yyyy-mm-dd
        :type datum_waarneming_not: List[date]
        :param dumpplek: Het geeft aan of de locatie een dumpplek is.
        :type dumpplek: bool
        :param dumpplek_isnull: Whether the field has a NULL value or not.
        :type dumpplek_isnull: bool
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param gbd_buurt_code: Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)
        :type gbd_buurt_code: str
        :param gbd_buurt_code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_code_in: List[str]
        :param gbd_buurt_code_isempty: Whether the field is empty or not.
        :type gbd_buurt_code_isempty: bool
        :param gbd_buurt_code_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_code_isnull: bool
        :param gbd_buurt_code_like: Matches text using wildcards (? and *).
        :type gbd_buurt_code_like: str
        :param gbd_buurt_code_not: Exclude matches; text
        :type gbd_buurt_code_not: List[str]
        :param gbd_stadsdeel_naam: Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type gbd_stadsdeel_naam: str
        :param gbd_stadsdeel_naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_stadsdeel_naam_in: List[str]
        :param gbd_stadsdeel_naam_isempty: Whether the field is empty or not.
        :type gbd_stadsdeel_naam_isempty: bool
        :param gbd_stadsdeel_naam_isnull: Whether the field has a NULL value or not.
        :type gbd_stadsdeel_naam_isnull: bool
        :param gbd_stadsdeel_naam_like: Matches text using wildcards (? and *).
        :type gbd_stadsdeel_naam_like: str
        :param gbd_stadsdeel_naam_not: Exclude matches; text
        :type gbd_stadsdeel_naam_not: List[str]
        :param gebruikers_rol: De rol van de gebruiker in de applicatie.
        :type gebruikers_rol: str
        :param gebruikers_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gebruikers_rol_in: List[str]
        :param gebruikers_rol_isempty: Whether the field is empty or not.
        :type gebruikers_rol_isempty: bool
        :param gebruikers_rol_isnull: Whether the field has a NULL value or not.
        :type gebruikers_rol_isnull: bool
        :param gebruikers_rol_like: Matches text using wildcards (? and *).
        :type gebruikers_rol_like: str
        :param gebruikers_rol_not: Exclude matches; text
        :type gebruikers_rol_not: List[str]
        :param geometrie: Geometrie van het type POINT van de waarneming RD(epsg:28992)
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param glas: Aangetroffen afvalsoort (glas afval) rondom de container(s)
        :type glas: bool
        :param glas_isnull: Whether the field has a NULL value or not.
        :type glas_isnull: bool
        :param glasgestremd: De glascontainer is gestremd
        :type glasgestremd: bool
        :param glasgestremd_isnull: Whether the field has a NULL value or not.
        :type glasgestremd_isnull: bool
        :param glastoegankelijk: De glascontainer is toegangelijk
        :type glastoegankelijk: bool
        :param glastoegankelijk_isnull: Whether the field has a NULL value or not.
        :type glastoegankelijk_isnull: bool
        :param glasvol: De glascontainer is vol
        :type glasvol: bool
        :param glasvol_isnull: Whether the field has a NULL value or not.
        :type glasvol_isnull: bool
        :param grof: Aangetroffen afvalsoort (grofvuil) rondom de container(s)
        :type grof: bool
        :param grof_isnull: Whether the field has a NULL value or not.
        :type grof_isnull: bool
        :param grofvuildagen: De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.
        :type grofvuildagen: str
        :param grofvuildagen_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type grofvuildagen_in: List[str]
        :param grofvuildagen_isempty: Whether the field is empty or not.
        :type grofvuildagen_isempty: bool
        :param grofvuildagen_isnull: Whether the field has a NULL value or not.
        :type grofvuildagen_isnull: bool
        :param grofvuildagen_like: Matches text using wildcards (? and *).
        :type grofvuildagen_like: str
        :param grofvuildagen_not: Exclude matches; text
        :type grofvuildagen_not: List[str]
        :param handhaving: Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig
        :type handhaving: bool
        :param handhaving_isnull: Whether the field has a NULL value or not.
        :type handhaving_isnull: bool
        :param huisvuil: Aangetroffen afvalsoort (huisvuil) rondom de container(s)
        :type huisvuil: bool
        :param huisvuil_isnull: Whether the field has a NULL value or not.
        :type huisvuil_isnull: bool
        :param id: Unieke aanduiding van het record.
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param karton: Aangetroffen afvalsoort (karton) rondom de container(s)
        :type karton: bool
        :param karton_isnull: Whether the field has a NULL value or not.
        :type karton_isnull: bool
        :param locatie_waarnemer: De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.
        :type locatie_waarnemer: str
        :param locatie_waarnemer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type locatie_waarnemer_in: List[str]
        :param locatie_waarnemer_isempty: Whether the field is empty or not.
        :type locatie_waarnemer_isempty: bool
        :param locatie_waarnemer_isnull: Whether the field has a NULL value or not.
        :type locatie_waarnemer_isnull: bool
        :param locatie_waarnemer_like: Matches text using wildcards (? and *).
        :type locatie_waarnemer_like: str
        :param locatie_waarnemer_not: Exclude matches; text
        :type locatie_waarnemer_not: List[str]
        :param melding_door_collega_doorgezet: Het geeft aan of de waarneming door een collega is doorgezet.
        :type melding_door_collega_doorgezet: str
        :param melding_door_collega_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type melding_door_collega_doorgezet_in: List[str]
        :param melding_door_collega_doorgezet_isempty: Whether the field is empty or not.
        :type melding_door_collega_doorgezet_isempty: bool
        :param melding_door_collega_doorgezet_isnull: Whether the field has a NULL value or not.
        :type melding_door_collega_doorgezet_isnull: bool
        :param melding_door_collega_doorgezet_like: Matches text using wildcards (? and *).
        :type melding_door_collega_doorgezet_like: str
        :param melding_door_collega_doorgezet_not: Exclude matches; text
        :type melding_door_collega_doorgezet_not: List[str]
        :param naam_melding_doorgezet: Soort doorgezette waarneming.
        :type naam_melding_doorgezet: str
        :param naam_melding_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_melding_doorgezet_in: List[str]
        :param naam_melding_doorgezet_isempty: Whether the field is empty or not.
        :type naam_melding_doorgezet_isempty: bool
        :param naam_melding_doorgezet_isnull: Whether the field has a NULL value or not.
        :type naam_melding_doorgezet_isnull: bool
        :param naam_melding_doorgezet_like: Matches text using wildcards (? and *).
        :type naam_melding_doorgezet_like: str
        :param naam_melding_doorgezet_not: Exclude matches; text
        :type naam_melding_doorgezet_not: List[str]
        :param overig: Aangetroffen afvalsoort (overig) rondom de container(s)
        :type overig: bool
        :param overig_isnull: Whether the field has a NULL value or not.
        :type overig_isnull: bool
        :param page: A page number within the paginated result set.
        :type page: int
        :param papiergestremd: De papiercontainer is gestremd
        :type papiergestremd: bool
        :param papiergestremd_isnull: Whether the field has a NULL value or not.
        :type papiergestremd_isnull: bool
        :param papiertoegankelijk: De papiercontainer is toegankelijk
        :type papiertoegankelijk: bool
        :param papiertoegankelijk_isnull: Whether the field has a NULL value or not.
        :type papiertoegankelijk_isnull: bool
        :param papiervol: De papiercontainer is vol
        :type papiervol: bool
        :param papiervol_isnull: Whether the field has a NULL value or not.
        :type papiervol_isnull: bool
        :param postcode: De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type postcode: str
        :param postcode_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type postcode_in: List[str]
        :param postcode_isempty: Whether the field is empty or not.
        :type postcode_isempty: bool
        :param postcode_isnull: Whether the field has a NULL value or not.
        :type postcode_isnull: bool
        :param postcode_like: Matches text using wildcards (? and *).
        :type postcode_like: str
        :param postcode_not: Exclude matches; text
        :type postcode_not: List[str]
        :param restgestremd: De restcontainer is gestremd
        :type restgestremd: bool
        :param restgestremd_isnull: Whether the field has a NULL value or not.
        :type restgestremd_isnull: bool
        :param resttoegankelijk: De restcontainer is toegankelijk
        :type resttoegankelijk: bool
        :param resttoegankelijk_isnull: Whether the field has a NULL value or not.
        :type resttoegankelijk_isnull: bool
        :param restvol: De restcontainer is vol
        :type restvol: bool
        :param restvol_isnull: Whether the field has a NULL value or not.
        :type restvol_isnull: bool
        :param straatnaam: De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).
        :type straatnaam: str
        :param straatnaam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type straatnaam_in: List[str]
        :param straatnaam_isempty: Whether the field is empty or not.
        :type straatnaam_isempty: bool
        :param straatnaam_isnull: Whether the field has a NULL value or not.
        :type straatnaam_isnull: bool
        :param straatnaam_like: Matches text using wildcards (? and *).
        :type straatnaam_like: str
        :param straatnaam_not: Exclude matches; text
        :type straatnaam_not: List[str]
        :param tijd_waarneming: De tijdstip waarop de waarneming is geregistreerd.
        :type tijd_waarneming: str
        :param tijd_waarneming_gt: Greater than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gt: str
        :param tijd_waarneming_gte: Greater than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gte: str
        :param tijd_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type tijd_waarneming_in: List[str]
        :param tijd_waarneming_isnull: Whether the field has a NULL value or not.
        :type tijd_waarneming_isnull: bool
        :param tijd_waarneming_lt: Less than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lt: str
        :param tijd_waarneming_lte: Less than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lte: str
        :param tijd_waarneming_not: Exclude matches; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_not: List[str]
        :param type_waarneming: Geeft aan of de waarneming een CROW waarneming is.
        :type type_waarneming: str
        :param type_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type type_waarneming_in: List[str]
        :param type_waarneming_isempty: Whether the field is empty or not.
        :type type_waarneming_isempty: bool
        :param type_waarneming_isnull: Whether the field has a NULL value or not.
        :type type_waarneming_isnull: bool
        :param type_waarneming_like: Matches text using wildcards (? and *).
        :type type_waarneming_like: str
        :param type_waarneming_not: Exclude matches; text
        :type type_waarneming_not: List[str]
        :param veegvuil: Aangetroffen afvalsoort (veegvuil) rondom de container(s)
        :type veegvuil: bool
        :param veegvuil_isnull: Whether the field has a NULL value or not.
        :type veegvuil_isnull: bool
        :param waarde_handhaving: Hoe veel items met adresgegevens zijn er aangetroffen?
        :type waarde_handhaving: str
        :param waarde_handhaving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarde_handhaving_in: List[str]
        :param waarde_handhaving_isempty: Whether the field is empty or not.
        :type waarde_handhaving_isempty: bool
        :param waarde_handhaving_isnull: Whether the field has a NULL value or not.
        :type waarde_handhaving_isnull: bool
        :param waarde_handhaving_like: Matches text using wildcards (? and *).
        :type waarde_handhaving_like: str
        :param waarde_handhaving_not: Exclude matches; text
        :type waarde_handhaving_not: List[str]
        :param waarnemer_rol: De rol van de melder
        :type waarnemer_rol: str
        :param waarnemer_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarnemer_rol_in: List[str]
        :param waarnemer_rol_isempty: Whether the field is empty or not.
        :type waarnemer_rol_isempty: bool
        :param waarnemer_rol_isnull: Whether the field has a NULL value or not.
        :type waarnemer_rol_isnull: bool
        :param waarnemer_rol_like: Matches text using wildcards (? and *).
        :type waarnemer_rol_like: str
        :param waarnemer_rol_not: Exclude matches; text
        :type waarnemer_rol_not: List[str]
        :param zwerfafval: Aangetroffen afvalsoort (zwerfafval) rondom de container(s)
        :type zwerfafval: bool
        :param zwerfafval_isnull: Whether the field has a NULL value or not.
        :type zwerfafval_isnull: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bijplaatsingen_list_slash_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            adres_type=adres_type,
            adres_type_in=adres_type_in,
            adres_type_isempty=adres_type_isempty,
            adres_type_isnull=adres_type_isnull,
            adres_type_like=adres_type_like,
            adres_type_not=adres_type_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bag_verblijfsobject_identificatie=bag_verblijfsobject_identificatie,
            bag_verblijfsobject_identificatie_in=bag_verblijfsobject_identificatie_in,
            bag_verblijfsobject_identificatie_isempty=bag_verblijfsobject_identificatie_isempty,
            bag_verblijfsobject_identificatie_isnull=bag_verblijfsobject_identificatie_isnull,
            bag_verblijfsobject_identificatie_like=bag_verblijfsobject_identificatie_like,
            bag_verblijfsobject_identificatie_not=bag_verblijfsobject_identificatie_not,
            bag_woonplaats_identificatie=bag_woonplaats_identificatie,
            bag_woonplaats_identificatie_in=bag_woonplaats_identificatie_in,
            bag_woonplaats_identificatie_isempty=bag_woonplaats_identificatie_isempty,
            bag_woonplaats_identificatie_isnull=bag_woonplaats_identificatie_isnull,
            bag_woonplaats_identificatie_like=bag_woonplaats_identificatie_like,
            bag_woonplaats_identificatie_not=bag_woonplaats_identificatie_not,
            bruingoed=bruingoed,
            bruingoed_isnull=bruingoed_isnull,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            containervies=containervies,
            containervies_isnull=containervies_isnull,
            crow_score=crow_score,
            crow_score_in=crow_score_in,
            crow_score_isempty=crow_score_isempty,
            crow_score_isnull=crow_score_isnull,
            crow_score_like=crow_score_like,
            crow_score_not=crow_score_not,
            datum_waarneming=datum_waarneming,
            datum_waarneming_gt=datum_waarneming_gt,
            datum_waarneming_gte=datum_waarneming_gte,
            datum_waarneming_in=datum_waarneming_in,
            datum_waarneming_isnull=datum_waarneming_isnull,
            datum_waarneming_lt=datum_waarneming_lt,
            datum_waarneming_lte=datum_waarneming_lte,
            datum_waarneming_not=datum_waarneming_not,
            dumpplek=dumpplek,
            dumpplek_isnull=dumpplek_isnull,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            gbd_buurt_code=gbd_buurt_code,
            gbd_buurt_code_in=gbd_buurt_code_in,
            gbd_buurt_code_isempty=gbd_buurt_code_isempty,
            gbd_buurt_code_isnull=gbd_buurt_code_isnull,
            gbd_buurt_code_like=gbd_buurt_code_like,
            gbd_buurt_code_not=gbd_buurt_code_not,
            gbd_stadsdeel_naam=gbd_stadsdeel_naam,
            gbd_stadsdeel_naam_in=gbd_stadsdeel_naam_in,
            gbd_stadsdeel_naam_isempty=gbd_stadsdeel_naam_isempty,
            gbd_stadsdeel_naam_isnull=gbd_stadsdeel_naam_isnull,
            gbd_stadsdeel_naam_like=gbd_stadsdeel_naam_like,
            gbd_stadsdeel_naam_not=gbd_stadsdeel_naam_not,
            gebruikers_rol=gebruikers_rol,
            gebruikers_rol_in=gebruikers_rol_in,
            gebruikers_rol_isempty=gebruikers_rol_isempty,
            gebruikers_rol_isnull=gebruikers_rol_isnull,
            gebruikers_rol_like=gebruikers_rol_like,
            gebruikers_rol_not=gebruikers_rol_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            glas=glas,
            glas_isnull=glas_isnull,
            glasgestremd=glasgestremd,
            glasgestremd_isnull=glasgestremd_isnull,
            glastoegankelijk=glastoegankelijk,
            glastoegankelijk_isnull=glastoegankelijk_isnull,
            glasvol=glasvol,
            glasvol_isnull=glasvol_isnull,
            grof=grof,
            grof_isnull=grof_isnull,
            grofvuildagen=grofvuildagen,
            grofvuildagen_in=grofvuildagen_in,
            grofvuildagen_isempty=grofvuildagen_isempty,
            grofvuildagen_isnull=grofvuildagen_isnull,
            grofvuildagen_like=grofvuildagen_like,
            grofvuildagen_not=grofvuildagen_not,
            handhaving=handhaving,
            handhaving_isnull=handhaving_isnull,
            huisvuil=huisvuil,
            huisvuil_isnull=huisvuil_isnull,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            karton=karton,
            karton_isnull=karton_isnull,
            locatie_waarnemer=locatie_waarnemer,
            locatie_waarnemer_in=locatie_waarnemer_in,
            locatie_waarnemer_isempty=locatie_waarnemer_isempty,
            locatie_waarnemer_isnull=locatie_waarnemer_isnull,
            locatie_waarnemer_like=locatie_waarnemer_like,
            locatie_waarnemer_not=locatie_waarnemer_not,
            melding_door_collega_doorgezet=melding_door_collega_doorgezet,
            melding_door_collega_doorgezet_in=melding_door_collega_doorgezet_in,
            melding_door_collega_doorgezet_isempty=melding_door_collega_doorgezet_isempty,
            melding_door_collega_doorgezet_isnull=melding_door_collega_doorgezet_isnull,
            melding_door_collega_doorgezet_like=melding_door_collega_doorgezet_like,
            melding_door_collega_doorgezet_not=melding_door_collega_doorgezet_not,
            naam_melding_doorgezet=naam_melding_doorgezet,
            naam_melding_doorgezet_in=naam_melding_doorgezet_in,
            naam_melding_doorgezet_isempty=naam_melding_doorgezet_isempty,
            naam_melding_doorgezet_isnull=naam_melding_doorgezet_isnull,
            naam_melding_doorgezet_like=naam_melding_doorgezet_like,
            naam_melding_doorgezet_not=naam_melding_doorgezet_not,
            overig=overig,
            overig_isnull=overig_isnull,
            page=page,
            papiergestremd=papiergestremd,
            papiergestremd_isnull=papiergestremd_isnull,
            papiertoegankelijk=papiertoegankelijk,
            papiertoegankelijk_isnull=papiertoegankelijk_isnull,
            papiervol=papiervol,
            papiervol_isnull=papiervol_isnull,
            postcode=postcode,
            postcode_in=postcode_in,
            postcode_isempty=postcode_isempty,
            postcode_isnull=postcode_isnull,
            postcode_like=postcode_like,
            postcode_not=postcode_not,
            restgestremd=restgestremd,
            restgestremd_isnull=restgestremd_isnull,
            resttoegankelijk=resttoegankelijk,
            resttoegankelijk_isnull=resttoegankelijk_isnull,
            restvol=restvol,
            restvol_isnull=restvol_isnull,
            straatnaam=straatnaam,
            straatnaam_in=straatnaam_in,
            straatnaam_isempty=straatnaam_isempty,
            straatnaam_isnull=straatnaam_isnull,
            straatnaam_like=straatnaam_like,
            straatnaam_not=straatnaam_not,
            tijd_waarneming=tijd_waarneming,
            tijd_waarneming_gt=tijd_waarneming_gt,
            tijd_waarneming_gte=tijd_waarneming_gte,
            tijd_waarneming_in=tijd_waarneming_in,
            tijd_waarneming_isnull=tijd_waarneming_isnull,
            tijd_waarneming_lt=tijd_waarneming_lt,
            tijd_waarneming_lte=tijd_waarneming_lte,
            tijd_waarneming_not=tijd_waarneming_not,
            type_waarneming=type_waarneming,
            type_waarneming_in=type_waarneming_in,
            type_waarneming_isempty=type_waarneming_isempty,
            type_waarneming_isnull=type_waarneming_isnull,
            type_waarneming_like=type_waarneming_like,
            type_waarneming_not=type_waarneming_not,
            veegvuil=veegvuil,
            veegvuil_isnull=veegvuil_isnull,
            waarde_handhaving=waarde_handhaving,
            waarde_handhaving_in=waarde_handhaving_in,
            waarde_handhaving_isempty=waarde_handhaving_isempty,
            waarde_handhaving_isnull=waarde_handhaving_isnull,
            waarde_handhaving_like=waarde_handhaving_like,
            waarde_handhaving_not=waarde_handhaving_not,
            waarnemer_rol=waarnemer_rol,
            waarnemer_rol_in=waarnemer_rol_in,
            waarnemer_rol_isempty=waarnemer_rol_isempty,
            waarnemer_rol_isnull=waarnemer_rol_isnull,
            waarnemer_rol_like=waarnemer_rol_like,
            waarnemer_rol_not=waarnemer_rol_not,
            zwerfafval=zwerfafval,
            zwerfafval_isnull=zwerfafval_isnull,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedHuishoudelijkafvalbijplaatsingenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _huishoudelijkafval_bijplaatsingen_list_slash_serialize(
        self,
        accept_crs,
        content_crs,
        x_api_key,
        count,
        csv_header,
        csv_separator,
        expand,
        expand_scope,
        fields,
        format,
        page_size,
        sort,
        adres_type,
        adres_type_in,
        adres_type_isempty,
        adres_type_isnull,
        adres_type_like,
        adres_type_not,
        bag_nummeraanduiding_identificatie,
        bag_nummeraanduiding_identificatie_in,
        bag_nummeraanduiding_identificatie_isempty,
        bag_nummeraanduiding_identificatie_isnull,
        bag_nummeraanduiding_identificatie_like,
        bag_nummeraanduiding_identificatie_not,
        bag_openbareruimte_identificatie,
        bag_openbareruimte_identificatie_in,
        bag_openbareruimte_identificatie_isempty,
        bag_openbareruimte_identificatie_isnull,
        bag_openbareruimte_identificatie_like,
        bag_openbareruimte_identificatie_not,
        bag_verblijfsobject_identificatie,
        bag_verblijfsobject_identificatie_in,
        bag_verblijfsobject_identificatie_isempty,
        bag_verblijfsobject_identificatie_isnull,
        bag_verblijfsobject_identificatie_like,
        bag_verblijfsobject_identificatie_not,
        bag_woonplaats_identificatie,
        bag_woonplaats_identificatie_in,
        bag_woonplaats_identificatie_isempty,
        bag_woonplaats_identificatie_isnull,
        bag_woonplaats_identificatie_like,
        bag_woonplaats_identificatie_not,
        bruingoed,
        bruingoed_isnull,
        cluster_id,
        cluster_id_in,
        cluster_id_isempty,
        cluster_id_isnull,
        cluster_id_like,
        cluster_id_not,
        containervies,
        containervies_isnull,
        crow_score,
        crow_score_in,
        crow_score_isempty,
        crow_score_isnull,
        crow_score_like,
        crow_score_not,
        datum_waarneming,
        datum_waarneming_gt,
        datum_waarneming_gte,
        datum_waarneming_in,
        datum_waarneming_isnull,
        datum_waarneming_lt,
        datum_waarneming_lte,
        datum_waarneming_not,
        dumpplek,
        dumpplek_isnull,
        gbd_buurt_identificatie,
        gbd_buurt_identificatie_in,
        gbd_buurt_identificatie_isempty,
        gbd_buurt_identificatie_isnull,
        gbd_buurt_identificatie_like,
        gbd_buurt_identificatie_not,
        gbd_buurt_code,
        gbd_buurt_code_in,
        gbd_buurt_code_isempty,
        gbd_buurt_code_isnull,
        gbd_buurt_code_like,
        gbd_buurt_code_not,
        gbd_stadsdeel_naam,
        gbd_stadsdeel_naam_in,
        gbd_stadsdeel_naam_isempty,
        gbd_stadsdeel_naam_isnull,
        gbd_stadsdeel_naam_like,
        gbd_stadsdeel_naam_not,
        gebruikers_rol,
        gebruikers_rol_in,
        gebruikers_rol_isempty,
        gebruikers_rol_isnull,
        gebruikers_rol_like,
        gebruikers_rol_not,
        geometrie,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        glas,
        glas_isnull,
        glasgestremd,
        glasgestremd_isnull,
        glastoegankelijk,
        glastoegankelijk_isnull,
        glasvol,
        glasvol_isnull,
        grof,
        grof_isnull,
        grofvuildagen,
        grofvuildagen_in,
        grofvuildagen_isempty,
        grofvuildagen_isnull,
        grofvuildagen_like,
        grofvuildagen_not,
        handhaving,
        handhaving_isnull,
        huisvuil,
        huisvuil_isnull,
        id,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        karton,
        karton_isnull,
        locatie_waarnemer,
        locatie_waarnemer_in,
        locatie_waarnemer_isempty,
        locatie_waarnemer_isnull,
        locatie_waarnemer_like,
        locatie_waarnemer_not,
        melding_door_collega_doorgezet,
        melding_door_collega_doorgezet_in,
        melding_door_collega_doorgezet_isempty,
        melding_door_collega_doorgezet_isnull,
        melding_door_collega_doorgezet_like,
        melding_door_collega_doorgezet_not,
        naam_melding_doorgezet,
        naam_melding_doorgezet_in,
        naam_melding_doorgezet_isempty,
        naam_melding_doorgezet_isnull,
        naam_melding_doorgezet_like,
        naam_melding_doorgezet_not,
        overig,
        overig_isnull,
        page,
        papiergestremd,
        papiergestremd_isnull,
        papiertoegankelijk,
        papiertoegankelijk_isnull,
        papiervol,
        papiervol_isnull,
        postcode,
        postcode_in,
        postcode_isempty,
        postcode_isnull,
        postcode_like,
        postcode_not,
        restgestremd,
        restgestremd_isnull,
        resttoegankelijk,
        resttoegankelijk_isnull,
        restvol,
        restvol_isnull,
        straatnaam,
        straatnaam_in,
        straatnaam_isempty,
        straatnaam_isnull,
        straatnaam_like,
        straatnaam_not,
        tijd_waarneming,
        tijd_waarneming_gt,
        tijd_waarneming_gte,
        tijd_waarneming_in,
        tijd_waarneming_isnull,
        tijd_waarneming_lt,
        tijd_waarneming_lte,
        tijd_waarneming_not,
        type_waarneming,
        type_waarneming_in,
        type_waarneming_isempty,
        type_waarneming_isnull,
        type_waarneming_like,
        type_waarneming_not,
        veegvuil,
        veegvuil_isnull,
        waarde_handhaving,
        waarde_handhaving_in,
        waarde_handhaving_isempty,
        waarde_handhaving_isnull,
        waarde_handhaving_like,
        waarde_handhaving_not,
        waarnemer_rol,
        waarnemer_rol_in,
        waarnemer_rol_isempty,
        waarnemer_rol_isnull,
        waarnemer_rol_like,
        waarnemer_rol_not,
        zwerfafval,
        zwerfafval_isnull,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'adresType[in]': 'csv',
            'adresType[not]': 'multi',
            'bagNummeraanduiding.identificatie[in]': 'csv',
            'bagNummeraanduiding.identificatie[not]': 'multi',
            'bagOpenbareruimte.identificatie[in]': 'csv',
            'bagOpenbareruimte.identificatie[not]': 'multi',
            'bagVerblijfsobject.identificatie[in]': 'csv',
            'bagVerblijfsobject.identificatie[not]': 'multi',
            'bagWoonplaats.identificatie[in]': 'csv',
            'bagWoonplaats.identificatie[not]': 'multi',
            'cluster.id[in]': 'csv',
            'cluster.id[not]': 'multi',
            'crowScore[in]': 'csv',
            'crowScore[not]': 'multi',
            'datumWaarneming[in]': 'csv',
            'datumWaarneming[not]': 'multi',
            'gbdBuurt.identificatie[in]': 'csv',
            'gbdBuurt.identificatie[not]': 'multi',
            'gbdBuurtCode[in]': 'csv',
            'gbdBuurtCode[not]': 'multi',
            'gbdStadsdeelNaam[in]': 'csv',
            'gbdStadsdeelNaam[not]': 'multi',
            'gebruikersRol[in]': 'csv',
            'gebruikersRol[not]': 'multi',
            'grofvuildagen[in]': 'csv',
            'grofvuildagen[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'locatieWaarnemer[in]': 'csv',
            'locatieWaarnemer[not]': 'multi',
            'meldingDoorCollegaDoorgezet[in]': 'csv',
            'meldingDoorCollegaDoorgezet[not]': 'multi',
            'naamMeldingDoorgezet[in]': 'csv',
            'naamMeldingDoorgezet[not]': 'multi',
            'postcode[in]': 'csv',
            'postcode[not]': 'multi',
            'straatnaam[in]': 'csv',
            'straatnaam[not]': 'multi',
            'tijdWaarneming[in]': 'csv',
            'tijdWaarneming[not]': 'multi',
            'typeWaarneming[in]': 'csv',
            'typeWaarneming[not]': 'multi',
            'waardeHandhaving[in]': 'csv',
            'waardeHandhaving[not]': 'multi',
            'waarnemerRol[in]': 'csv',
            'waarnemerRol[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('_count', count))
            
        if csv_header is not None:
            
            _query_params.append(('_csv_header', csv_header))
            
        if csv_separator is not None:
            
            _query_params.append(('_csv_separator', csv_separator))
            
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if page_size is not None:
            
            _query_params.append(('_pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if adres_type is not None:
            
            _query_params.append(('adresType', adres_type))
            
        if adres_type_in is not None:
            
            _query_params.append(('adresType[in]', adres_type_in))
            
        if adres_type_isempty is not None:
            
            _query_params.append(('adresType[isempty]', adres_type_isempty))
            
        if adres_type_isnull is not None:
            
            _query_params.append(('adresType[isnull]', adres_type_isnull))
            
        if adres_type_like is not None:
            
            _query_params.append(('adresType[like]', adres_type_like))
            
        if adres_type_not is not None:
            
            _query_params.append(('adresType[not]', adres_type_not))
            
        if bag_nummeraanduiding_identificatie is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie', bag_nummeraanduiding_identificatie))
            
        if bag_nummeraanduiding_identificatie_in is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[in]', bag_nummeraanduiding_identificatie_in))
            
        if bag_nummeraanduiding_identificatie_isempty is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isempty]', bag_nummeraanduiding_identificatie_isempty))
            
        if bag_nummeraanduiding_identificatie_isnull is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isnull]', bag_nummeraanduiding_identificatie_isnull))
            
        if bag_nummeraanduiding_identificatie_like is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[like]', bag_nummeraanduiding_identificatie_like))
            
        if bag_nummeraanduiding_identificatie_not is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[not]', bag_nummeraanduiding_identificatie_not))
            
        if bag_openbareruimte_identificatie is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie', bag_openbareruimte_identificatie))
            
        if bag_openbareruimte_identificatie_in is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[in]', bag_openbareruimte_identificatie_in))
            
        if bag_openbareruimte_identificatie_isempty is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isempty]', bag_openbareruimte_identificatie_isempty))
            
        if bag_openbareruimte_identificatie_isnull is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isnull]', bag_openbareruimte_identificatie_isnull))
            
        if bag_openbareruimte_identificatie_like is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[like]', bag_openbareruimte_identificatie_like))
            
        if bag_openbareruimte_identificatie_not is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[not]', bag_openbareruimte_identificatie_not))
            
        if bag_verblijfsobject_identificatie is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie', bag_verblijfsobject_identificatie))
            
        if bag_verblijfsobject_identificatie_in is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[in]', bag_verblijfsobject_identificatie_in))
            
        if bag_verblijfsobject_identificatie_isempty is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[isempty]', bag_verblijfsobject_identificatie_isempty))
            
        if bag_verblijfsobject_identificatie_isnull is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[isnull]', bag_verblijfsobject_identificatie_isnull))
            
        if bag_verblijfsobject_identificatie_like is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[like]', bag_verblijfsobject_identificatie_like))
            
        if bag_verblijfsobject_identificatie_not is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[not]', bag_verblijfsobject_identificatie_not))
            
        if bag_woonplaats_identificatie is not None:
            
            _query_params.append(('bagWoonplaats.identificatie', bag_woonplaats_identificatie))
            
        if bag_woonplaats_identificatie_in is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[in]', bag_woonplaats_identificatie_in))
            
        if bag_woonplaats_identificatie_isempty is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[isempty]', bag_woonplaats_identificatie_isempty))
            
        if bag_woonplaats_identificatie_isnull is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[isnull]', bag_woonplaats_identificatie_isnull))
            
        if bag_woonplaats_identificatie_like is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[like]', bag_woonplaats_identificatie_like))
            
        if bag_woonplaats_identificatie_not is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[not]', bag_woonplaats_identificatie_not))
            
        if bruingoed is not None:
            
            _query_params.append(('bruingoed', bruingoed))
            
        if bruingoed_isnull is not None:
            
            _query_params.append(('bruingoed[isnull]', bruingoed_isnull))
            
        if cluster_id is not None:
            
            _query_params.append(('cluster.id', cluster_id))
            
        if cluster_id_in is not None:
            
            _query_params.append(('cluster.id[in]', cluster_id_in))
            
        if cluster_id_isempty is not None:
            
            _query_params.append(('cluster.id[isempty]', cluster_id_isempty))
            
        if cluster_id_isnull is not None:
            
            _query_params.append(('cluster.id[isnull]', cluster_id_isnull))
            
        if cluster_id_like is not None:
            
            _query_params.append(('cluster.id[like]', cluster_id_like))
            
        if cluster_id_not is not None:
            
            _query_params.append(('cluster.id[not]', cluster_id_not))
            
        if containervies is not None:
            
            _query_params.append(('containervies', containervies))
            
        if containervies_isnull is not None:
            
            _query_params.append(('containervies[isnull]', containervies_isnull))
            
        if crow_score is not None:
            
            _query_params.append(('crowScore', crow_score))
            
        if crow_score_in is not None:
            
            _query_params.append(('crowScore[in]', crow_score_in))
            
        if crow_score_isempty is not None:
            
            _query_params.append(('crowScore[isempty]', crow_score_isempty))
            
        if crow_score_isnull is not None:
            
            _query_params.append(('crowScore[isnull]', crow_score_isnull))
            
        if crow_score_like is not None:
            
            _query_params.append(('crowScore[like]', crow_score_like))
            
        if crow_score_not is not None:
            
            _query_params.append(('crowScore[not]', crow_score_not))
            
        if datum_waarneming is not None:
            if isinstance(datum_waarneming, date):
                _query_params.append(
                    (
                        'datumWaarneming',
                        datum_waarneming.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming', datum_waarneming))
            
        if datum_waarneming_gt is not None:
            if isinstance(datum_waarneming_gt, date):
                _query_params.append(
                    (
                        'datumWaarneming[gt]',
                        datum_waarneming_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[gt]', datum_waarneming_gt))
            
        if datum_waarneming_gte is not None:
            if isinstance(datum_waarneming_gte, date):
                _query_params.append(
                    (
                        'datumWaarneming[gte]',
                        datum_waarneming_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[gte]', datum_waarneming_gte))
            
        if datum_waarneming_in is not None:
            
            _query_params.append(('datumWaarneming[in]', datum_waarneming_in))
            
        if datum_waarneming_isnull is not None:
            
            _query_params.append(('datumWaarneming[isnull]', datum_waarneming_isnull))
            
        if datum_waarneming_lt is not None:
            if isinstance(datum_waarneming_lt, date):
                _query_params.append(
                    (
                        'datumWaarneming[lt]',
                        datum_waarneming_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[lt]', datum_waarneming_lt))
            
        if datum_waarneming_lte is not None:
            if isinstance(datum_waarneming_lte, date):
                _query_params.append(
                    (
                        'datumWaarneming[lte]',
                        datum_waarneming_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[lte]', datum_waarneming_lte))
            
        if datum_waarneming_not is not None:
            
            _query_params.append(('datumWaarneming[not]', datum_waarneming_not))
            
        if dumpplek is not None:
            
            _query_params.append(('dumpplek', dumpplek))
            
        if dumpplek_isnull is not None:
            
            _query_params.append(('dumpplek[isnull]', dumpplek_isnull))
            
        if gbd_buurt_identificatie is not None:
            
            _query_params.append(('gbdBuurt.identificatie', gbd_buurt_identificatie))
            
        if gbd_buurt_identificatie_in is not None:
            
            _query_params.append(('gbdBuurt.identificatie[in]', gbd_buurt_identificatie_in))
            
        if gbd_buurt_identificatie_isempty is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isempty]', gbd_buurt_identificatie_isempty))
            
        if gbd_buurt_identificatie_isnull is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isnull]', gbd_buurt_identificatie_isnull))
            
        if gbd_buurt_identificatie_like is not None:
            
            _query_params.append(('gbdBuurt.identificatie[like]', gbd_buurt_identificatie_like))
            
        if gbd_buurt_identificatie_not is not None:
            
            _query_params.append(('gbdBuurt.identificatie[not]', gbd_buurt_identificatie_not))
            
        if gbd_buurt_code is not None:
            
            _query_params.append(('gbdBuurtCode', gbd_buurt_code))
            
        if gbd_buurt_code_in is not None:
            
            _query_params.append(('gbdBuurtCode[in]', gbd_buurt_code_in))
            
        if gbd_buurt_code_isempty is not None:
            
            _query_params.append(('gbdBuurtCode[isempty]', gbd_buurt_code_isempty))
            
        if gbd_buurt_code_isnull is not None:
            
            _query_params.append(('gbdBuurtCode[isnull]', gbd_buurt_code_isnull))
            
        if gbd_buurt_code_like is not None:
            
            _query_params.append(('gbdBuurtCode[like]', gbd_buurt_code_like))
            
        if gbd_buurt_code_not is not None:
            
            _query_params.append(('gbdBuurtCode[not]', gbd_buurt_code_not))
            
        if gbd_stadsdeel_naam is not None:
            
            _query_params.append(('gbdStadsdeelNaam', gbd_stadsdeel_naam))
            
        if gbd_stadsdeel_naam_in is not None:
            
            _query_params.append(('gbdStadsdeelNaam[in]', gbd_stadsdeel_naam_in))
            
        if gbd_stadsdeel_naam_isempty is not None:
            
            _query_params.append(('gbdStadsdeelNaam[isempty]', gbd_stadsdeel_naam_isempty))
            
        if gbd_stadsdeel_naam_isnull is not None:
            
            _query_params.append(('gbdStadsdeelNaam[isnull]', gbd_stadsdeel_naam_isnull))
            
        if gbd_stadsdeel_naam_like is not None:
            
            _query_params.append(('gbdStadsdeelNaam[like]', gbd_stadsdeel_naam_like))
            
        if gbd_stadsdeel_naam_not is not None:
            
            _query_params.append(('gbdStadsdeelNaam[not]', gbd_stadsdeel_naam_not))
            
        if gebruikers_rol is not None:
            
            _query_params.append(('gebruikersRol', gebruikers_rol))
            
        if gebruikers_rol_in is not None:
            
            _query_params.append(('gebruikersRol[in]', gebruikers_rol_in))
            
        if gebruikers_rol_isempty is not None:
            
            _query_params.append(('gebruikersRol[isempty]', gebruikers_rol_isempty))
            
        if gebruikers_rol_isnull is not None:
            
            _query_params.append(('gebruikersRol[isnull]', gebruikers_rol_isnull))
            
        if gebruikers_rol_like is not None:
            
            _query_params.append(('gebruikersRol[like]', gebruikers_rol_like))
            
        if gebruikers_rol_not is not None:
            
            _query_params.append(('gebruikersRol[not]', gebruikers_rol_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if glas is not None:
            
            _query_params.append(('glas', glas))
            
        if glas_isnull is not None:
            
            _query_params.append(('glas[isnull]', glas_isnull))
            
        if glasgestremd is not None:
            
            _query_params.append(('glasgestremd', glasgestremd))
            
        if glasgestremd_isnull is not None:
            
            _query_params.append(('glasgestremd[isnull]', glasgestremd_isnull))
            
        if glastoegankelijk is not None:
            
            _query_params.append(('glastoegankelijk', glastoegankelijk))
            
        if glastoegankelijk_isnull is not None:
            
            _query_params.append(('glastoegankelijk[isnull]', glastoegankelijk_isnull))
            
        if glasvol is not None:
            
            _query_params.append(('glasvol', glasvol))
            
        if glasvol_isnull is not None:
            
            _query_params.append(('glasvol[isnull]', glasvol_isnull))
            
        if grof is not None:
            
            _query_params.append(('grof', grof))
            
        if grof_isnull is not None:
            
            _query_params.append(('grof[isnull]', grof_isnull))
            
        if grofvuildagen is not None:
            
            _query_params.append(('grofvuildagen', grofvuildagen))
            
        if grofvuildagen_in is not None:
            
            _query_params.append(('grofvuildagen[in]', grofvuildagen_in))
            
        if grofvuildagen_isempty is not None:
            
            _query_params.append(('grofvuildagen[isempty]', grofvuildagen_isempty))
            
        if grofvuildagen_isnull is not None:
            
            _query_params.append(('grofvuildagen[isnull]', grofvuildagen_isnull))
            
        if grofvuildagen_like is not None:
            
            _query_params.append(('grofvuildagen[like]', grofvuildagen_like))
            
        if grofvuildagen_not is not None:
            
            _query_params.append(('grofvuildagen[not]', grofvuildagen_not))
            
        if handhaving is not None:
            
            _query_params.append(('handhaving', handhaving))
            
        if handhaving_isnull is not None:
            
            _query_params.append(('handhaving[isnull]', handhaving_isnull))
            
        if huisvuil is not None:
            
            _query_params.append(('huisvuil', huisvuil))
            
        if huisvuil_isnull is not None:
            
            _query_params.append(('huisvuil[isnull]', huisvuil_isnull))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if karton is not None:
            
            _query_params.append(('karton', karton))
            
        if karton_isnull is not None:
            
            _query_params.append(('karton[isnull]', karton_isnull))
            
        if locatie_waarnemer is not None:
            
            _query_params.append(('locatieWaarnemer', locatie_waarnemer))
            
        if locatie_waarnemer_in is not None:
            
            _query_params.append(('locatieWaarnemer[in]', locatie_waarnemer_in))
            
        if locatie_waarnemer_isempty is not None:
            
            _query_params.append(('locatieWaarnemer[isempty]', locatie_waarnemer_isempty))
            
        if locatie_waarnemer_isnull is not None:
            
            _query_params.append(('locatieWaarnemer[isnull]', locatie_waarnemer_isnull))
            
        if locatie_waarnemer_like is not None:
            
            _query_params.append(('locatieWaarnemer[like]', locatie_waarnemer_like))
            
        if locatie_waarnemer_not is not None:
            
            _query_params.append(('locatieWaarnemer[not]', locatie_waarnemer_not))
            
        if melding_door_collega_doorgezet is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet', melding_door_collega_doorgezet))
            
        if melding_door_collega_doorgezet_in is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[in]', melding_door_collega_doorgezet_in))
            
        if melding_door_collega_doorgezet_isempty is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[isempty]', melding_door_collega_doorgezet_isempty))
            
        if melding_door_collega_doorgezet_isnull is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[isnull]', melding_door_collega_doorgezet_isnull))
            
        if melding_door_collega_doorgezet_like is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[like]', melding_door_collega_doorgezet_like))
            
        if melding_door_collega_doorgezet_not is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[not]', melding_door_collega_doorgezet_not))
            
        if naam_melding_doorgezet is not None:
            
            _query_params.append(('naamMeldingDoorgezet', naam_melding_doorgezet))
            
        if naam_melding_doorgezet_in is not None:
            
            _query_params.append(('naamMeldingDoorgezet[in]', naam_melding_doorgezet_in))
            
        if naam_melding_doorgezet_isempty is not None:
            
            _query_params.append(('naamMeldingDoorgezet[isempty]', naam_melding_doorgezet_isempty))
            
        if naam_melding_doorgezet_isnull is not None:
            
            _query_params.append(('naamMeldingDoorgezet[isnull]', naam_melding_doorgezet_isnull))
            
        if naam_melding_doorgezet_like is not None:
            
            _query_params.append(('naamMeldingDoorgezet[like]', naam_melding_doorgezet_like))
            
        if naam_melding_doorgezet_not is not None:
            
            _query_params.append(('naamMeldingDoorgezet[not]', naam_melding_doorgezet_not))
            
        if overig is not None:
            
            _query_params.append(('overig', overig))
            
        if overig_isnull is not None:
            
            _query_params.append(('overig[isnull]', overig_isnull))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if papiergestremd is not None:
            
            _query_params.append(('papiergestremd', papiergestremd))
            
        if papiergestremd_isnull is not None:
            
            _query_params.append(('papiergestremd[isnull]', papiergestremd_isnull))
            
        if papiertoegankelijk is not None:
            
            _query_params.append(('papiertoegankelijk', papiertoegankelijk))
            
        if papiertoegankelijk_isnull is not None:
            
            _query_params.append(('papiertoegankelijk[isnull]', papiertoegankelijk_isnull))
            
        if papiervol is not None:
            
            _query_params.append(('papiervol', papiervol))
            
        if papiervol_isnull is not None:
            
            _query_params.append(('papiervol[isnull]', papiervol_isnull))
            
        if postcode is not None:
            
            _query_params.append(('postcode', postcode))
            
        if postcode_in is not None:
            
            _query_params.append(('postcode[in]', postcode_in))
            
        if postcode_isempty is not None:
            
            _query_params.append(('postcode[isempty]', postcode_isempty))
            
        if postcode_isnull is not None:
            
            _query_params.append(('postcode[isnull]', postcode_isnull))
            
        if postcode_like is not None:
            
            _query_params.append(('postcode[like]', postcode_like))
            
        if postcode_not is not None:
            
            _query_params.append(('postcode[not]', postcode_not))
            
        if restgestremd is not None:
            
            _query_params.append(('restgestremd', restgestremd))
            
        if restgestremd_isnull is not None:
            
            _query_params.append(('restgestremd[isnull]', restgestremd_isnull))
            
        if resttoegankelijk is not None:
            
            _query_params.append(('resttoegankelijk', resttoegankelijk))
            
        if resttoegankelijk_isnull is not None:
            
            _query_params.append(('resttoegankelijk[isnull]', resttoegankelijk_isnull))
            
        if restvol is not None:
            
            _query_params.append(('restvol', restvol))
            
        if restvol_isnull is not None:
            
            _query_params.append(('restvol[isnull]', restvol_isnull))
            
        if straatnaam is not None:
            
            _query_params.append(('straatnaam', straatnaam))
            
        if straatnaam_in is not None:
            
            _query_params.append(('straatnaam[in]', straatnaam_in))
            
        if straatnaam_isempty is not None:
            
            _query_params.append(('straatnaam[isempty]', straatnaam_isempty))
            
        if straatnaam_isnull is not None:
            
            _query_params.append(('straatnaam[isnull]', straatnaam_isnull))
            
        if straatnaam_like is not None:
            
            _query_params.append(('straatnaam[like]', straatnaam_like))
            
        if straatnaam_not is not None:
            
            _query_params.append(('straatnaam[not]', straatnaam_not))
            
        if tijd_waarneming is not None:
            
            _query_params.append(('tijdWaarneming', tijd_waarneming))
            
        if tijd_waarneming_gt is not None:
            
            _query_params.append(('tijdWaarneming[gt]', tijd_waarneming_gt))
            
        if tijd_waarneming_gte is not None:
            
            _query_params.append(('tijdWaarneming[gte]', tijd_waarneming_gte))
            
        if tijd_waarneming_in is not None:
            
            _query_params.append(('tijdWaarneming[in]', tijd_waarneming_in))
            
        if tijd_waarneming_isnull is not None:
            
            _query_params.append(('tijdWaarneming[isnull]', tijd_waarneming_isnull))
            
        if tijd_waarneming_lt is not None:
            
            _query_params.append(('tijdWaarneming[lt]', tijd_waarneming_lt))
            
        if tijd_waarneming_lte is not None:
            
            _query_params.append(('tijdWaarneming[lte]', tijd_waarneming_lte))
            
        if tijd_waarneming_not is not None:
            
            _query_params.append(('tijdWaarneming[not]', tijd_waarneming_not))
            
        if type_waarneming is not None:
            
            _query_params.append(('typeWaarneming', type_waarneming))
            
        if type_waarneming_in is not None:
            
            _query_params.append(('typeWaarneming[in]', type_waarneming_in))
            
        if type_waarneming_isempty is not None:
            
            _query_params.append(('typeWaarneming[isempty]', type_waarneming_isempty))
            
        if type_waarneming_isnull is not None:
            
            _query_params.append(('typeWaarneming[isnull]', type_waarneming_isnull))
            
        if type_waarneming_like is not None:
            
            _query_params.append(('typeWaarneming[like]', type_waarneming_like))
            
        if type_waarneming_not is not None:
            
            _query_params.append(('typeWaarneming[not]', type_waarneming_not))
            
        if veegvuil is not None:
            
            _query_params.append(('veegvuil', veegvuil))
            
        if veegvuil_isnull is not None:
            
            _query_params.append(('veegvuil[isnull]', veegvuil_isnull))
            
        if waarde_handhaving is not None:
            
            _query_params.append(('waardeHandhaving', waarde_handhaving))
            
        if waarde_handhaving_in is not None:
            
            _query_params.append(('waardeHandhaving[in]', waarde_handhaving_in))
            
        if waarde_handhaving_isempty is not None:
            
            _query_params.append(('waardeHandhaving[isempty]', waarde_handhaving_isempty))
            
        if waarde_handhaving_isnull is not None:
            
            _query_params.append(('waardeHandhaving[isnull]', waarde_handhaving_isnull))
            
        if waarde_handhaving_like is not None:
            
            _query_params.append(('waardeHandhaving[like]', waarde_handhaving_like))
            
        if waarde_handhaving_not is not None:
            
            _query_params.append(('waardeHandhaving[not]', waarde_handhaving_not))
            
        if waarnemer_rol is not None:
            
            _query_params.append(('waarnemerRol', waarnemer_rol))
            
        if waarnemer_rol_in is not None:
            
            _query_params.append(('waarnemerRol[in]', waarnemer_rol_in))
            
        if waarnemer_rol_isempty is not None:
            
            _query_params.append(('waarnemerRol[isempty]', waarnemer_rol_isempty))
            
        if waarnemer_rol_isnull is not None:
            
            _query_params.append(('waarnemerRol[isnull]', waarnemer_rol_isnull))
            
        if waarnemer_rol_like is not None:
            
            _query_params.append(('waarnemerRol[like]', waarnemer_rol_like))
            
        if waarnemer_rol_not is not None:
            
            _query_params.append(('waarnemerRol[not]', waarnemer_rol_not))
            
        if zwerfafval is not None:
            
            _query_params.append(('zwerfafval', zwerfafval))
            
        if zwerfafval_isnull is not None:
            
            _query_params.append(('zwerfafval[isnull]', zwerfafval_isnull))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bijplaatsingen',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def huishoudelijkafval_bijplaatsingen_retrieve_slash(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        adres_type: Annotated[Optional[StrictStr], Field(description="Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. ")] = None,
        adres_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        adres_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        adres_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        adres_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        adres_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_woonplaats_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van een woonplaats")] = None,
        bag_woonplaats_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_woonplaats_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_woonplaats_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_woonplaats_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_woonplaats_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bruingoed: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (bruingoed) rondom de container(s)")] = None,
        bruingoed_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        containervies: Annotated[Optional[StrictBool], Field(description="De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt")] = None,
        containervies_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score: Annotated[Optional[StrictStr], Field(description="De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks")] = None,
        crow_score_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        crow_score_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        crow_score_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        crow_score_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_waarneming: Annotated[Optional[date], Field(description="De datum waarop de waarneming is geregistreerd.")] = None,
        datum_waarneming_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_waarneming_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_waarneming_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_waarneming_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        dumpplek: Annotated[Optional[StrictBool], Field(description="Het geeft aan of de locatie een dumpplek is.")] = None,
        dumpplek_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_buurt_code: Annotated[Optional[StrictStr], Field(description="Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)")] = None,
        gbd_buurt_code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_stadsdeel_naam: Annotated[Optional[StrictStr], Field(description="Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        gbd_stadsdeel_naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_stadsdeel_naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_stadsdeel_naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_stadsdeel_naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_stadsdeel_naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gebruikers_rol: Annotated[Optional[StrictStr], Field(description="De rol van de gebruiker in de applicatie.")] = None,
        gebruikers_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gebruikers_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gebruikers_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gebruikers_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gebruikers_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de waarneming RD(epsg:28992)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        glas: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (glas afval) rondom de container(s)")] = None,
        glas_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasgestremd: Annotated[Optional[StrictBool], Field(description="De glascontainer is gestremd")] = None,
        glasgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glastoegankelijk: Annotated[Optional[StrictBool], Field(description="De glascontainer is toegangelijk")] = None,
        glastoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasvol: Annotated[Optional[StrictBool], Field(description="De glascontainer is vol")] = None,
        glasvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grof: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (grofvuil) rondom de container(s)")] = None,
        grof_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen: Annotated[Optional[StrictStr], Field(description="De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.")] = None,
        grofvuildagen_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        grofvuildagen_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        grofvuildagen_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        grofvuildagen_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        handhaving: Annotated[Optional[StrictBool], Field(description="Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig")] = None,
        handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        huisvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (huisvuil) rondom de container(s)")] = None,
        huisvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het record.")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        karton: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (karton) rondom de container(s)")] = None,
        karton_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer: Annotated[Optional[StrictStr], Field(description="De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.")] = None,
        locatie_waarnemer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        locatie_waarnemer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        locatie_waarnemer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        locatie_waarnemer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        melding_door_collega_doorgezet: Annotated[Optional[StrictStr], Field(description="Het geeft aan of de waarneming door een collega is doorgezet.")] = None,
        melding_door_collega_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        melding_door_collega_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        melding_door_collega_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        melding_door_collega_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        melding_door_collega_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam_melding_doorgezet: Annotated[Optional[StrictStr], Field(description="Soort doorgezette waarneming.")] = None,
        naam_melding_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_melding_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_melding_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_melding_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_melding_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        overig: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (overig) rondom de container(s)")] = None,
        overig_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiergestremd: Annotated[Optional[StrictBool], Field(description="De papiercontainer is gestremd")] = None,
        papiergestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiertoegankelijk: Annotated[Optional[StrictBool], Field(description="De papiercontainer is toegankelijk")] = None,
        papiertoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiervol: Annotated[Optional[StrictBool], Field(description="De papiercontainer is vol")] = None,
        papiervol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        postcode_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        postcode_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        postcode_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        postcode_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        restgestremd: Annotated[Optional[StrictBool], Field(description="De restcontainer is gestremd")] = None,
        restgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        resttoegankelijk: Annotated[Optional[StrictBool], Field(description="De restcontainer is toegankelijk")] = None,
        resttoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        restvol: Annotated[Optional[StrictBool], Field(description="De restcontainer is vol")] = None,
        restvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam: Annotated[Optional[StrictStr], Field(description="De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).")] = None,
        straatnaam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        straatnaam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        straatnaam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        straatnaam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        tijd_waarneming: Annotated[Optional[StrictStr], Field(description="De tijdstip waarop de waarneming is geregistreerd.")] = None,
        tijd_waarneming_gt: Annotated[Optional[StrictStr], Field(description="Greater than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_gte: Annotated[Optional[StrictStr], Field(description="Greater than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        tijd_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        tijd_waarneming_lt: Annotated[Optional[StrictStr], Field(description="Less than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_lte: Annotated[Optional[StrictStr], Field(description="Less than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; use hh:mm[:ss[.ms]]")] = None,
        type_waarneming: Annotated[Optional[StrictStr], Field(description="Geeft aan of de waarneming een CROW waarneming is.")] = None,
        type_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        type_waarneming_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        type_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        type_waarneming_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        type_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        veegvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (veegvuil) rondom de container(s)")] = None,
        veegvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving: Annotated[Optional[StrictStr], Field(description="Hoe veel items met adresgegevens zijn er aangetroffen?")] = None,
        waarde_handhaving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarde_handhaving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarde_handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarde_handhaving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        waarnemer_rol: Annotated[Optional[StrictStr], Field(description="De rol van de melder")] = None,
        waarnemer_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarnemer_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarnemer_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarnemer_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarnemer_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        zwerfafval: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (zwerfafval) rondom de container(s)")] = None,
        zwerfafval_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Huishoudelijkafvalbijplaatsingen:
        """huishoudelijkafval_bijplaatsingen_retrieve_slash


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param adres_type: Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. 
        :type adres_type: str
        :param adres_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type adres_type_in: List[str]
        :param adres_type_isempty: Whether the field is empty or not.
        :type adres_type_isempty: bool
        :param adres_type_isnull: Whether the field has a NULL value or not.
        :type adres_type_isnull: bool
        :param adres_type_like: Matches text using wildcards (? and *).
        :type adres_type_like: str
        :param adres_type_not: Exclude matches; text
        :type adres_type_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bag_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_verblijfsobject_identificatie: str
        :param bag_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_verblijfsobject_identificatie_in: List[str]
        :param bag_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_verblijfsobject_identificatie_isempty: bool
        :param bag_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_verblijfsobject_identificatie_isnull: bool
        :param bag_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_verblijfsobject_identificatie_like: str
        :param bag_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_verblijfsobject_identificatie_not: List[str]
        :param bag_woonplaats_identificatie: Unieke aanduiding van een woonplaats
        :type bag_woonplaats_identificatie: str
        :param bag_woonplaats_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_woonplaats_identificatie_in: List[str]
        :param bag_woonplaats_identificatie_isempty: Whether the field is empty or not.
        :type bag_woonplaats_identificatie_isempty: bool
        :param bag_woonplaats_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_woonplaats_identificatie_isnull: bool
        :param bag_woonplaats_identificatie_like: Matches text using wildcards (? and *).
        :type bag_woonplaats_identificatie_like: str
        :param bag_woonplaats_identificatie_not: Exclude matches; text
        :type bag_woonplaats_identificatie_not: List[str]
        :param bruingoed: Aangetroffen afvalsoort (bruingoed) rondom de container(s)
        :type bruingoed: bool
        :param bruingoed_isnull: Whether the field has a NULL value or not.
        :type bruingoed_isnull: bool
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param containervies: De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt
        :type containervies: bool
        :param containervies_isnull: Whether the field has a NULL value or not.
        :type containervies_isnull: bool
        :param crow_score: De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks
        :type crow_score: str
        :param crow_score_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type crow_score_in: List[str]
        :param crow_score_isempty: Whether the field is empty or not.
        :type crow_score_isempty: bool
        :param crow_score_isnull: Whether the field has a NULL value or not.
        :type crow_score_isnull: bool
        :param crow_score_like: Matches text using wildcards (? and *).
        :type crow_score_like: str
        :param crow_score_not: Exclude matches; text
        :type crow_score_not: List[str]
        :param datum_waarneming: De datum waarop de waarneming is geregistreerd.
        :type datum_waarneming: date
        :param datum_waarneming_gt: Greater than; use yyyy-mm-dd
        :type datum_waarneming_gt: date
        :param datum_waarneming_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_waarneming_gte: date
        :param datum_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_waarneming_in: List[date]
        :param datum_waarneming_isnull: Whether the field has a NULL value or not.
        :type datum_waarneming_isnull: bool
        :param datum_waarneming_lt: Less than; use yyyy-mm-dd
        :type datum_waarneming_lt: date
        :param datum_waarneming_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_waarneming_lte: date
        :param datum_waarneming_not: Exclude matches; use yyyy-mm-dd
        :type datum_waarneming_not: List[date]
        :param dumpplek: Het geeft aan of de locatie een dumpplek is.
        :type dumpplek: bool
        :param dumpplek_isnull: Whether the field has a NULL value or not.
        :type dumpplek_isnull: bool
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param gbd_buurt_code: Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)
        :type gbd_buurt_code: str
        :param gbd_buurt_code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_code_in: List[str]
        :param gbd_buurt_code_isempty: Whether the field is empty or not.
        :type gbd_buurt_code_isempty: bool
        :param gbd_buurt_code_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_code_isnull: bool
        :param gbd_buurt_code_like: Matches text using wildcards (? and *).
        :type gbd_buurt_code_like: str
        :param gbd_buurt_code_not: Exclude matches; text
        :type gbd_buurt_code_not: List[str]
        :param gbd_stadsdeel_naam: Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type gbd_stadsdeel_naam: str
        :param gbd_stadsdeel_naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_stadsdeel_naam_in: List[str]
        :param gbd_stadsdeel_naam_isempty: Whether the field is empty or not.
        :type gbd_stadsdeel_naam_isempty: bool
        :param gbd_stadsdeel_naam_isnull: Whether the field has a NULL value or not.
        :type gbd_stadsdeel_naam_isnull: bool
        :param gbd_stadsdeel_naam_like: Matches text using wildcards (? and *).
        :type gbd_stadsdeel_naam_like: str
        :param gbd_stadsdeel_naam_not: Exclude matches; text
        :type gbd_stadsdeel_naam_not: List[str]
        :param gebruikers_rol: De rol van de gebruiker in de applicatie.
        :type gebruikers_rol: str
        :param gebruikers_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gebruikers_rol_in: List[str]
        :param gebruikers_rol_isempty: Whether the field is empty or not.
        :type gebruikers_rol_isempty: bool
        :param gebruikers_rol_isnull: Whether the field has a NULL value or not.
        :type gebruikers_rol_isnull: bool
        :param gebruikers_rol_like: Matches text using wildcards (? and *).
        :type gebruikers_rol_like: str
        :param gebruikers_rol_not: Exclude matches; text
        :type gebruikers_rol_not: List[str]
        :param geometrie: Geometrie van het type POINT van de waarneming RD(epsg:28992)
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param glas: Aangetroffen afvalsoort (glas afval) rondom de container(s)
        :type glas: bool
        :param glas_isnull: Whether the field has a NULL value or not.
        :type glas_isnull: bool
        :param glasgestremd: De glascontainer is gestremd
        :type glasgestremd: bool
        :param glasgestremd_isnull: Whether the field has a NULL value or not.
        :type glasgestremd_isnull: bool
        :param glastoegankelijk: De glascontainer is toegangelijk
        :type glastoegankelijk: bool
        :param glastoegankelijk_isnull: Whether the field has a NULL value or not.
        :type glastoegankelijk_isnull: bool
        :param glasvol: De glascontainer is vol
        :type glasvol: bool
        :param glasvol_isnull: Whether the field has a NULL value or not.
        :type glasvol_isnull: bool
        :param grof: Aangetroffen afvalsoort (grofvuil) rondom de container(s)
        :type grof: bool
        :param grof_isnull: Whether the field has a NULL value or not.
        :type grof_isnull: bool
        :param grofvuildagen: De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.
        :type grofvuildagen: str
        :param grofvuildagen_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type grofvuildagen_in: List[str]
        :param grofvuildagen_isempty: Whether the field is empty or not.
        :type grofvuildagen_isempty: bool
        :param grofvuildagen_isnull: Whether the field has a NULL value or not.
        :type grofvuildagen_isnull: bool
        :param grofvuildagen_like: Matches text using wildcards (? and *).
        :type grofvuildagen_like: str
        :param grofvuildagen_not: Exclude matches; text
        :type grofvuildagen_not: List[str]
        :param handhaving: Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig
        :type handhaving: bool
        :param handhaving_isnull: Whether the field has a NULL value or not.
        :type handhaving_isnull: bool
        :param huisvuil: Aangetroffen afvalsoort (huisvuil) rondom de container(s)
        :type huisvuil: bool
        :param huisvuil_isnull: Whether the field has a NULL value or not.
        :type huisvuil_isnull: bool
        :param id2: Unieke aanduiding van het record.
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param karton: Aangetroffen afvalsoort (karton) rondom de container(s)
        :type karton: bool
        :param karton_isnull: Whether the field has a NULL value or not.
        :type karton_isnull: bool
        :param locatie_waarnemer: De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.
        :type locatie_waarnemer: str
        :param locatie_waarnemer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type locatie_waarnemer_in: List[str]
        :param locatie_waarnemer_isempty: Whether the field is empty or not.
        :type locatie_waarnemer_isempty: bool
        :param locatie_waarnemer_isnull: Whether the field has a NULL value or not.
        :type locatie_waarnemer_isnull: bool
        :param locatie_waarnemer_like: Matches text using wildcards (? and *).
        :type locatie_waarnemer_like: str
        :param locatie_waarnemer_not: Exclude matches; text
        :type locatie_waarnemer_not: List[str]
        :param melding_door_collega_doorgezet: Het geeft aan of de waarneming door een collega is doorgezet.
        :type melding_door_collega_doorgezet: str
        :param melding_door_collega_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type melding_door_collega_doorgezet_in: List[str]
        :param melding_door_collega_doorgezet_isempty: Whether the field is empty or not.
        :type melding_door_collega_doorgezet_isempty: bool
        :param melding_door_collega_doorgezet_isnull: Whether the field has a NULL value or not.
        :type melding_door_collega_doorgezet_isnull: bool
        :param melding_door_collega_doorgezet_like: Matches text using wildcards (? and *).
        :type melding_door_collega_doorgezet_like: str
        :param melding_door_collega_doorgezet_not: Exclude matches; text
        :type melding_door_collega_doorgezet_not: List[str]
        :param naam_melding_doorgezet: Soort doorgezette waarneming.
        :type naam_melding_doorgezet: str
        :param naam_melding_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_melding_doorgezet_in: List[str]
        :param naam_melding_doorgezet_isempty: Whether the field is empty or not.
        :type naam_melding_doorgezet_isempty: bool
        :param naam_melding_doorgezet_isnull: Whether the field has a NULL value or not.
        :type naam_melding_doorgezet_isnull: bool
        :param naam_melding_doorgezet_like: Matches text using wildcards (? and *).
        :type naam_melding_doorgezet_like: str
        :param naam_melding_doorgezet_not: Exclude matches; text
        :type naam_melding_doorgezet_not: List[str]
        :param overig: Aangetroffen afvalsoort (overig) rondom de container(s)
        :type overig: bool
        :param overig_isnull: Whether the field has a NULL value or not.
        :type overig_isnull: bool
        :param papiergestremd: De papiercontainer is gestremd
        :type papiergestremd: bool
        :param papiergestremd_isnull: Whether the field has a NULL value or not.
        :type papiergestremd_isnull: bool
        :param papiertoegankelijk: De papiercontainer is toegankelijk
        :type papiertoegankelijk: bool
        :param papiertoegankelijk_isnull: Whether the field has a NULL value or not.
        :type papiertoegankelijk_isnull: bool
        :param papiervol: De papiercontainer is vol
        :type papiervol: bool
        :param papiervol_isnull: Whether the field has a NULL value or not.
        :type papiervol_isnull: bool
        :param postcode: De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type postcode: str
        :param postcode_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type postcode_in: List[str]
        :param postcode_isempty: Whether the field is empty or not.
        :type postcode_isempty: bool
        :param postcode_isnull: Whether the field has a NULL value or not.
        :type postcode_isnull: bool
        :param postcode_like: Matches text using wildcards (? and *).
        :type postcode_like: str
        :param postcode_not: Exclude matches; text
        :type postcode_not: List[str]
        :param restgestremd: De restcontainer is gestremd
        :type restgestremd: bool
        :param restgestremd_isnull: Whether the field has a NULL value or not.
        :type restgestremd_isnull: bool
        :param resttoegankelijk: De restcontainer is toegankelijk
        :type resttoegankelijk: bool
        :param resttoegankelijk_isnull: Whether the field has a NULL value or not.
        :type resttoegankelijk_isnull: bool
        :param restvol: De restcontainer is vol
        :type restvol: bool
        :param restvol_isnull: Whether the field has a NULL value or not.
        :type restvol_isnull: bool
        :param straatnaam: De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).
        :type straatnaam: str
        :param straatnaam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type straatnaam_in: List[str]
        :param straatnaam_isempty: Whether the field is empty or not.
        :type straatnaam_isempty: bool
        :param straatnaam_isnull: Whether the field has a NULL value or not.
        :type straatnaam_isnull: bool
        :param straatnaam_like: Matches text using wildcards (? and *).
        :type straatnaam_like: str
        :param straatnaam_not: Exclude matches; text
        :type straatnaam_not: List[str]
        :param tijd_waarneming: De tijdstip waarop de waarneming is geregistreerd.
        :type tijd_waarneming: str
        :param tijd_waarneming_gt: Greater than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gt: str
        :param tijd_waarneming_gte: Greater than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gte: str
        :param tijd_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type tijd_waarneming_in: List[str]
        :param tijd_waarneming_isnull: Whether the field has a NULL value or not.
        :type tijd_waarneming_isnull: bool
        :param tijd_waarneming_lt: Less than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lt: str
        :param tijd_waarneming_lte: Less than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lte: str
        :param tijd_waarneming_not: Exclude matches; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_not: List[str]
        :param type_waarneming: Geeft aan of de waarneming een CROW waarneming is.
        :type type_waarneming: str
        :param type_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type type_waarneming_in: List[str]
        :param type_waarneming_isempty: Whether the field is empty or not.
        :type type_waarneming_isempty: bool
        :param type_waarneming_isnull: Whether the field has a NULL value or not.
        :type type_waarneming_isnull: bool
        :param type_waarneming_like: Matches text using wildcards (? and *).
        :type type_waarneming_like: str
        :param type_waarneming_not: Exclude matches; text
        :type type_waarneming_not: List[str]
        :param veegvuil: Aangetroffen afvalsoort (veegvuil) rondom de container(s)
        :type veegvuil: bool
        :param veegvuil_isnull: Whether the field has a NULL value or not.
        :type veegvuil_isnull: bool
        :param waarde_handhaving: Hoe veel items met adresgegevens zijn er aangetroffen?
        :type waarde_handhaving: str
        :param waarde_handhaving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarde_handhaving_in: List[str]
        :param waarde_handhaving_isempty: Whether the field is empty or not.
        :type waarde_handhaving_isempty: bool
        :param waarde_handhaving_isnull: Whether the field has a NULL value or not.
        :type waarde_handhaving_isnull: bool
        :param waarde_handhaving_like: Matches text using wildcards (? and *).
        :type waarde_handhaving_like: str
        :param waarde_handhaving_not: Exclude matches; text
        :type waarde_handhaving_not: List[str]
        :param waarnemer_rol: De rol van de melder
        :type waarnemer_rol: str
        :param waarnemer_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarnemer_rol_in: List[str]
        :param waarnemer_rol_isempty: Whether the field is empty or not.
        :type waarnemer_rol_isempty: bool
        :param waarnemer_rol_isnull: Whether the field has a NULL value or not.
        :type waarnemer_rol_isnull: bool
        :param waarnemer_rol_like: Matches text using wildcards (? and *).
        :type waarnemer_rol_like: str
        :param waarnemer_rol_not: Exclude matches; text
        :type waarnemer_rol_not: List[str]
        :param zwerfafval: Aangetroffen afvalsoort (zwerfafval) rondom de container(s)
        :type zwerfafval: bool
        :param zwerfafval_isnull: Whether the field has a NULL value or not.
        :type zwerfafval_isnull: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bijplaatsingen_retrieve_slash_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            adres_type=adres_type,
            adres_type_in=adres_type_in,
            adres_type_isempty=adres_type_isempty,
            adres_type_isnull=adres_type_isnull,
            adres_type_like=adres_type_like,
            adres_type_not=adres_type_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bag_verblijfsobject_identificatie=bag_verblijfsobject_identificatie,
            bag_verblijfsobject_identificatie_in=bag_verblijfsobject_identificatie_in,
            bag_verblijfsobject_identificatie_isempty=bag_verblijfsobject_identificatie_isempty,
            bag_verblijfsobject_identificatie_isnull=bag_verblijfsobject_identificatie_isnull,
            bag_verblijfsobject_identificatie_like=bag_verblijfsobject_identificatie_like,
            bag_verblijfsobject_identificatie_not=bag_verblijfsobject_identificatie_not,
            bag_woonplaats_identificatie=bag_woonplaats_identificatie,
            bag_woonplaats_identificatie_in=bag_woonplaats_identificatie_in,
            bag_woonplaats_identificatie_isempty=bag_woonplaats_identificatie_isempty,
            bag_woonplaats_identificatie_isnull=bag_woonplaats_identificatie_isnull,
            bag_woonplaats_identificatie_like=bag_woonplaats_identificatie_like,
            bag_woonplaats_identificatie_not=bag_woonplaats_identificatie_not,
            bruingoed=bruingoed,
            bruingoed_isnull=bruingoed_isnull,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            containervies=containervies,
            containervies_isnull=containervies_isnull,
            crow_score=crow_score,
            crow_score_in=crow_score_in,
            crow_score_isempty=crow_score_isempty,
            crow_score_isnull=crow_score_isnull,
            crow_score_like=crow_score_like,
            crow_score_not=crow_score_not,
            datum_waarneming=datum_waarneming,
            datum_waarneming_gt=datum_waarneming_gt,
            datum_waarneming_gte=datum_waarneming_gte,
            datum_waarneming_in=datum_waarneming_in,
            datum_waarneming_isnull=datum_waarneming_isnull,
            datum_waarneming_lt=datum_waarneming_lt,
            datum_waarneming_lte=datum_waarneming_lte,
            datum_waarneming_not=datum_waarneming_not,
            dumpplek=dumpplek,
            dumpplek_isnull=dumpplek_isnull,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            gbd_buurt_code=gbd_buurt_code,
            gbd_buurt_code_in=gbd_buurt_code_in,
            gbd_buurt_code_isempty=gbd_buurt_code_isempty,
            gbd_buurt_code_isnull=gbd_buurt_code_isnull,
            gbd_buurt_code_like=gbd_buurt_code_like,
            gbd_buurt_code_not=gbd_buurt_code_not,
            gbd_stadsdeel_naam=gbd_stadsdeel_naam,
            gbd_stadsdeel_naam_in=gbd_stadsdeel_naam_in,
            gbd_stadsdeel_naam_isempty=gbd_stadsdeel_naam_isempty,
            gbd_stadsdeel_naam_isnull=gbd_stadsdeel_naam_isnull,
            gbd_stadsdeel_naam_like=gbd_stadsdeel_naam_like,
            gbd_stadsdeel_naam_not=gbd_stadsdeel_naam_not,
            gebruikers_rol=gebruikers_rol,
            gebruikers_rol_in=gebruikers_rol_in,
            gebruikers_rol_isempty=gebruikers_rol_isempty,
            gebruikers_rol_isnull=gebruikers_rol_isnull,
            gebruikers_rol_like=gebruikers_rol_like,
            gebruikers_rol_not=gebruikers_rol_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            glas=glas,
            glas_isnull=glas_isnull,
            glasgestremd=glasgestremd,
            glasgestremd_isnull=glasgestremd_isnull,
            glastoegankelijk=glastoegankelijk,
            glastoegankelijk_isnull=glastoegankelijk_isnull,
            glasvol=glasvol,
            glasvol_isnull=glasvol_isnull,
            grof=grof,
            grof_isnull=grof_isnull,
            grofvuildagen=grofvuildagen,
            grofvuildagen_in=grofvuildagen_in,
            grofvuildagen_isempty=grofvuildagen_isempty,
            grofvuildagen_isnull=grofvuildagen_isnull,
            grofvuildagen_like=grofvuildagen_like,
            grofvuildagen_not=grofvuildagen_not,
            handhaving=handhaving,
            handhaving_isnull=handhaving_isnull,
            huisvuil=huisvuil,
            huisvuil_isnull=huisvuil_isnull,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            karton=karton,
            karton_isnull=karton_isnull,
            locatie_waarnemer=locatie_waarnemer,
            locatie_waarnemer_in=locatie_waarnemer_in,
            locatie_waarnemer_isempty=locatie_waarnemer_isempty,
            locatie_waarnemer_isnull=locatie_waarnemer_isnull,
            locatie_waarnemer_like=locatie_waarnemer_like,
            locatie_waarnemer_not=locatie_waarnemer_not,
            melding_door_collega_doorgezet=melding_door_collega_doorgezet,
            melding_door_collega_doorgezet_in=melding_door_collega_doorgezet_in,
            melding_door_collega_doorgezet_isempty=melding_door_collega_doorgezet_isempty,
            melding_door_collega_doorgezet_isnull=melding_door_collega_doorgezet_isnull,
            melding_door_collega_doorgezet_like=melding_door_collega_doorgezet_like,
            melding_door_collega_doorgezet_not=melding_door_collega_doorgezet_not,
            naam_melding_doorgezet=naam_melding_doorgezet,
            naam_melding_doorgezet_in=naam_melding_doorgezet_in,
            naam_melding_doorgezet_isempty=naam_melding_doorgezet_isempty,
            naam_melding_doorgezet_isnull=naam_melding_doorgezet_isnull,
            naam_melding_doorgezet_like=naam_melding_doorgezet_like,
            naam_melding_doorgezet_not=naam_melding_doorgezet_not,
            overig=overig,
            overig_isnull=overig_isnull,
            papiergestremd=papiergestremd,
            papiergestremd_isnull=papiergestremd_isnull,
            papiertoegankelijk=papiertoegankelijk,
            papiertoegankelijk_isnull=papiertoegankelijk_isnull,
            papiervol=papiervol,
            papiervol_isnull=papiervol_isnull,
            postcode=postcode,
            postcode_in=postcode_in,
            postcode_isempty=postcode_isempty,
            postcode_isnull=postcode_isnull,
            postcode_like=postcode_like,
            postcode_not=postcode_not,
            restgestremd=restgestremd,
            restgestremd_isnull=restgestremd_isnull,
            resttoegankelijk=resttoegankelijk,
            resttoegankelijk_isnull=resttoegankelijk_isnull,
            restvol=restvol,
            restvol_isnull=restvol_isnull,
            straatnaam=straatnaam,
            straatnaam_in=straatnaam_in,
            straatnaam_isempty=straatnaam_isempty,
            straatnaam_isnull=straatnaam_isnull,
            straatnaam_like=straatnaam_like,
            straatnaam_not=straatnaam_not,
            tijd_waarneming=tijd_waarneming,
            tijd_waarneming_gt=tijd_waarneming_gt,
            tijd_waarneming_gte=tijd_waarneming_gte,
            tijd_waarneming_in=tijd_waarneming_in,
            tijd_waarneming_isnull=tijd_waarneming_isnull,
            tijd_waarneming_lt=tijd_waarneming_lt,
            tijd_waarneming_lte=tijd_waarneming_lte,
            tijd_waarneming_not=tijd_waarneming_not,
            type_waarneming=type_waarneming,
            type_waarneming_in=type_waarneming_in,
            type_waarneming_isempty=type_waarneming_isempty,
            type_waarneming_isnull=type_waarneming_isnull,
            type_waarneming_like=type_waarneming_like,
            type_waarneming_not=type_waarneming_not,
            veegvuil=veegvuil,
            veegvuil_isnull=veegvuil_isnull,
            waarde_handhaving=waarde_handhaving,
            waarde_handhaving_in=waarde_handhaving_in,
            waarde_handhaving_isempty=waarde_handhaving_isempty,
            waarde_handhaving_isnull=waarde_handhaving_isnull,
            waarde_handhaving_like=waarde_handhaving_like,
            waarde_handhaving_not=waarde_handhaving_not,
            waarnemer_rol=waarnemer_rol,
            waarnemer_rol_in=waarnemer_rol_in,
            waarnemer_rol_isempty=waarnemer_rol_isempty,
            waarnemer_rol_isnull=waarnemer_rol_isnull,
            waarnemer_rol_like=waarnemer_rol_like,
            waarnemer_rol_not=waarnemer_rol_not,
            zwerfafval=zwerfafval,
            zwerfafval_isnull=zwerfafval_isnull,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Huishoudelijkafvalbijplaatsingen",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def huishoudelijkafval_bijplaatsingen_retrieve_slash_with_http_info(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        adres_type: Annotated[Optional[StrictStr], Field(description="Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. ")] = None,
        adres_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        adres_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        adres_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        adres_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        adres_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_woonplaats_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van een woonplaats")] = None,
        bag_woonplaats_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_woonplaats_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_woonplaats_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_woonplaats_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_woonplaats_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bruingoed: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (bruingoed) rondom de container(s)")] = None,
        bruingoed_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        containervies: Annotated[Optional[StrictBool], Field(description="De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt")] = None,
        containervies_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score: Annotated[Optional[StrictStr], Field(description="De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks")] = None,
        crow_score_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        crow_score_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        crow_score_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        crow_score_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_waarneming: Annotated[Optional[date], Field(description="De datum waarop de waarneming is geregistreerd.")] = None,
        datum_waarneming_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_waarneming_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_waarneming_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_waarneming_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        dumpplek: Annotated[Optional[StrictBool], Field(description="Het geeft aan of de locatie een dumpplek is.")] = None,
        dumpplek_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_buurt_code: Annotated[Optional[StrictStr], Field(description="Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)")] = None,
        gbd_buurt_code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_stadsdeel_naam: Annotated[Optional[StrictStr], Field(description="Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        gbd_stadsdeel_naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_stadsdeel_naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_stadsdeel_naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_stadsdeel_naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_stadsdeel_naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gebruikers_rol: Annotated[Optional[StrictStr], Field(description="De rol van de gebruiker in de applicatie.")] = None,
        gebruikers_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gebruikers_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gebruikers_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gebruikers_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gebruikers_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de waarneming RD(epsg:28992)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        glas: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (glas afval) rondom de container(s)")] = None,
        glas_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasgestremd: Annotated[Optional[StrictBool], Field(description="De glascontainer is gestremd")] = None,
        glasgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glastoegankelijk: Annotated[Optional[StrictBool], Field(description="De glascontainer is toegangelijk")] = None,
        glastoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasvol: Annotated[Optional[StrictBool], Field(description="De glascontainer is vol")] = None,
        glasvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grof: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (grofvuil) rondom de container(s)")] = None,
        grof_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen: Annotated[Optional[StrictStr], Field(description="De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.")] = None,
        grofvuildagen_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        grofvuildagen_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        grofvuildagen_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        grofvuildagen_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        handhaving: Annotated[Optional[StrictBool], Field(description="Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig")] = None,
        handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        huisvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (huisvuil) rondom de container(s)")] = None,
        huisvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het record.")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        karton: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (karton) rondom de container(s)")] = None,
        karton_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer: Annotated[Optional[StrictStr], Field(description="De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.")] = None,
        locatie_waarnemer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        locatie_waarnemer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        locatie_waarnemer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        locatie_waarnemer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        melding_door_collega_doorgezet: Annotated[Optional[StrictStr], Field(description="Het geeft aan of de waarneming door een collega is doorgezet.")] = None,
        melding_door_collega_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        melding_door_collega_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        melding_door_collega_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        melding_door_collega_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        melding_door_collega_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam_melding_doorgezet: Annotated[Optional[StrictStr], Field(description="Soort doorgezette waarneming.")] = None,
        naam_melding_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_melding_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_melding_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_melding_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_melding_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        overig: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (overig) rondom de container(s)")] = None,
        overig_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiergestremd: Annotated[Optional[StrictBool], Field(description="De papiercontainer is gestremd")] = None,
        papiergestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiertoegankelijk: Annotated[Optional[StrictBool], Field(description="De papiercontainer is toegankelijk")] = None,
        papiertoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiervol: Annotated[Optional[StrictBool], Field(description="De papiercontainer is vol")] = None,
        papiervol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        postcode_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        postcode_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        postcode_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        postcode_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        restgestremd: Annotated[Optional[StrictBool], Field(description="De restcontainer is gestremd")] = None,
        restgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        resttoegankelijk: Annotated[Optional[StrictBool], Field(description="De restcontainer is toegankelijk")] = None,
        resttoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        restvol: Annotated[Optional[StrictBool], Field(description="De restcontainer is vol")] = None,
        restvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam: Annotated[Optional[StrictStr], Field(description="De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).")] = None,
        straatnaam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        straatnaam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        straatnaam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        straatnaam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        tijd_waarneming: Annotated[Optional[StrictStr], Field(description="De tijdstip waarop de waarneming is geregistreerd.")] = None,
        tijd_waarneming_gt: Annotated[Optional[StrictStr], Field(description="Greater than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_gte: Annotated[Optional[StrictStr], Field(description="Greater than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        tijd_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        tijd_waarneming_lt: Annotated[Optional[StrictStr], Field(description="Less than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_lte: Annotated[Optional[StrictStr], Field(description="Less than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; use hh:mm[:ss[.ms]]")] = None,
        type_waarneming: Annotated[Optional[StrictStr], Field(description="Geeft aan of de waarneming een CROW waarneming is.")] = None,
        type_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        type_waarneming_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        type_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        type_waarneming_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        type_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        veegvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (veegvuil) rondom de container(s)")] = None,
        veegvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving: Annotated[Optional[StrictStr], Field(description="Hoe veel items met adresgegevens zijn er aangetroffen?")] = None,
        waarde_handhaving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarde_handhaving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarde_handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarde_handhaving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        waarnemer_rol: Annotated[Optional[StrictStr], Field(description="De rol van de melder")] = None,
        waarnemer_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarnemer_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarnemer_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarnemer_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarnemer_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        zwerfafval: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (zwerfafval) rondom de container(s)")] = None,
        zwerfafval_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Huishoudelijkafvalbijplaatsingen]:
        """huishoudelijkafval_bijplaatsingen_retrieve_slash


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param adres_type: Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. 
        :type adres_type: str
        :param adres_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type adres_type_in: List[str]
        :param adres_type_isempty: Whether the field is empty or not.
        :type adres_type_isempty: bool
        :param adres_type_isnull: Whether the field has a NULL value or not.
        :type adres_type_isnull: bool
        :param adres_type_like: Matches text using wildcards (? and *).
        :type adres_type_like: str
        :param adres_type_not: Exclude matches; text
        :type adres_type_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bag_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_verblijfsobject_identificatie: str
        :param bag_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_verblijfsobject_identificatie_in: List[str]
        :param bag_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_verblijfsobject_identificatie_isempty: bool
        :param bag_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_verblijfsobject_identificatie_isnull: bool
        :param bag_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_verblijfsobject_identificatie_like: str
        :param bag_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_verblijfsobject_identificatie_not: List[str]
        :param bag_woonplaats_identificatie: Unieke aanduiding van een woonplaats
        :type bag_woonplaats_identificatie: str
        :param bag_woonplaats_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_woonplaats_identificatie_in: List[str]
        :param bag_woonplaats_identificatie_isempty: Whether the field is empty or not.
        :type bag_woonplaats_identificatie_isempty: bool
        :param bag_woonplaats_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_woonplaats_identificatie_isnull: bool
        :param bag_woonplaats_identificatie_like: Matches text using wildcards (? and *).
        :type bag_woonplaats_identificatie_like: str
        :param bag_woonplaats_identificatie_not: Exclude matches; text
        :type bag_woonplaats_identificatie_not: List[str]
        :param bruingoed: Aangetroffen afvalsoort (bruingoed) rondom de container(s)
        :type bruingoed: bool
        :param bruingoed_isnull: Whether the field has a NULL value or not.
        :type bruingoed_isnull: bool
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param containervies: De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt
        :type containervies: bool
        :param containervies_isnull: Whether the field has a NULL value or not.
        :type containervies_isnull: bool
        :param crow_score: De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks
        :type crow_score: str
        :param crow_score_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type crow_score_in: List[str]
        :param crow_score_isempty: Whether the field is empty or not.
        :type crow_score_isempty: bool
        :param crow_score_isnull: Whether the field has a NULL value or not.
        :type crow_score_isnull: bool
        :param crow_score_like: Matches text using wildcards (? and *).
        :type crow_score_like: str
        :param crow_score_not: Exclude matches; text
        :type crow_score_not: List[str]
        :param datum_waarneming: De datum waarop de waarneming is geregistreerd.
        :type datum_waarneming: date
        :param datum_waarneming_gt: Greater than; use yyyy-mm-dd
        :type datum_waarneming_gt: date
        :param datum_waarneming_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_waarneming_gte: date
        :param datum_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_waarneming_in: List[date]
        :param datum_waarneming_isnull: Whether the field has a NULL value or not.
        :type datum_waarneming_isnull: bool
        :param datum_waarneming_lt: Less than; use yyyy-mm-dd
        :type datum_waarneming_lt: date
        :param datum_waarneming_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_waarneming_lte: date
        :param datum_waarneming_not: Exclude matches; use yyyy-mm-dd
        :type datum_waarneming_not: List[date]
        :param dumpplek: Het geeft aan of de locatie een dumpplek is.
        :type dumpplek: bool
        :param dumpplek_isnull: Whether the field has a NULL value or not.
        :type dumpplek_isnull: bool
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param gbd_buurt_code: Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)
        :type gbd_buurt_code: str
        :param gbd_buurt_code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_code_in: List[str]
        :param gbd_buurt_code_isempty: Whether the field is empty or not.
        :type gbd_buurt_code_isempty: bool
        :param gbd_buurt_code_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_code_isnull: bool
        :param gbd_buurt_code_like: Matches text using wildcards (? and *).
        :type gbd_buurt_code_like: str
        :param gbd_buurt_code_not: Exclude matches; text
        :type gbd_buurt_code_not: List[str]
        :param gbd_stadsdeel_naam: Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type gbd_stadsdeel_naam: str
        :param gbd_stadsdeel_naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_stadsdeel_naam_in: List[str]
        :param gbd_stadsdeel_naam_isempty: Whether the field is empty or not.
        :type gbd_stadsdeel_naam_isempty: bool
        :param gbd_stadsdeel_naam_isnull: Whether the field has a NULL value or not.
        :type gbd_stadsdeel_naam_isnull: bool
        :param gbd_stadsdeel_naam_like: Matches text using wildcards (? and *).
        :type gbd_stadsdeel_naam_like: str
        :param gbd_stadsdeel_naam_not: Exclude matches; text
        :type gbd_stadsdeel_naam_not: List[str]
        :param gebruikers_rol: De rol van de gebruiker in de applicatie.
        :type gebruikers_rol: str
        :param gebruikers_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gebruikers_rol_in: List[str]
        :param gebruikers_rol_isempty: Whether the field is empty or not.
        :type gebruikers_rol_isempty: bool
        :param gebruikers_rol_isnull: Whether the field has a NULL value or not.
        :type gebruikers_rol_isnull: bool
        :param gebruikers_rol_like: Matches text using wildcards (? and *).
        :type gebruikers_rol_like: str
        :param gebruikers_rol_not: Exclude matches; text
        :type gebruikers_rol_not: List[str]
        :param geometrie: Geometrie van het type POINT van de waarneming RD(epsg:28992)
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param glas: Aangetroffen afvalsoort (glas afval) rondom de container(s)
        :type glas: bool
        :param glas_isnull: Whether the field has a NULL value or not.
        :type glas_isnull: bool
        :param glasgestremd: De glascontainer is gestremd
        :type glasgestremd: bool
        :param glasgestremd_isnull: Whether the field has a NULL value or not.
        :type glasgestremd_isnull: bool
        :param glastoegankelijk: De glascontainer is toegangelijk
        :type glastoegankelijk: bool
        :param glastoegankelijk_isnull: Whether the field has a NULL value or not.
        :type glastoegankelijk_isnull: bool
        :param glasvol: De glascontainer is vol
        :type glasvol: bool
        :param glasvol_isnull: Whether the field has a NULL value or not.
        :type glasvol_isnull: bool
        :param grof: Aangetroffen afvalsoort (grofvuil) rondom de container(s)
        :type grof: bool
        :param grof_isnull: Whether the field has a NULL value or not.
        :type grof_isnull: bool
        :param grofvuildagen: De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.
        :type grofvuildagen: str
        :param grofvuildagen_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type grofvuildagen_in: List[str]
        :param grofvuildagen_isempty: Whether the field is empty or not.
        :type grofvuildagen_isempty: bool
        :param grofvuildagen_isnull: Whether the field has a NULL value or not.
        :type grofvuildagen_isnull: bool
        :param grofvuildagen_like: Matches text using wildcards (? and *).
        :type grofvuildagen_like: str
        :param grofvuildagen_not: Exclude matches; text
        :type grofvuildagen_not: List[str]
        :param handhaving: Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig
        :type handhaving: bool
        :param handhaving_isnull: Whether the field has a NULL value or not.
        :type handhaving_isnull: bool
        :param huisvuil: Aangetroffen afvalsoort (huisvuil) rondom de container(s)
        :type huisvuil: bool
        :param huisvuil_isnull: Whether the field has a NULL value or not.
        :type huisvuil_isnull: bool
        :param id2: Unieke aanduiding van het record.
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param karton: Aangetroffen afvalsoort (karton) rondom de container(s)
        :type karton: bool
        :param karton_isnull: Whether the field has a NULL value or not.
        :type karton_isnull: bool
        :param locatie_waarnemer: De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.
        :type locatie_waarnemer: str
        :param locatie_waarnemer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type locatie_waarnemer_in: List[str]
        :param locatie_waarnemer_isempty: Whether the field is empty or not.
        :type locatie_waarnemer_isempty: bool
        :param locatie_waarnemer_isnull: Whether the field has a NULL value or not.
        :type locatie_waarnemer_isnull: bool
        :param locatie_waarnemer_like: Matches text using wildcards (? and *).
        :type locatie_waarnemer_like: str
        :param locatie_waarnemer_not: Exclude matches; text
        :type locatie_waarnemer_not: List[str]
        :param melding_door_collega_doorgezet: Het geeft aan of de waarneming door een collega is doorgezet.
        :type melding_door_collega_doorgezet: str
        :param melding_door_collega_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type melding_door_collega_doorgezet_in: List[str]
        :param melding_door_collega_doorgezet_isempty: Whether the field is empty or not.
        :type melding_door_collega_doorgezet_isempty: bool
        :param melding_door_collega_doorgezet_isnull: Whether the field has a NULL value or not.
        :type melding_door_collega_doorgezet_isnull: bool
        :param melding_door_collega_doorgezet_like: Matches text using wildcards (? and *).
        :type melding_door_collega_doorgezet_like: str
        :param melding_door_collega_doorgezet_not: Exclude matches; text
        :type melding_door_collega_doorgezet_not: List[str]
        :param naam_melding_doorgezet: Soort doorgezette waarneming.
        :type naam_melding_doorgezet: str
        :param naam_melding_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_melding_doorgezet_in: List[str]
        :param naam_melding_doorgezet_isempty: Whether the field is empty or not.
        :type naam_melding_doorgezet_isempty: bool
        :param naam_melding_doorgezet_isnull: Whether the field has a NULL value or not.
        :type naam_melding_doorgezet_isnull: bool
        :param naam_melding_doorgezet_like: Matches text using wildcards (? and *).
        :type naam_melding_doorgezet_like: str
        :param naam_melding_doorgezet_not: Exclude matches; text
        :type naam_melding_doorgezet_not: List[str]
        :param overig: Aangetroffen afvalsoort (overig) rondom de container(s)
        :type overig: bool
        :param overig_isnull: Whether the field has a NULL value or not.
        :type overig_isnull: bool
        :param papiergestremd: De papiercontainer is gestremd
        :type papiergestremd: bool
        :param papiergestremd_isnull: Whether the field has a NULL value or not.
        :type papiergestremd_isnull: bool
        :param papiertoegankelijk: De papiercontainer is toegankelijk
        :type papiertoegankelijk: bool
        :param papiertoegankelijk_isnull: Whether the field has a NULL value or not.
        :type papiertoegankelijk_isnull: bool
        :param papiervol: De papiercontainer is vol
        :type papiervol: bool
        :param papiervol_isnull: Whether the field has a NULL value or not.
        :type papiervol_isnull: bool
        :param postcode: De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type postcode: str
        :param postcode_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type postcode_in: List[str]
        :param postcode_isempty: Whether the field is empty or not.
        :type postcode_isempty: bool
        :param postcode_isnull: Whether the field has a NULL value or not.
        :type postcode_isnull: bool
        :param postcode_like: Matches text using wildcards (? and *).
        :type postcode_like: str
        :param postcode_not: Exclude matches; text
        :type postcode_not: List[str]
        :param restgestremd: De restcontainer is gestremd
        :type restgestremd: bool
        :param restgestremd_isnull: Whether the field has a NULL value or not.
        :type restgestremd_isnull: bool
        :param resttoegankelijk: De restcontainer is toegankelijk
        :type resttoegankelijk: bool
        :param resttoegankelijk_isnull: Whether the field has a NULL value or not.
        :type resttoegankelijk_isnull: bool
        :param restvol: De restcontainer is vol
        :type restvol: bool
        :param restvol_isnull: Whether the field has a NULL value or not.
        :type restvol_isnull: bool
        :param straatnaam: De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).
        :type straatnaam: str
        :param straatnaam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type straatnaam_in: List[str]
        :param straatnaam_isempty: Whether the field is empty or not.
        :type straatnaam_isempty: bool
        :param straatnaam_isnull: Whether the field has a NULL value or not.
        :type straatnaam_isnull: bool
        :param straatnaam_like: Matches text using wildcards (? and *).
        :type straatnaam_like: str
        :param straatnaam_not: Exclude matches; text
        :type straatnaam_not: List[str]
        :param tijd_waarneming: De tijdstip waarop de waarneming is geregistreerd.
        :type tijd_waarneming: str
        :param tijd_waarneming_gt: Greater than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gt: str
        :param tijd_waarneming_gte: Greater than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gte: str
        :param tijd_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type tijd_waarneming_in: List[str]
        :param tijd_waarneming_isnull: Whether the field has a NULL value or not.
        :type tijd_waarneming_isnull: bool
        :param tijd_waarneming_lt: Less than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lt: str
        :param tijd_waarneming_lte: Less than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lte: str
        :param tijd_waarneming_not: Exclude matches; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_not: List[str]
        :param type_waarneming: Geeft aan of de waarneming een CROW waarneming is.
        :type type_waarneming: str
        :param type_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type type_waarneming_in: List[str]
        :param type_waarneming_isempty: Whether the field is empty or not.
        :type type_waarneming_isempty: bool
        :param type_waarneming_isnull: Whether the field has a NULL value or not.
        :type type_waarneming_isnull: bool
        :param type_waarneming_like: Matches text using wildcards (? and *).
        :type type_waarneming_like: str
        :param type_waarneming_not: Exclude matches; text
        :type type_waarneming_not: List[str]
        :param veegvuil: Aangetroffen afvalsoort (veegvuil) rondom de container(s)
        :type veegvuil: bool
        :param veegvuil_isnull: Whether the field has a NULL value or not.
        :type veegvuil_isnull: bool
        :param waarde_handhaving: Hoe veel items met adresgegevens zijn er aangetroffen?
        :type waarde_handhaving: str
        :param waarde_handhaving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarde_handhaving_in: List[str]
        :param waarde_handhaving_isempty: Whether the field is empty or not.
        :type waarde_handhaving_isempty: bool
        :param waarde_handhaving_isnull: Whether the field has a NULL value or not.
        :type waarde_handhaving_isnull: bool
        :param waarde_handhaving_like: Matches text using wildcards (? and *).
        :type waarde_handhaving_like: str
        :param waarde_handhaving_not: Exclude matches; text
        :type waarde_handhaving_not: List[str]
        :param waarnemer_rol: De rol van de melder
        :type waarnemer_rol: str
        :param waarnemer_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarnemer_rol_in: List[str]
        :param waarnemer_rol_isempty: Whether the field is empty or not.
        :type waarnemer_rol_isempty: bool
        :param waarnemer_rol_isnull: Whether the field has a NULL value or not.
        :type waarnemer_rol_isnull: bool
        :param waarnemer_rol_like: Matches text using wildcards (? and *).
        :type waarnemer_rol_like: str
        :param waarnemer_rol_not: Exclude matches; text
        :type waarnemer_rol_not: List[str]
        :param zwerfafval: Aangetroffen afvalsoort (zwerfafval) rondom de container(s)
        :type zwerfafval: bool
        :param zwerfafval_isnull: Whether the field has a NULL value or not.
        :type zwerfafval_isnull: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bijplaatsingen_retrieve_slash_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            adres_type=adres_type,
            adres_type_in=adres_type_in,
            adres_type_isempty=adres_type_isempty,
            adres_type_isnull=adres_type_isnull,
            adres_type_like=adres_type_like,
            adres_type_not=adres_type_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bag_verblijfsobject_identificatie=bag_verblijfsobject_identificatie,
            bag_verblijfsobject_identificatie_in=bag_verblijfsobject_identificatie_in,
            bag_verblijfsobject_identificatie_isempty=bag_verblijfsobject_identificatie_isempty,
            bag_verblijfsobject_identificatie_isnull=bag_verblijfsobject_identificatie_isnull,
            bag_verblijfsobject_identificatie_like=bag_verblijfsobject_identificatie_like,
            bag_verblijfsobject_identificatie_not=bag_verblijfsobject_identificatie_not,
            bag_woonplaats_identificatie=bag_woonplaats_identificatie,
            bag_woonplaats_identificatie_in=bag_woonplaats_identificatie_in,
            bag_woonplaats_identificatie_isempty=bag_woonplaats_identificatie_isempty,
            bag_woonplaats_identificatie_isnull=bag_woonplaats_identificatie_isnull,
            bag_woonplaats_identificatie_like=bag_woonplaats_identificatie_like,
            bag_woonplaats_identificatie_not=bag_woonplaats_identificatie_not,
            bruingoed=bruingoed,
            bruingoed_isnull=bruingoed_isnull,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            containervies=containervies,
            containervies_isnull=containervies_isnull,
            crow_score=crow_score,
            crow_score_in=crow_score_in,
            crow_score_isempty=crow_score_isempty,
            crow_score_isnull=crow_score_isnull,
            crow_score_like=crow_score_like,
            crow_score_not=crow_score_not,
            datum_waarneming=datum_waarneming,
            datum_waarneming_gt=datum_waarneming_gt,
            datum_waarneming_gte=datum_waarneming_gte,
            datum_waarneming_in=datum_waarneming_in,
            datum_waarneming_isnull=datum_waarneming_isnull,
            datum_waarneming_lt=datum_waarneming_lt,
            datum_waarneming_lte=datum_waarneming_lte,
            datum_waarneming_not=datum_waarneming_not,
            dumpplek=dumpplek,
            dumpplek_isnull=dumpplek_isnull,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            gbd_buurt_code=gbd_buurt_code,
            gbd_buurt_code_in=gbd_buurt_code_in,
            gbd_buurt_code_isempty=gbd_buurt_code_isempty,
            gbd_buurt_code_isnull=gbd_buurt_code_isnull,
            gbd_buurt_code_like=gbd_buurt_code_like,
            gbd_buurt_code_not=gbd_buurt_code_not,
            gbd_stadsdeel_naam=gbd_stadsdeel_naam,
            gbd_stadsdeel_naam_in=gbd_stadsdeel_naam_in,
            gbd_stadsdeel_naam_isempty=gbd_stadsdeel_naam_isempty,
            gbd_stadsdeel_naam_isnull=gbd_stadsdeel_naam_isnull,
            gbd_stadsdeel_naam_like=gbd_stadsdeel_naam_like,
            gbd_stadsdeel_naam_not=gbd_stadsdeel_naam_not,
            gebruikers_rol=gebruikers_rol,
            gebruikers_rol_in=gebruikers_rol_in,
            gebruikers_rol_isempty=gebruikers_rol_isempty,
            gebruikers_rol_isnull=gebruikers_rol_isnull,
            gebruikers_rol_like=gebruikers_rol_like,
            gebruikers_rol_not=gebruikers_rol_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            glas=glas,
            glas_isnull=glas_isnull,
            glasgestremd=glasgestremd,
            glasgestremd_isnull=glasgestremd_isnull,
            glastoegankelijk=glastoegankelijk,
            glastoegankelijk_isnull=glastoegankelijk_isnull,
            glasvol=glasvol,
            glasvol_isnull=glasvol_isnull,
            grof=grof,
            grof_isnull=grof_isnull,
            grofvuildagen=grofvuildagen,
            grofvuildagen_in=grofvuildagen_in,
            grofvuildagen_isempty=grofvuildagen_isempty,
            grofvuildagen_isnull=grofvuildagen_isnull,
            grofvuildagen_like=grofvuildagen_like,
            grofvuildagen_not=grofvuildagen_not,
            handhaving=handhaving,
            handhaving_isnull=handhaving_isnull,
            huisvuil=huisvuil,
            huisvuil_isnull=huisvuil_isnull,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            karton=karton,
            karton_isnull=karton_isnull,
            locatie_waarnemer=locatie_waarnemer,
            locatie_waarnemer_in=locatie_waarnemer_in,
            locatie_waarnemer_isempty=locatie_waarnemer_isempty,
            locatie_waarnemer_isnull=locatie_waarnemer_isnull,
            locatie_waarnemer_like=locatie_waarnemer_like,
            locatie_waarnemer_not=locatie_waarnemer_not,
            melding_door_collega_doorgezet=melding_door_collega_doorgezet,
            melding_door_collega_doorgezet_in=melding_door_collega_doorgezet_in,
            melding_door_collega_doorgezet_isempty=melding_door_collega_doorgezet_isempty,
            melding_door_collega_doorgezet_isnull=melding_door_collega_doorgezet_isnull,
            melding_door_collega_doorgezet_like=melding_door_collega_doorgezet_like,
            melding_door_collega_doorgezet_not=melding_door_collega_doorgezet_not,
            naam_melding_doorgezet=naam_melding_doorgezet,
            naam_melding_doorgezet_in=naam_melding_doorgezet_in,
            naam_melding_doorgezet_isempty=naam_melding_doorgezet_isempty,
            naam_melding_doorgezet_isnull=naam_melding_doorgezet_isnull,
            naam_melding_doorgezet_like=naam_melding_doorgezet_like,
            naam_melding_doorgezet_not=naam_melding_doorgezet_not,
            overig=overig,
            overig_isnull=overig_isnull,
            papiergestremd=papiergestremd,
            papiergestremd_isnull=papiergestremd_isnull,
            papiertoegankelijk=papiertoegankelijk,
            papiertoegankelijk_isnull=papiertoegankelijk_isnull,
            papiervol=papiervol,
            papiervol_isnull=papiervol_isnull,
            postcode=postcode,
            postcode_in=postcode_in,
            postcode_isempty=postcode_isempty,
            postcode_isnull=postcode_isnull,
            postcode_like=postcode_like,
            postcode_not=postcode_not,
            restgestremd=restgestremd,
            restgestremd_isnull=restgestremd_isnull,
            resttoegankelijk=resttoegankelijk,
            resttoegankelijk_isnull=resttoegankelijk_isnull,
            restvol=restvol,
            restvol_isnull=restvol_isnull,
            straatnaam=straatnaam,
            straatnaam_in=straatnaam_in,
            straatnaam_isempty=straatnaam_isempty,
            straatnaam_isnull=straatnaam_isnull,
            straatnaam_like=straatnaam_like,
            straatnaam_not=straatnaam_not,
            tijd_waarneming=tijd_waarneming,
            tijd_waarneming_gt=tijd_waarneming_gt,
            tijd_waarneming_gte=tijd_waarneming_gte,
            tijd_waarneming_in=tijd_waarneming_in,
            tijd_waarneming_isnull=tijd_waarneming_isnull,
            tijd_waarneming_lt=tijd_waarneming_lt,
            tijd_waarneming_lte=tijd_waarneming_lte,
            tijd_waarneming_not=tijd_waarneming_not,
            type_waarneming=type_waarneming,
            type_waarneming_in=type_waarneming_in,
            type_waarneming_isempty=type_waarneming_isempty,
            type_waarneming_isnull=type_waarneming_isnull,
            type_waarneming_like=type_waarneming_like,
            type_waarneming_not=type_waarneming_not,
            veegvuil=veegvuil,
            veegvuil_isnull=veegvuil_isnull,
            waarde_handhaving=waarde_handhaving,
            waarde_handhaving_in=waarde_handhaving_in,
            waarde_handhaving_isempty=waarde_handhaving_isempty,
            waarde_handhaving_isnull=waarde_handhaving_isnull,
            waarde_handhaving_like=waarde_handhaving_like,
            waarde_handhaving_not=waarde_handhaving_not,
            waarnemer_rol=waarnemer_rol,
            waarnemer_rol_in=waarnemer_rol_in,
            waarnemer_rol_isempty=waarnemer_rol_isempty,
            waarnemer_rol_isnull=waarnemer_rol_isnull,
            waarnemer_rol_like=waarnemer_rol_like,
            waarnemer_rol_not=waarnemer_rol_not,
            zwerfafval=zwerfafval,
            zwerfafval_isnull=zwerfafval_isnull,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Huishoudelijkafvalbijplaatsingen",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def huishoudelijkafval_bijplaatsingen_retrieve_slash_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        csv_header: Annotated[Optional[StrictStr], Field(description="Specify type of header for csv file")] = None,
        csv_separator: Annotated[Optional[StrictStr], Field(description="Specify type of separator for csv file")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        adres_type: Annotated[Optional[StrictStr], Field(description="Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. ")] = None,
        adres_type_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        adres_type_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        adres_type_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        adres_type_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        adres_type_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_nummeraanduiding_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een nummeraanduiding")] = None,
        bag_nummeraanduiding_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_nummeraanduiding_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_nummeraanduiding_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_nummeraanduiding_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_nummeraanduiding_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_openbareruimte_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van een openbare ruimte")] = None,
        bag_openbareruimte_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_openbareruimte_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_openbareruimte_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_openbareruimte_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_openbareruimte_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_verblijfsobject_identificatie: Annotated[Optional[StrictStr], Field(description="De unieke aanduiding van een verblijfsobject")] = None,
        bag_verblijfsobject_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_verblijfsobject_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_verblijfsobject_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_verblijfsobject_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_verblijfsobject_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bag_woonplaats_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van een woonplaats")] = None,
        bag_woonplaats_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bag_woonplaats_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bag_woonplaats_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bag_woonplaats_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bag_woonplaats_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bruingoed: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (bruingoed) rondom de container(s)")] = None,
        bruingoed_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id: Annotated[Optional[StrictStr], Field(description="Uniek identificerend kenmerk van cluster")] = None,
        cluster_id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        cluster_id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        cluster_id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        cluster_id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        cluster_id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        containervies: Annotated[Optional[StrictBool], Field(description="De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt")] = None,
        containervies_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score: Annotated[Optional[StrictStr], Field(description="De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks")] = None,
        crow_score_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        crow_score_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        crow_score_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        crow_score_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        crow_score_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        datum_waarneming: Annotated[Optional[date], Field(description="De datum waarop de waarneming is geregistreerd.")] = None,
        datum_waarneming_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_waarneming_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_waarneming_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_waarneming_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_waarneming_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        dumpplek: Annotated[Optional[StrictBool], Field(description="Het geeft aan of de locatie een dumpplek is.")] = None,
        dumpplek_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        gbd_buurt_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_buurt_code: Annotated[Optional[StrictStr], Field(description="Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)")] = None,
        gbd_buurt_code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_buurt_code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_buurt_code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_buurt_code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_buurt_code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gbd_stadsdeel_naam: Annotated[Optional[StrictStr], Field(description="Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        gbd_stadsdeel_naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gbd_stadsdeel_naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gbd_stadsdeel_naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gbd_stadsdeel_naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gbd_stadsdeel_naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        gebruikers_rol: Annotated[Optional[StrictStr], Field(description="De rol van de gebruiker in de applicatie.")] = None,
        gebruikers_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        gebruikers_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        gebruikers_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        gebruikers_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        gebruikers_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrie van het type POINT van de waarneming RD(epsg:28992)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        glas: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (glas afval) rondom de container(s)")] = None,
        glas_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasgestremd: Annotated[Optional[StrictBool], Field(description="De glascontainer is gestremd")] = None,
        glasgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glastoegankelijk: Annotated[Optional[StrictBool], Field(description="De glascontainer is toegangelijk")] = None,
        glastoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        glasvol: Annotated[Optional[StrictBool], Field(description="De glascontainer is vol")] = None,
        glasvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grof: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (grofvuil) rondom de container(s)")] = None,
        grof_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen: Annotated[Optional[StrictStr], Field(description="De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.")] = None,
        grofvuildagen_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        grofvuildagen_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        grofvuildagen_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        grofvuildagen_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        grofvuildagen_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        handhaving: Annotated[Optional[StrictBool], Field(description="Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig")] = None,
        handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        huisvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (huisvuil) rondom de container(s)")] = None,
        huisvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het record.")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        karton: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (karton) rondom de container(s)")] = None,
        karton_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer: Annotated[Optional[StrictStr], Field(description="De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.")] = None,
        locatie_waarnemer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        locatie_waarnemer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        locatie_waarnemer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        locatie_waarnemer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        locatie_waarnemer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        melding_door_collega_doorgezet: Annotated[Optional[StrictStr], Field(description="Het geeft aan of de waarneming door een collega is doorgezet.")] = None,
        melding_door_collega_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        melding_door_collega_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        melding_door_collega_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        melding_door_collega_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        melding_door_collega_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam_melding_doorgezet: Annotated[Optional[StrictStr], Field(description="Soort doorgezette waarneming.")] = None,
        naam_melding_doorgezet_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_melding_doorgezet_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_melding_doorgezet_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_melding_doorgezet_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_melding_doorgezet_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        overig: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (overig) rondom de container(s)")] = None,
        overig_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiergestremd: Annotated[Optional[StrictBool], Field(description="De papiercontainer is gestremd")] = None,
        papiergestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiertoegankelijk: Annotated[Optional[StrictBool], Field(description="De papiercontainer is toegankelijk")] = None,
        papiertoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        papiervol: Annotated[Optional[StrictBool], Field(description="De papiercontainer is vol")] = None,
        papiervol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).")] = None,
        postcode_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        postcode_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        postcode_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        postcode_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        postcode_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        restgestremd: Annotated[Optional[StrictBool], Field(description="De restcontainer is gestremd")] = None,
        restgestremd_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        resttoegankelijk: Annotated[Optional[StrictBool], Field(description="De restcontainer is toegankelijk")] = None,
        resttoegankelijk_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        restvol: Annotated[Optional[StrictBool], Field(description="De restcontainer is vol")] = None,
        restvol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam: Annotated[Optional[StrictStr], Field(description="De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).")] = None,
        straatnaam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        straatnaam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        straatnaam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        straatnaam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        straatnaam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        tijd_waarneming: Annotated[Optional[StrictStr], Field(description="De tijdstip waarop de waarneming is geregistreerd.")] = None,
        tijd_waarneming_gt: Annotated[Optional[StrictStr], Field(description="Greater than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_gte: Annotated[Optional[StrictStr], Field(description="Greater than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        tijd_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        tijd_waarneming_lt: Annotated[Optional[StrictStr], Field(description="Less than; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_lte: Annotated[Optional[StrictStr], Field(description="Less than or equal to; use hh:mm[:ss[.ms]]")] = None,
        tijd_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; use hh:mm[:ss[.ms]]")] = None,
        type_waarneming: Annotated[Optional[StrictStr], Field(description="Geeft aan of de waarneming een CROW waarneming is.")] = None,
        type_waarneming_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        type_waarneming_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        type_waarneming_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        type_waarneming_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        type_waarneming_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        veegvuil: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (veegvuil) rondom de container(s)")] = None,
        veegvuil_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving: Annotated[Optional[StrictStr], Field(description="Hoe veel items met adresgegevens zijn er aangetroffen?")] = None,
        waarde_handhaving_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarde_handhaving_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarde_handhaving_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarde_handhaving_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarde_handhaving_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        waarnemer_rol: Annotated[Optional[StrictStr], Field(description="De rol van de melder")] = None,
        waarnemer_rol_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        waarnemer_rol_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        waarnemer_rol_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        waarnemer_rol_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        waarnemer_rol_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        zwerfafval: Annotated[Optional[StrictBool], Field(description="Aangetroffen afvalsoort (zwerfafval) rondom de container(s)")] = None,
        zwerfafval_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """huishoudelijkafval_bijplaatsingen_retrieve_slash


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param csv_header: Specify type of header for csv file
        :type csv_header: str
        :param csv_separator: Specify type of separator for csv file
        :type csv_separator: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param adres_type: Het type meetlocatie geeft aan om wat voor soort locatie het gaat. De locatie typen zijn er. Extra: De gemeten locatie bevond zich niet op de route, maar er is wel een meting van uitgevoerd. Bijvoorbeeld: een locatie die buiten de route ligt, heeft bijplaatsingen ernaast staan. Null: De gemeten locatie bevond zich op de route en werd direct gemeten zodra deze verscheen. Postponed: De meting van de locatie was eerder uitgesteld. Bijvoorbeeld, wanneer een locatie niet bereikbaar is, kun je deze uitstellen, waarna deze later opnieuw op de route verschijnt.  Forwarded: De gemeten locatie is bij het team binnengekomen omdat een ander team daar iets relevants had aangetroffen. Bijvoorbeeld: de werkbrigade vindt karton met adressen bij een locatie, vult aan het einde van het formulier in dat dit door het team gecontroleerd moet worden. De locatie wordt vervolgens toegevoegd aan de route. 
        :type adres_type: str
        :param adres_type_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type adres_type_in: List[str]
        :param adres_type_isempty: Whether the field is empty or not.
        :type adres_type_isempty: bool
        :param adres_type_isnull: Whether the field has a NULL value or not.
        :type adres_type_isnull: bool
        :param adres_type_like: Matches text using wildcards (? and *).
        :type adres_type_like: str
        :param adres_type_not: Exclude matches; text
        :type adres_type_not: List[str]
        :param bag_nummeraanduiding_identificatie: De unieke aanduiding van een nummeraanduiding
        :type bag_nummeraanduiding_identificatie: str
        :param bag_nummeraanduiding_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_nummeraanduiding_identificatie_in: List[str]
        :param bag_nummeraanduiding_identificatie_isempty: Whether the field is empty or not.
        :type bag_nummeraanduiding_identificatie_isempty: bool
        :param bag_nummeraanduiding_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_nummeraanduiding_identificatie_isnull: bool
        :param bag_nummeraanduiding_identificatie_like: Matches text using wildcards (? and *).
        :type bag_nummeraanduiding_identificatie_like: str
        :param bag_nummeraanduiding_identificatie_not: Exclude matches; text
        :type bag_nummeraanduiding_identificatie_not: List[str]
        :param bag_openbareruimte_identificatie: Unieke identificatie van een openbare ruimte
        :type bag_openbareruimte_identificatie: str
        :param bag_openbareruimte_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_openbareruimte_identificatie_in: List[str]
        :param bag_openbareruimte_identificatie_isempty: Whether the field is empty or not.
        :type bag_openbareruimte_identificatie_isempty: bool
        :param bag_openbareruimte_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_openbareruimte_identificatie_isnull: bool
        :param bag_openbareruimte_identificatie_like: Matches text using wildcards (? and *).
        :type bag_openbareruimte_identificatie_like: str
        :param bag_openbareruimte_identificatie_not: Exclude matches; text
        :type bag_openbareruimte_identificatie_not: List[str]
        :param bag_verblijfsobject_identificatie: De unieke aanduiding van een verblijfsobject
        :type bag_verblijfsobject_identificatie: str
        :param bag_verblijfsobject_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_verblijfsobject_identificatie_in: List[str]
        :param bag_verblijfsobject_identificatie_isempty: Whether the field is empty or not.
        :type bag_verblijfsobject_identificatie_isempty: bool
        :param bag_verblijfsobject_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_verblijfsobject_identificatie_isnull: bool
        :param bag_verblijfsobject_identificatie_like: Matches text using wildcards (? and *).
        :type bag_verblijfsobject_identificatie_like: str
        :param bag_verblijfsobject_identificatie_not: Exclude matches; text
        :type bag_verblijfsobject_identificatie_not: List[str]
        :param bag_woonplaats_identificatie: Unieke aanduiding van een woonplaats
        :type bag_woonplaats_identificatie: str
        :param bag_woonplaats_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bag_woonplaats_identificatie_in: List[str]
        :param bag_woonplaats_identificatie_isempty: Whether the field is empty or not.
        :type bag_woonplaats_identificatie_isempty: bool
        :param bag_woonplaats_identificatie_isnull: Whether the field has a NULL value or not.
        :type bag_woonplaats_identificatie_isnull: bool
        :param bag_woonplaats_identificatie_like: Matches text using wildcards (? and *).
        :type bag_woonplaats_identificatie_like: str
        :param bag_woonplaats_identificatie_not: Exclude matches; text
        :type bag_woonplaats_identificatie_not: List[str]
        :param bruingoed: Aangetroffen afvalsoort (bruingoed) rondom de container(s)
        :type bruingoed: bool
        :param bruingoed_isnull: Whether the field has a NULL value or not.
        :type bruingoed_isnull: bool
        :param cluster_id: Uniek identificerend kenmerk van cluster
        :type cluster_id: str
        :param cluster_id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type cluster_id_in: List[str]
        :param cluster_id_isempty: Whether the field is empty or not.
        :type cluster_id_isempty: bool
        :param cluster_id_isnull: Whether the field has a NULL value or not.
        :type cluster_id_isnull: bool
        :param cluster_id_like: Matches text using wildcards (? and *).
        :type cluster_id_like: str
        :param cluster_id_not: Exclude matches; text
        :type cluster_id_not: List[str]
        :param containervies: De uiterlijke toestand van de container(s). Container is vies en moet worden schoongemaakt
        :type containervies: bool
        :param containervies_isnull: Whether the field has a NULL value or not.
        :type containervies_isnull: bool
        :param crow_score: De score van CROW inspectie. A+: 0 stuks afval, A: <= 1 stuk, B: <= 3 stuks, C: <= 5 stuks, D: > 5 stuks
        :type crow_score: str
        :param crow_score_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type crow_score_in: List[str]
        :param crow_score_isempty: Whether the field is empty or not.
        :type crow_score_isempty: bool
        :param crow_score_isnull: Whether the field has a NULL value or not.
        :type crow_score_isnull: bool
        :param crow_score_like: Matches text using wildcards (? and *).
        :type crow_score_like: str
        :param crow_score_not: Exclude matches; text
        :type crow_score_not: List[str]
        :param datum_waarneming: De datum waarop de waarneming is geregistreerd.
        :type datum_waarneming: date
        :param datum_waarneming_gt: Greater than; use yyyy-mm-dd
        :type datum_waarneming_gt: date
        :param datum_waarneming_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_waarneming_gte: date
        :param datum_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_waarneming_in: List[date]
        :param datum_waarneming_isnull: Whether the field has a NULL value or not.
        :type datum_waarneming_isnull: bool
        :param datum_waarneming_lt: Less than; use yyyy-mm-dd
        :type datum_waarneming_lt: date
        :param datum_waarneming_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_waarneming_lte: date
        :param datum_waarneming_not: Exclude matches; use yyyy-mm-dd
        :type datum_waarneming_not: List[date]
        :param dumpplek: Het geeft aan of de locatie een dumpplek is.
        :type dumpplek: bool
        :param dumpplek_isnull: Whether the field has a NULL value or not.
        :type dumpplek_isnull: bool
        :param gbd_buurt_identificatie: Unieke identificatie van het object
        :type gbd_buurt_identificatie: str
        :param gbd_buurt_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_identificatie_in: List[str]
        :param gbd_buurt_identificatie_isempty: Whether the field is empty or not.
        :type gbd_buurt_identificatie_isempty: bool
        :param gbd_buurt_identificatie_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_identificatie_isnull: bool
        :param gbd_buurt_identificatie_like: Matches text using wildcards (? and *).
        :type gbd_buurt_identificatie_like: str
        :param gbd_buurt_identificatie_not: Exclude matches; text
        :type gbd_buurt_identificatie_not: List[str]
        :param gbd_buurt_code: Unieke code (hierin zie je de Stadsdeel- en Wijkcode terug)
        :type gbd_buurt_code: str
        :param gbd_buurt_code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_buurt_code_in: List[str]
        :param gbd_buurt_code_isempty: Whether the field is empty or not.
        :type gbd_buurt_code_isempty: bool
        :param gbd_buurt_code_isnull: Whether the field has a NULL value or not.
        :type gbd_buurt_code_isnull: bool
        :param gbd_buurt_code_like: Matches text using wildcards (? and *).
        :type gbd_buurt_code_like: str
        :param gbd_buurt_code_not: Exclude matches; text
        :type gbd_buurt_code_not: List[str]
        :param gbd_stadsdeel_naam: Naam van het stadsdeel waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type gbd_stadsdeel_naam: str
        :param gbd_stadsdeel_naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gbd_stadsdeel_naam_in: List[str]
        :param gbd_stadsdeel_naam_isempty: Whether the field is empty or not.
        :type gbd_stadsdeel_naam_isempty: bool
        :param gbd_stadsdeel_naam_isnull: Whether the field has a NULL value or not.
        :type gbd_stadsdeel_naam_isnull: bool
        :param gbd_stadsdeel_naam_like: Matches text using wildcards (? and *).
        :type gbd_stadsdeel_naam_like: str
        :param gbd_stadsdeel_naam_not: Exclude matches; text
        :type gbd_stadsdeel_naam_not: List[str]
        :param gebruikers_rol: De rol van de gebruiker in de applicatie.
        :type gebruikers_rol: str
        :param gebruikers_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type gebruikers_rol_in: List[str]
        :param gebruikers_rol_isempty: Whether the field is empty or not.
        :type gebruikers_rol_isempty: bool
        :param gebruikers_rol_isnull: Whether the field has a NULL value or not.
        :type gebruikers_rol_isnull: bool
        :param gebruikers_rol_like: Matches text using wildcards (? and *).
        :type gebruikers_rol_like: str
        :param gebruikers_rol_not: Exclude matches; text
        :type gebruikers_rol_not: List[str]
        :param geometrie: Geometrie van het type POINT van de waarneming RD(epsg:28992)
        :type geometrie: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param glas: Aangetroffen afvalsoort (glas afval) rondom de container(s)
        :type glas: bool
        :param glas_isnull: Whether the field has a NULL value or not.
        :type glas_isnull: bool
        :param glasgestremd: De glascontainer is gestremd
        :type glasgestremd: bool
        :param glasgestremd_isnull: Whether the field has a NULL value or not.
        :type glasgestremd_isnull: bool
        :param glastoegankelijk: De glascontainer is toegangelijk
        :type glastoegankelijk: bool
        :param glastoegankelijk_isnull: Whether the field has a NULL value or not.
        :type glastoegankelijk_isnull: bool
        :param glasvol: De glascontainer is vol
        :type glasvol: bool
        :param glasvol_isnull: Whether the field has a NULL value or not.
        :type glasvol_isnull: bool
        :param grof: Aangetroffen afvalsoort (grofvuil) rondom de container(s)
        :type grof: bool
        :param grof_isnull: Whether the field has a NULL value or not.
        :type grof_isnull: bool
        :param grofvuildagen: De waarde is 'true' of 'false' en geeft per dag aan of het waar of onwaar is. De eerste waarde correspondeert met maandag.
        :type grofvuildagen: str
        :param grofvuildagen_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type grofvuildagen_in: List[str]
        :param grofvuildagen_isempty: Whether the field is empty or not.
        :type grofvuildagen_isempty: bool
        :param grofvuildagen_isnull: Whether the field has a NULL value or not.
        :type grofvuildagen_isnull: bool
        :param grofvuildagen_like: Matches text using wildcards (? and *).
        :type grofvuildagen_like: str
        :param grofvuildagen_not: Exclude matches; text
        :type grofvuildagen_not: List[str]
        :param handhaving: Er zijn items aangetroffen met adresgegevens en is er dus handhaving nodig
        :type handhaving: bool
        :param handhaving_isnull: Whether the field has a NULL value or not.
        :type handhaving_isnull: bool
        :param huisvuil: Aangetroffen afvalsoort (huisvuil) rondom de container(s)
        :type huisvuil: bool
        :param huisvuil_isnull: Whether the field has a NULL value or not.
        :type huisvuil_isnull: bool
        :param id2: Unieke aanduiding van het record.
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param karton: Aangetroffen afvalsoort (karton) rondom de container(s)
        :type karton: bool
        :param karton_isnull: Whether the field has a NULL value or not.
        :type karton_isnull: bool
        :param locatie_waarnemer: De locatie (stadsdeel) vanwaar de waarnemer in het systeem is ingelogd.
        :type locatie_waarnemer: str
        :param locatie_waarnemer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type locatie_waarnemer_in: List[str]
        :param locatie_waarnemer_isempty: Whether the field is empty or not.
        :type locatie_waarnemer_isempty: bool
        :param locatie_waarnemer_isnull: Whether the field has a NULL value or not.
        :type locatie_waarnemer_isnull: bool
        :param locatie_waarnemer_like: Matches text using wildcards (? and *).
        :type locatie_waarnemer_like: str
        :param locatie_waarnemer_not: Exclude matches; text
        :type locatie_waarnemer_not: List[str]
        :param melding_door_collega_doorgezet: Het geeft aan of de waarneming door een collega is doorgezet.
        :type melding_door_collega_doorgezet: str
        :param melding_door_collega_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type melding_door_collega_doorgezet_in: List[str]
        :param melding_door_collega_doorgezet_isempty: Whether the field is empty or not.
        :type melding_door_collega_doorgezet_isempty: bool
        :param melding_door_collega_doorgezet_isnull: Whether the field has a NULL value or not.
        :type melding_door_collega_doorgezet_isnull: bool
        :param melding_door_collega_doorgezet_like: Matches text using wildcards (? and *).
        :type melding_door_collega_doorgezet_like: str
        :param melding_door_collega_doorgezet_not: Exclude matches; text
        :type melding_door_collega_doorgezet_not: List[str]
        :param naam_melding_doorgezet: Soort doorgezette waarneming.
        :type naam_melding_doorgezet: str
        :param naam_melding_doorgezet_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_melding_doorgezet_in: List[str]
        :param naam_melding_doorgezet_isempty: Whether the field is empty or not.
        :type naam_melding_doorgezet_isempty: bool
        :param naam_melding_doorgezet_isnull: Whether the field has a NULL value or not.
        :type naam_melding_doorgezet_isnull: bool
        :param naam_melding_doorgezet_like: Matches text using wildcards (? and *).
        :type naam_melding_doorgezet_like: str
        :param naam_melding_doorgezet_not: Exclude matches; text
        :type naam_melding_doorgezet_not: List[str]
        :param overig: Aangetroffen afvalsoort (overig) rondom de container(s)
        :type overig: bool
        :param overig_isnull: Whether the field has a NULL value or not.
        :type overig_isnull: bool
        :param papiergestremd: De papiercontainer is gestremd
        :type papiergestremd: bool
        :param papiergestremd_isnull: Whether the field has a NULL value or not.
        :type papiergestremd_isnull: bool
        :param papiertoegankelijk: De papiercontainer is toegankelijk
        :type papiertoegankelijk: bool
        :param papiertoegankelijk_isnull: Whether the field has a NULL value or not.
        :type papiertoegankelijk_isnull: bool
        :param papiervol: De papiercontainer is vol
        :type papiervol: bool
        :param papiervol_isnull: Whether the field has a NULL value or not.
        :type papiervol_isnull: bool
        :param postcode: De postcode van de locatie waar de waarneming is geregistreerd (afgeleid o.b.v. geometrie).
        :type postcode: str
        :param postcode_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type postcode_in: List[str]
        :param postcode_isempty: Whether the field is empty or not.
        :type postcode_isempty: bool
        :param postcode_isnull: Whether the field has a NULL value or not.
        :type postcode_isnull: bool
        :param postcode_like: Matches text using wildcards (? and *).
        :type postcode_like: str
        :param postcode_not: Exclude matches; text
        :type postcode_not: List[str]
        :param restgestremd: De restcontainer is gestremd
        :type restgestremd: bool
        :param restgestremd_isnull: Whether the field has a NULL value or not.
        :type restgestremd_isnull: bool
        :param resttoegankelijk: De restcontainer is toegankelijk
        :type resttoegankelijk: bool
        :param resttoegankelijk_isnull: Whether the field has a NULL value or not.
        :type resttoegankelijk_isnull: bool
        :param restvol: De restcontainer is vol
        :type restvol: bool
        :param restvol_isnull: Whether the field has a NULL value or not.
        :type restvol_isnull: bool
        :param straatnaam: De straat van de locatie waar de waarneming is geregistreerd (afgeleid op basis van de geometrie).
        :type straatnaam: str
        :param straatnaam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type straatnaam_in: List[str]
        :param straatnaam_isempty: Whether the field is empty or not.
        :type straatnaam_isempty: bool
        :param straatnaam_isnull: Whether the field has a NULL value or not.
        :type straatnaam_isnull: bool
        :param straatnaam_like: Matches text using wildcards (? and *).
        :type straatnaam_like: str
        :param straatnaam_not: Exclude matches; text
        :type straatnaam_not: List[str]
        :param tijd_waarneming: De tijdstip waarop de waarneming is geregistreerd.
        :type tijd_waarneming: str
        :param tijd_waarneming_gt: Greater than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gt: str
        :param tijd_waarneming_gte: Greater than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_gte: str
        :param tijd_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type tijd_waarneming_in: List[str]
        :param tijd_waarneming_isnull: Whether the field has a NULL value or not.
        :type tijd_waarneming_isnull: bool
        :param tijd_waarneming_lt: Less than; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lt: str
        :param tijd_waarneming_lte: Less than or equal to; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_lte: str
        :param tijd_waarneming_not: Exclude matches; use hh:mm[:ss[.ms]]
        :type tijd_waarneming_not: List[str]
        :param type_waarneming: Geeft aan of de waarneming een CROW waarneming is.
        :type type_waarneming: str
        :param type_waarneming_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type type_waarneming_in: List[str]
        :param type_waarneming_isempty: Whether the field is empty or not.
        :type type_waarneming_isempty: bool
        :param type_waarneming_isnull: Whether the field has a NULL value or not.
        :type type_waarneming_isnull: bool
        :param type_waarneming_like: Matches text using wildcards (? and *).
        :type type_waarneming_like: str
        :param type_waarneming_not: Exclude matches; text
        :type type_waarneming_not: List[str]
        :param veegvuil: Aangetroffen afvalsoort (veegvuil) rondom de container(s)
        :type veegvuil: bool
        :param veegvuil_isnull: Whether the field has a NULL value or not.
        :type veegvuil_isnull: bool
        :param waarde_handhaving: Hoe veel items met adresgegevens zijn er aangetroffen?
        :type waarde_handhaving: str
        :param waarde_handhaving_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarde_handhaving_in: List[str]
        :param waarde_handhaving_isempty: Whether the field is empty or not.
        :type waarde_handhaving_isempty: bool
        :param waarde_handhaving_isnull: Whether the field has a NULL value or not.
        :type waarde_handhaving_isnull: bool
        :param waarde_handhaving_like: Matches text using wildcards (? and *).
        :type waarde_handhaving_like: str
        :param waarde_handhaving_not: Exclude matches; text
        :type waarde_handhaving_not: List[str]
        :param waarnemer_rol: De rol van de melder
        :type waarnemer_rol: str
        :param waarnemer_rol_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type waarnemer_rol_in: List[str]
        :param waarnemer_rol_isempty: Whether the field is empty or not.
        :type waarnemer_rol_isempty: bool
        :param waarnemer_rol_isnull: Whether the field has a NULL value or not.
        :type waarnemer_rol_isnull: bool
        :param waarnemer_rol_like: Matches text using wildcards (? and *).
        :type waarnemer_rol_like: str
        :param waarnemer_rol_not: Exclude matches; text
        :type waarnemer_rol_not: List[str]
        :param zwerfafval: Aangetroffen afvalsoort (zwerfafval) rondom de container(s)
        :type zwerfafval: bool
        :param zwerfafval_isnull: Whether the field has a NULL value or not.
        :type zwerfafval_isnull: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._huishoudelijkafval_bijplaatsingen_retrieve_slash_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            csv_header=csv_header,
            csv_separator=csv_separator,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            adres_type=adres_type,
            adres_type_in=adres_type_in,
            adres_type_isempty=adres_type_isempty,
            adres_type_isnull=adres_type_isnull,
            adres_type_like=adres_type_like,
            adres_type_not=adres_type_not,
            bag_nummeraanduiding_identificatie=bag_nummeraanduiding_identificatie,
            bag_nummeraanduiding_identificatie_in=bag_nummeraanduiding_identificatie_in,
            bag_nummeraanduiding_identificatie_isempty=bag_nummeraanduiding_identificatie_isempty,
            bag_nummeraanduiding_identificatie_isnull=bag_nummeraanduiding_identificatie_isnull,
            bag_nummeraanduiding_identificatie_like=bag_nummeraanduiding_identificatie_like,
            bag_nummeraanduiding_identificatie_not=bag_nummeraanduiding_identificatie_not,
            bag_openbareruimte_identificatie=bag_openbareruimte_identificatie,
            bag_openbareruimte_identificatie_in=bag_openbareruimte_identificatie_in,
            bag_openbareruimte_identificatie_isempty=bag_openbareruimte_identificatie_isempty,
            bag_openbareruimte_identificatie_isnull=bag_openbareruimte_identificatie_isnull,
            bag_openbareruimte_identificatie_like=bag_openbareruimte_identificatie_like,
            bag_openbareruimte_identificatie_not=bag_openbareruimte_identificatie_not,
            bag_verblijfsobject_identificatie=bag_verblijfsobject_identificatie,
            bag_verblijfsobject_identificatie_in=bag_verblijfsobject_identificatie_in,
            bag_verblijfsobject_identificatie_isempty=bag_verblijfsobject_identificatie_isempty,
            bag_verblijfsobject_identificatie_isnull=bag_verblijfsobject_identificatie_isnull,
            bag_verblijfsobject_identificatie_like=bag_verblijfsobject_identificatie_like,
            bag_verblijfsobject_identificatie_not=bag_verblijfsobject_identificatie_not,
            bag_woonplaats_identificatie=bag_woonplaats_identificatie,
            bag_woonplaats_identificatie_in=bag_woonplaats_identificatie_in,
            bag_woonplaats_identificatie_isempty=bag_woonplaats_identificatie_isempty,
            bag_woonplaats_identificatie_isnull=bag_woonplaats_identificatie_isnull,
            bag_woonplaats_identificatie_like=bag_woonplaats_identificatie_like,
            bag_woonplaats_identificatie_not=bag_woonplaats_identificatie_not,
            bruingoed=bruingoed,
            bruingoed_isnull=bruingoed_isnull,
            cluster_id=cluster_id,
            cluster_id_in=cluster_id_in,
            cluster_id_isempty=cluster_id_isempty,
            cluster_id_isnull=cluster_id_isnull,
            cluster_id_like=cluster_id_like,
            cluster_id_not=cluster_id_not,
            containervies=containervies,
            containervies_isnull=containervies_isnull,
            crow_score=crow_score,
            crow_score_in=crow_score_in,
            crow_score_isempty=crow_score_isempty,
            crow_score_isnull=crow_score_isnull,
            crow_score_like=crow_score_like,
            crow_score_not=crow_score_not,
            datum_waarneming=datum_waarneming,
            datum_waarneming_gt=datum_waarneming_gt,
            datum_waarneming_gte=datum_waarneming_gte,
            datum_waarneming_in=datum_waarneming_in,
            datum_waarneming_isnull=datum_waarneming_isnull,
            datum_waarneming_lt=datum_waarneming_lt,
            datum_waarneming_lte=datum_waarneming_lte,
            datum_waarneming_not=datum_waarneming_not,
            dumpplek=dumpplek,
            dumpplek_isnull=dumpplek_isnull,
            gbd_buurt_identificatie=gbd_buurt_identificatie,
            gbd_buurt_identificatie_in=gbd_buurt_identificatie_in,
            gbd_buurt_identificatie_isempty=gbd_buurt_identificatie_isempty,
            gbd_buurt_identificatie_isnull=gbd_buurt_identificatie_isnull,
            gbd_buurt_identificatie_like=gbd_buurt_identificatie_like,
            gbd_buurt_identificatie_not=gbd_buurt_identificatie_not,
            gbd_buurt_code=gbd_buurt_code,
            gbd_buurt_code_in=gbd_buurt_code_in,
            gbd_buurt_code_isempty=gbd_buurt_code_isempty,
            gbd_buurt_code_isnull=gbd_buurt_code_isnull,
            gbd_buurt_code_like=gbd_buurt_code_like,
            gbd_buurt_code_not=gbd_buurt_code_not,
            gbd_stadsdeel_naam=gbd_stadsdeel_naam,
            gbd_stadsdeel_naam_in=gbd_stadsdeel_naam_in,
            gbd_stadsdeel_naam_isempty=gbd_stadsdeel_naam_isempty,
            gbd_stadsdeel_naam_isnull=gbd_stadsdeel_naam_isnull,
            gbd_stadsdeel_naam_like=gbd_stadsdeel_naam_like,
            gbd_stadsdeel_naam_not=gbd_stadsdeel_naam_not,
            gebruikers_rol=gebruikers_rol,
            gebruikers_rol_in=gebruikers_rol_in,
            gebruikers_rol_isempty=gebruikers_rol_isempty,
            gebruikers_rol_isnull=gebruikers_rol_isnull,
            gebruikers_rol_like=gebruikers_rol_like,
            gebruikers_rol_not=gebruikers_rol_not,
            geometrie=geometrie,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            glas=glas,
            glas_isnull=glas_isnull,
            glasgestremd=glasgestremd,
            glasgestremd_isnull=glasgestremd_isnull,
            glastoegankelijk=glastoegankelijk,
            glastoegankelijk_isnull=glastoegankelijk_isnull,
            glasvol=glasvol,
            glasvol_isnull=glasvol_isnull,
            grof=grof,
            grof_isnull=grof_isnull,
            grofvuildagen=grofvuildagen,
            grofvuildagen_in=grofvuildagen_in,
            grofvuildagen_isempty=grofvuildagen_isempty,
            grofvuildagen_isnull=grofvuildagen_isnull,
            grofvuildagen_like=grofvuildagen_like,
            grofvuildagen_not=grofvuildagen_not,
            handhaving=handhaving,
            handhaving_isnull=handhaving_isnull,
            huisvuil=huisvuil,
            huisvuil_isnull=huisvuil_isnull,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            karton=karton,
            karton_isnull=karton_isnull,
            locatie_waarnemer=locatie_waarnemer,
            locatie_waarnemer_in=locatie_waarnemer_in,
            locatie_waarnemer_isempty=locatie_waarnemer_isempty,
            locatie_waarnemer_isnull=locatie_waarnemer_isnull,
            locatie_waarnemer_like=locatie_waarnemer_like,
            locatie_waarnemer_not=locatie_waarnemer_not,
            melding_door_collega_doorgezet=melding_door_collega_doorgezet,
            melding_door_collega_doorgezet_in=melding_door_collega_doorgezet_in,
            melding_door_collega_doorgezet_isempty=melding_door_collega_doorgezet_isempty,
            melding_door_collega_doorgezet_isnull=melding_door_collega_doorgezet_isnull,
            melding_door_collega_doorgezet_like=melding_door_collega_doorgezet_like,
            melding_door_collega_doorgezet_not=melding_door_collega_doorgezet_not,
            naam_melding_doorgezet=naam_melding_doorgezet,
            naam_melding_doorgezet_in=naam_melding_doorgezet_in,
            naam_melding_doorgezet_isempty=naam_melding_doorgezet_isempty,
            naam_melding_doorgezet_isnull=naam_melding_doorgezet_isnull,
            naam_melding_doorgezet_like=naam_melding_doorgezet_like,
            naam_melding_doorgezet_not=naam_melding_doorgezet_not,
            overig=overig,
            overig_isnull=overig_isnull,
            papiergestremd=papiergestremd,
            papiergestremd_isnull=papiergestremd_isnull,
            papiertoegankelijk=papiertoegankelijk,
            papiertoegankelijk_isnull=papiertoegankelijk_isnull,
            papiervol=papiervol,
            papiervol_isnull=papiervol_isnull,
            postcode=postcode,
            postcode_in=postcode_in,
            postcode_isempty=postcode_isempty,
            postcode_isnull=postcode_isnull,
            postcode_like=postcode_like,
            postcode_not=postcode_not,
            restgestremd=restgestremd,
            restgestremd_isnull=restgestremd_isnull,
            resttoegankelijk=resttoegankelijk,
            resttoegankelijk_isnull=resttoegankelijk_isnull,
            restvol=restvol,
            restvol_isnull=restvol_isnull,
            straatnaam=straatnaam,
            straatnaam_in=straatnaam_in,
            straatnaam_isempty=straatnaam_isempty,
            straatnaam_isnull=straatnaam_isnull,
            straatnaam_like=straatnaam_like,
            straatnaam_not=straatnaam_not,
            tijd_waarneming=tijd_waarneming,
            tijd_waarneming_gt=tijd_waarneming_gt,
            tijd_waarneming_gte=tijd_waarneming_gte,
            tijd_waarneming_in=tijd_waarneming_in,
            tijd_waarneming_isnull=tijd_waarneming_isnull,
            tijd_waarneming_lt=tijd_waarneming_lt,
            tijd_waarneming_lte=tijd_waarneming_lte,
            tijd_waarneming_not=tijd_waarneming_not,
            type_waarneming=type_waarneming,
            type_waarneming_in=type_waarneming_in,
            type_waarneming_isempty=type_waarneming_isempty,
            type_waarneming_isnull=type_waarneming_isnull,
            type_waarneming_like=type_waarneming_like,
            type_waarneming_not=type_waarneming_not,
            veegvuil=veegvuil,
            veegvuil_isnull=veegvuil_isnull,
            waarde_handhaving=waarde_handhaving,
            waarde_handhaving_in=waarde_handhaving_in,
            waarde_handhaving_isempty=waarde_handhaving_isempty,
            waarde_handhaving_isnull=waarde_handhaving_isnull,
            waarde_handhaving_like=waarde_handhaving_like,
            waarde_handhaving_not=waarde_handhaving_not,
            waarnemer_rol=waarnemer_rol,
            waarnemer_rol_in=waarnemer_rol_in,
            waarnemer_rol_isempty=waarnemer_rol_isempty,
            waarnemer_rol_isnull=waarnemer_rol_isnull,
            waarnemer_rol_like=waarnemer_rol_like,
            waarnemer_rol_not=waarnemer_rol_not,
            zwerfafval=zwerfafval,
            zwerfafval_isnull=zwerfafval_isnull,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Huishoudelijkafvalbijplaatsingen",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _huishoudelijkafval_bijplaatsingen_retrieve_slash_serialize(
        self,
        id,
        accept_crs,
        content_crs,
        x_api_key,
        csv_header,
        csv_separator,
        expand,
        expand_scope,
        fields,
        format,
        sort,
        adres_type,
        adres_type_in,
        adres_type_isempty,
        adres_type_isnull,
        adres_type_like,
        adres_type_not,
        bag_nummeraanduiding_identificatie,
        bag_nummeraanduiding_identificatie_in,
        bag_nummeraanduiding_identificatie_isempty,
        bag_nummeraanduiding_identificatie_isnull,
        bag_nummeraanduiding_identificatie_like,
        bag_nummeraanduiding_identificatie_not,
        bag_openbareruimte_identificatie,
        bag_openbareruimte_identificatie_in,
        bag_openbareruimte_identificatie_isempty,
        bag_openbareruimte_identificatie_isnull,
        bag_openbareruimte_identificatie_like,
        bag_openbareruimte_identificatie_not,
        bag_verblijfsobject_identificatie,
        bag_verblijfsobject_identificatie_in,
        bag_verblijfsobject_identificatie_isempty,
        bag_verblijfsobject_identificatie_isnull,
        bag_verblijfsobject_identificatie_like,
        bag_verblijfsobject_identificatie_not,
        bag_woonplaats_identificatie,
        bag_woonplaats_identificatie_in,
        bag_woonplaats_identificatie_isempty,
        bag_woonplaats_identificatie_isnull,
        bag_woonplaats_identificatie_like,
        bag_woonplaats_identificatie_not,
        bruingoed,
        bruingoed_isnull,
        cluster_id,
        cluster_id_in,
        cluster_id_isempty,
        cluster_id_isnull,
        cluster_id_like,
        cluster_id_not,
        containervies,
        containervies_isnull,
        crow_score,
        crow_score_in,
        crow_score_isempty,
        crow_score_isnull,
        crow_score_like,
        crow_score_not,
        datum_waarneming,
        datum_waarneming_gt,
        datum_waarneming_gte,
        datum_waarneming_in,
        datum_waarneming_isnull,
        datum_waarneming_lt,
        datum_waarneming_lte,
        datum_waarneming_not,
        dumpplek,
        dumpplek_isnull,
        gbd_buurt_identificatie,
        gbd_buurt_identificatie_in,
        gbd_buurt_identificatie_isempty,
        gbd_buurt_identificatie_isnull,
        gbd_buurt_identificatie_like,
        gbd_buurt_identificatie_not,
        gbd_buurt_code,
        gbd_buurt_code_in,
        gbd_buurt_code_isempty,
        gbd_buurt_code_isnull,
        gbd_buurt_code_like,
        gbd_buurt_code_not,
        gbd_stadsdeel_naam,
        gbd_stadsdeel_naam_in,
        gbd_stadsdeel_naam_isempty,
        gbd_stadsdeel_naam_isnull,
        gbd_stadsdeel_naam_like,
        gbd_stadsdeel_naam_not,
        gebruikers_rol,
        gebruikers_rol_in,
        gebruikers_rol_isempty,
        gebruikers_rol_isnull,
        gebruikers_rol_like,
        gebruikers_rol_not,
        geometrie,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        glas,
        glas_isnull,
        glasgestremd,
        glasgestremd_isnull,
        glastoegankelijk,
        glastoegankelijk_isnull,
        glasvol,
        glasvol_isnull,
        grof,
        grof_isnull,
        grofvuildagen,
        grofvuildagen_in,
        grofvuildagen_isempty,
        grofvuildagen_isnull,
        grofvuildagen_like,
        grofvuildagen_not,
        handhaving,
        handhaving_isnull,
        huisvuil,
        huisvuil_isnull,
        id2,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        karton,
        karton_isnull,
        locatie_waarnemer,
        locatie_waarnemer_in,
        locatie_waarnemer_isempty,
        locatie_waarnemer_isnull,
        locatie_waarnemer_like,
        locatie_waarnemer_not,
        melding_door_collega_doorgezet,
        melding_door_collega_doorgezet_in,
        melding_door_collega_doorgezet_isempty,
        melding_door_collega_doorgezet_isnull,
        melding_door_collega_doorgezet_like,
        melding_door_collega_doorgezet_not,
        naam_melding_doorgezet,
        naam_melding_doorgezet_in,
        naam_melding_doorgezet_isempty,
        naam_melding_doorgezet_isnull,
        naam_melding_doorgezet_like,
        naam_melding_doorgezet_not,
        overig,
        overig_isnull,
        papiergestremd,
        papiergestremd_isnull,
        papiertoegankelijk,
        papiertoegankelijk_isnull,
        papiervol,
        papiervol_isnull,
        postcode,
        postcode_in,
        postcode_isempty,
        postcode_isnull,
        postcode_like,
        postcode_not,
        restgestremd,
        restgestremd_isnull,
        resttoegankelijk,
        resttoegankelijk_isnull,
        restvol,
        restvol_isnull,
        straatnaam,
        straatnaam_in,
        straatnaam_isempty,
        straatnaam_isnull,
        straatnaam_like,
        straatnaam_not,
        tijd_waarneming,
        tijd_waarneming_gt,
        tijd_waarneming_gte,
        tijd_waarneming_in,
        tijd_waarneming_isnull,
        tijd_waarneming_lt,
        tijd_waarneming_lte,
        tijd_waarneming_not,
        type_waarneming,
        type_waarneming_in,
        type_waarneming_isempty,
        type_waarneming_isnull,
        type_waarneming_like,
        type_waarneming_not,
        veegvuil,
        veegvuil_isnull,
        waarde_handhaving,
        waarde_handhaving_in,
        waarde_handhaving_isempty,
        waarde_handhaving_isnull,
        waarde_handhaving_like,
        waarde_handhaving_not,
        waarnemer_rol,
        waarnemer_rol_in,
        waarnemer_rol_isempty,
        waarnemer_rol_isnull,
        waarnemer_rol_like,
        waarnemer_rol_not,
        zwerfafval,
        zwerfafval_isnull,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'adresType[in]': 'csv',
            'adresType[not]': 'multi',
            'bagNummeraanduiding.identificatie[in]': 'csv',
            'bagNummeraanduiding.identificatie[not]': 'multi',
            'bagOpenbareruimte.identificatie[in]': 'csv',
            'bagOpenbareruimte.identificatie[not]': 'multi',
            'bagVerblijfsobject.identificatie[in]': 'csv',
            'bagVerblijfsobject.identificatie[not]': 'multi',
            'bagWoonplaats.identificatie[in]': 'csv',
            'bagWoonplaats.identificatie[not]': 'multi',
            'cluster.id[in]': 'csv',
            'cluster.id[not]': 'multi',
            'crowScore[in]': 'csv',
            'crowScore[not]': 'multi',
            'datumWaarneming[in]': 'csv',
            'datumWaarneming[not]': 'multi',
            'gbdBuurt.identificatie[in]': 'csv',
            'gbdBuurt.identificatie[not]': 'multi',
            'gbdBuurtCode[in]': 'csv',
            'gbdBuurtCode[not]': 'multi',
            'gbdStadsdeelNaam[in]': 'csv',
            'gbdStadsdeelNaam[not]': 'multi',
            'gebruikersRol[in]': 'csv',
            'gebruikersRol[not]': 'multi',
            'grofvuildagen[in]': 'csv',
            'grofvuildagen[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'locatieWaarnemer[in]': 'csv',
            'locatieWaarnemer[not]': 'multi',
            'meldingDoorCollegaDoorgezet[in]': 'csv',
            'meldingDoorCollegaDoorgezet[not]': 'multi',
            'naamMeldingDoorgezet[in]': 'csv',
            'naamMeldingDoorgezet[not]': 'multi',
            'postcode[in]': 'csv',
            'postcode[not]': 'multi',
            'straatnaam[in]': 'csv',
            'straatnaam[not]': 'multi',
            'tijdWaarneming[in]': 'csv',
            'tijdWaarneming[not]': 'multi',
            'typeWaarneming[in]': 'csv',
            'typeWaarneming[not]': 'multi',
            'waardeHandhaving[in]': 'csv',
            'waardeHandhaving[not]': 'multi',
            'waarnemerRol[in]': 'csv',
            'waarnemerRol[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if csv_header is not None:
            
            _query_params.append(('_csv_header', csv_header))
            
        if csv_separator is not None:
            
            _query_params.append(('_csv_separator', csv_separator))
            
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if adres_type is not None:
            
            _query_params.append(('adresType', adres_type))
            
        if adres_type_in is not None:
            
            _query_params.append(('adresType[in]', adres_type_in))
            
        if adres_type_isempty is not None:
            
            _query_params.append(('adresType[isempty]', adres_type_isempty))
            
        if adres_type_isnull is not None:
            
            _query_params.append(('adresType[isnull]', adres_type_isnull))
            
        if adres_type_like is not None:
            
            _query_params.append(('adresType[like]', adres_type_like))
            
        if adres_type_not is not None:
            
            _query_params.append(('adresType[not]', adres_type_not))
            
        if bag_nummeraanduiding_identificatie is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie', bag_nummeraanduiding_identificatie))
            
        if bag_nummeraanduiding_identificatie_in is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[in]', bag_nummeraanduiding_identificatie_in))
            
        if bag_nummeraanduiding_identificatie_isempty is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isempty]', bag_nummeraanduiding_identificatie_isempty))
            
        if bag_nummeraanduiding_identificatie_isnull is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[isnull]', bag_nummeraanduiding_identificatie_isnull))
            
        if bag_nummeraanduiding_identificatie_like is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[like]', bag_nummeraanduiding_identificatie_like))
            
        if bag_nummeraanduiding_identificatie_not is not None:
            
            _query_params.append(('bagNummeraanduiding.identificatie[not]', bag_nummeraanduiding_identificatie_not))
            
        if bag_openbareruimte_identificatie is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie', bag_openbareruimte_identificatie))
            
        if bag_openbareruimte_identificatie_in is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[in]', bag_openbareruimte_identificatie_in))
            
        if bag_openbareruimte_identificatie_isempty is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isempty]', bag_openbareruimte_identificatie_isempty))
            
        if bag_openbareruimte_identificatie_isnull is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[isnull]', bag_openbareruimte_identificatie_isnull))
            
        if bag_openbareruimte_identificatie_like is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[like]', bag_openbareruimte_identificatie_like))
            
        if bag_openbareruimte_identificatie_not is not None:
            
            _query_params.append(('bagOpenbareruimte.identificatie[not]', bag_openbareruimte_identificatie_not))
            
        if bag_verblijfsobject_identificatie is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie', bag_verblijfsobject_identificatie))
            
        if bag_verblijfsobject_identificatie_in is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[in]', bag_verblijfsobject_identificatie_in))
            
        if bag_verblijfsobject_identificatie_isempty is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[isempty]', bag_verblijfsobject_identificatie_isempty))
            
        if bag_verblijfsobject_identificatie_isnull is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[isnull]', bag_verblijfsobject_identificatie_isnull))
            
        if bag_verblijfsobject_identificatie_like is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[like]', bag_verblijfsobject_identificatie_like))
            
        if bag_verblijfsobject_identificatie_not is not None:
            
            _query_params.append(('bagVerblijfsobject.identificatie[not]', bag_verblijfsobject_identificatie_not))
            
        if bag_woonplaats_identificatie is not None:
            
            _query_params.append(('bagWoonplaats.identificatie', bag_woonplaats_identificatie))
            
        if bag_woonplaats_identificatie_in is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[in]', bag_woonplaats_identificatie_in))
            
        if bag_woonplaats_identificatie_isempty is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[isempty]', bag_woonplaats_identificatie_isempty))
            
        if bag_woonplaats_identificatie_isnull is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[isnull]', bag_woonplaats_identificatie_isnull))
            
        if bag_woonplaats_identificatie_like is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[like]', bag_woonplaats_identificatie_like))
            
        if bag_woonplaats_identificatie_not is not None:
            
            _query_params.append(('bagWoonplaats.identificatie[not]', bag_woonplaats_identificatie_not))
            
        if bruingoed is not None:
            
            _query_params.append(('bruingoed', bruingoed))
            
        if bruingoed_isnull is not None:
            
            _query_params.append(('bruingoed[isnull]', bruingoed_isnull))
            
        if cluster_id is not None:
            
            _query_params.append(('cluster.id', cluster_id))
            
        if cluster_id_in is not None:
            
            _query_params.append(('cluster.id[in]', cluster_id_in))
            
        if cluster_id_isempty is not None:
            
            _query_params.append(('cluster.id[isempty]', cluster_id_isempty))
            
        if cluster_id_isnull is not None:
            
            _query_params.append(('cluster.id[isnull]', cluster_id_isnull))
            
        if cluster_id_like is not None:
            
            _query_params.append(('cluster.id[like]', cluster_id_like))
            
        if cluster_id_not is not None:
            
            _query_params.append(('cluster.id[not]', cluster_id_not))
            
        if containervies is not None:
            
            _query_params.append(('containervies', containervies))
            
        if containervies_isnull is not None:
            
            _query_params.append(('containervies[isnull]', containervies_isnull))
            
        if crow_score is not None:
            
            _query_params.append(('crowScore', crow_score))
            
        if crow_score_in is not None:
            
            _query_params.append(('crowScore[in]', crow_score_in))
            
        if crow_score_isempty is not None:
            
            _query_params.append(('crowScore[isempty]', crow_score_isempty))
            
        if crow_score_isnull is not None:
            
            _query_params.append(('crowScore[isnull]', crow_score_isnull))
            
        if crow_score_like is not None:
            
            _query_params.append(('crowScore[like]', crow_score_like))
            
        if crow_score_not is not None:
            
            _query_params.append(('crowScore[not]', crow_score_not))
            
        if datum_waarneming is not None:
            if isinstance(datum_waarneming, date):
                _query_params.append(
                    (
                        'datumWaarneming',
                        datum_waarneming.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming', datum_waarneming))
            
        if datum_waarneming_gt is not None:
            if isinstance(datum_waarneming_gt, date):
                _query_params.append(
                    (
                        'datumWaarneming[gt]',
                        datum_waarneming_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[gt]', datum_waarneming_gt))
            
        if datum_waarneming_gte is not None:
            if isinstance(datum_waarneming_gte, date):
                _query_params.append(
                    (
                        'datumWaarneming[gte]',
                        datum_waarneming_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[gte]', datum_waarneming_gte))
            
        if datum_waarneming_in is not None:
            
            _query_params.append(('datumWaarneming[in]', datum_waarneming_in))
            
        if datum_waarneming_isnull is not None:
            
            _query_params.append(('datumWaarneming[isnull]', datum_waarneming_isnull))
            
        if datum_waarneming_lt is not None:
            if isinstance(datum_waarneming_lt, date):
                _query_params.append(
                    (
                        'datumWaarneming[lt]',
                        datum_waarneming_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[lt]', datum_waarneming_lt))
            
        if datum_waarneming_lte is not None:
            if isinstance(datum_waarneming_lte, date):
                _query_params.append(
                    (
                        'datumWaarneming[lte]',
                        datum_waarneming_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datumWaarneming[lte]', datum_waarneming_lte))
            
        if datum_waarneming_not is not None:
            
            _query_params.append(('datumWaarneming[not]', datum_waarneming_not))
            
        if dumpplek is not None:
            
            _query_params.append(('dumpplek', dumpplek))
            
        if dumpplek_isnull is not None:
            
            _query_params.append(('dumpplek[isnull]', dumpplek_isnull))
            
        if gbd_buurt_identificatie is not None:
            
            _query_params.append(('gbdBuurt.identificatie', gbd_buurt_identificatie))
            
        if gbd_buurt_identificatie_in is not None:
            
            _query_params.append(('gbdBuurt.identificatie[in]', gbd_buurt_identificatie_in))
            
        if gbd_buurt_identificatie_isempty is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isempty]', gbd_buurt_identificatie_isempty))
            
        if gbd_buurt_identificatie_isnull is not None:
            
            _query_params.append(('gbdBuurt.identificatie[isnull]', gbd_buurt_identificatie_isnull))
            
        if gbd_buurt_identificatie_like is not None:
            
            _query_params.append(('gbdBuurt.identificatie[like]', gbd_buurt_identificatie_like))
            
        if gbd_buurt_identificatie_not is not None:
            
            _query_params.append(('gbdBuurt.identificatie[not]', gbd_buurt_identificatie_not))
            
        if gbd_buurt_code is not None:
            
            _query_params.append(('gbdBuurtCode', gbd_buurt_code))
            
        if gbd_buurt_code_in is not None:
            
            _query_params.append(('gbdBuurtCode[in]', gbd_buurt_code_in))
            
        if gbd_buurt_code_isempty is not None:
            
            _query_params.append(('gbdBuurtCode[isempty]', gbd_buurt_code_isempty))
            
        if gbd_buurt_code_isnull is not None:
            
            _query_params.append(('gbdBuurtCode[isnull]', gbd_buurt_code_isnull))
            
        if gbd_buurt_code_like is not None:
            
            _query_params.append(('gbdBuurtCode[like]', gbd_buurt_code_like))
            
        if gbd_buurt_code_not is not None:
            
            _query_params.append(('gbdBuurtCode[not]', gbd_buurt_code_not))
            
        if gbd_stadsdeel_naam is not None:
            
            _query_params.append(('gbdStadsdeelNaam', gbd_stadsdeel_naam))
            
        if gbd_stadsdeel_naam_in is not None:
            
            _query_params.append(('gbdStadsdeelNaam[in]', gbd_stadsdeel_naam_in))
            
        if gbd_stadsdeel_naam_isempty is not None:
            
            _query_params.append(('gbdStadsdeelNaam[isempty]', gbd_stadsdeel_naam_isempty))
            
        if gbd_stadsdeel_naam_isnull is not None:
            
            _query_params.append(('gbdStadsdeelNaam[isnull]', gbd_stadsdeel_naam_isnull))
            
        if gbd_stadsdeel_naam_like is not None:
            
            _query_params.append(('gbdStadsdeelNaam[like]', gbd_stadsdeel_naam_like))
            
        if gbd_stadsdeel_naam_not is not None:
            
            _query_params.append(('gbdStadsdeelNaam[not]', gbd_stadsdeel_naam_not))
            
        if gebruikers_rol is not None:
            
            _query_params.append(('gebruikersRol', gebruikers_rol))
            
        if gebruikers_rol_in is not None:
            
            _query_params.append(('gebruikersRol[in]', gebruikers_rol_in))
            
        if gebruikers_rol_isempty is not None:
            
            _query_params.append(('gebruikersRol[isempty]', gebruikers_rol_isempty))
            
        if gebruikers_rol_isnull is not None:
            
            _query_params.append(('gebruikersRol[isnull]', gebruikers_rol_isnull))
            
        if gebruikers_rol_like is not None:
            
            _query_params.append(('gebruikersRol[like]', gebruikers_rol_like))
            
        if gebruikers_rol_not is not None:
            
            _query_params.append(('gebruikersRol[not]', gebruikers_rol_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if glas is not None:
            
            _query_params.append(('glas', glas))
            
        if glas_isnull is not None:
            
            _query_params.append(('glas[isnull]', glas_isnull))
            
        if glasgestremd is not None:
            
            _query_params.append(('glasgestremd', glasgestremd))
            
        if glasgestremd_isnull is not None:
            
            _query_params.append(('glasgestremd[isnull]', glasgestremd_isnull))
            
        if glastoegankelijk is not None:
            
            _query_params.append(('glastoegankelijk', glastoegankelijk))
            
        if glastoegankelijk_isnull is not None:
            
            _query_params.append(('glastoegankelijk[isnull]', glastoegankelijk_isnull))
            
        if glasvol is not None:
            
            _query_params.append(('glasvol', glasvol))
            
        if glasvol_isnull is not None:
            
            _query_params.append(('glasvol[isnull]', glasvol_isnull))
            
        if grof is not None:
            
            _query_params.append(('grof', grof))
            
        if grof_isnull is not None:
            
            _query_params.append(('grof[isnull]', grof_isnull))
            
        if grofvuildagen is not None:
            
            _query_params.append(('grofvuildagen', grofvuildagen))
            
        if grofvuildagen_in is not None:
            
            _query_params.append(('grofvuildagen[in]', grofvuildagen_in))
            
        if grofvuildagen_isempty is not None:
            
            _query_params.append(('grofvuildagen[isempty]', grofvuildagen_isempty))
            
        if grofvuildagen_isnull is not None:
            
            _query_params.append(('grofvuildagen[isnull]', grofvuildagen_isnull))
            
        if grofvuildagen_like is not None:
            
            _query_params.append(('grofvuildagen[like]', grofvuildagen_like))
            
        if grofvuildagen_not is not None:
            
            _query_params.append(('grofvuildagen[not]', grofvuildagen_not))
            
        if handhaving is not None:
            
            _query_params.append(('handhaving', handhaving))
            
        if handhaving_isnull is not None:
            
            _query_params.append(('handhaving[isnull]', handhaving_isnull))
            
        if huisvuil is not None:
            
            _query_params.append(('huisvuil', huisvuil))
            
        if huisvuil_isnull is not None:
            
            _query_params.append(('huisvuil[isnull]', huisvuil_isnull))
            
        if id2 is not None:
            
            _query_params.append(('id', id2))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if karton is not None:
            
            _query_params.append(('karton', karton))
            
        if karton_isnull is not None:
            
            _query_params.append(('karton[isnull]', karton_isnull))
            
        if locatie_waarnemer is not None:
            
            _query_params.append(('locatieWaarnemer', locatie_waarnemer))
            
        if locatie_waarnemer_in is not None:
            
            _query_params.append(('locatieWaarnemer[in]', locatie_waarnemer_in))
            
        if locatie_waarnemer_isempty is not None:
            
            _query_params.append(('locatieWaarnemer[isempty]', locatie_waarnemer_isempty))
            
        if locatie_waarnemer_isnull is not None:
            
            _query_params.append(('locatieWaarnemer[isnull]', locatie_waarnemer_isnull))
            
        if locatie_waarnemer_like is not None:
            
            _query_params.append(('locatieWaarnemer[like]', locatie_waarnemer_like))
            
        if locatie_waarnemer_not is not None:
            
            _query_params.append(('locatieWaarnemer[not]', locatie_waarnemer_not))
            
        if melding_door_collega_doorgezet is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet', melding_door_collega_doorgezet))
            
        if melding_door_collega_doorgezet_in is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[in]', melding_door_collega_doorgezet_in))
            
        if melding_door_collega_doorgezet_isempty is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[isempty]', melding_door_collega_doorgezet_isempty))
            
        if melding_door_collega_doorgezet_isnull is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[isnull]', melding_door_collega_doorgezet_isnull))
            
        if melding_door_collega_doorgezet_like is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[like]', melding_door_collega_doorgezet_like))
            
        if melding_door_collega_doorgezet_not is not None:
            
            _query_params.append(('meldingDoorCollegaDoorgezet[not]', melding_door_collega_doorgezet_not))
            
        if naam_melding_doorgezet is not None:
            
            _query_params.append(('naamMeldingDoorgezet', naam_melding_doorgezet))
            
        if naam_melding_doorgezet_in is not None:
            
            _query_params.append(('naamMeldingDoorgezet[in]', naam_melding_doorgezet_in))
            
        if naam_melding_doorgezet_isempty is not None:
            
            _query_params.append(('naamMeldingDoorgezet[isempty]', naam_melding_doorgezet_isempty))
            
        if naam_melding_doorgezet_isnull is not None:
            
            _query_params.append(('naamMeldingDoorgezet[isnull]', naam_melding_doorgezet_isnull))
            
        if naam_melding_doorgezet_like is not None:
            
            _query_params.append(('naamMeldingDoorgezet[like]', naam_melding_doorgezet_like))
            
        if naam_melding_doorgezet_not is not None:
            
            _query_params.append(('naamMeldingDoorgezet[not]', naam_melding_doorgezet_not))
            
        if overig is not None:
            
            _query_params.append(('overig', overig))
            
        if overig_isnull is not None:
            
            _query_params.append(('overig[isnull]', overig_isnull))
            
        if papiergestremd is not None:
            
            _query_params.append(('papiergestremd', papiergestremd))
            
        if papiergestremd_isnull is not None:
            
            _query_params.append(('papiergestremd[isnull]', papiergestremd_isnull))
            
        if papiertoegankelijk is not None:
            
            _query_params.append(('papiertoegankelijk', papiertoegankelijk))
            
        if papiertoegankelijk_isnull is not None:
            
            _query_params.append(('papiertoegankelijk[isnull]', papiertoegankelijk_isnull))
            
        if papiervol is not None:
            
            _query_params.append(('papiervol', papiervol))
            
        if papiervol_isnull is not None:
            
            _query_params.append(('papiervol[isnull]', papiervol_isnull))
            
        if postcode is not None:
            
            _query_params.append(('postcode', postcode))
            
        if postcode_in is not None:
            
            _query_params.append(('postcode[in]', postcode_in))
            
        if postcode_isempty is not None:
            
            _query_params.append(('postcode[isempty]', postcode_isempty))
            
        if postcode_isnull is not None:
            
            _query_params.append(('postcode[isnull]', postcode_isnull))
            
        if postcode_like is not None:
            
            _query_params.append(('postcode[like]', postcode_like))
            
        if postcode_not is not None:
            
            _query_params.append(('postcode[not]', postcode_not))
            
        if restgestremd is not None:
            
            _query_params.append(('restgestremd', restgestremd))
            
        if restgestremd_isnull is not None:
            
            _query_params.append(('restgestremd[isnull]', restgestremd_isnull))
            
        if resttoegankelijk is not None:
            
            _query_params.append(('resttoegankelijk', resttoegankelijk))
            
        if resttoegankelijk_isnull is not None:
            
            _query_params.append(('resttoegankelijk[isnull]', resttoegankelijk_isnull))
            
        if restvol is not None:
            
            _query_params.append(('restvol', restvol))
            
        if restvol_isnull is not None:
            
            _query_params.append(('restvol[isnull]', restvol_isnull))
            
        if straatnaam is not None:
            
            _query_params.append(('straatnaam', straatnaam))
            
        if straatnaam_in is not None:
            
            _query_params.append(('straatnaam[in]', straatnaam_in))
            
        if straatnaam_isempty is not None:
            
            _query_params.append(('straatnaam[isempty]', straatnaam_isempty))
            
        if straatnaam_isnull is not None:
            
            _query_params.append(('straatnaam[isnull]', straatnaam_isnull))
            
        if straatnaam_like is not None:
            
            _query_params.append(('straatnaam[like]', straatnaam_like))
            
        if straatnaam_not is not None:
            
            _query_params.append(('straatnaam[not]', straatnaam_not))
            
        if tijd_waarneming is not None:
            
            _query_params.append(('tijdWaarneming', tijd_waarneming))
            
        if tijd_waarneming_gt is not None:
            
            _query_params.append(('tijdWaarneming[gt]', tijd_waarneming_gt))
            
        if tijd_waarneming_gte is not None:
            
            _query_params.append(('tijdWaarneming[gte]', tijd_waarneming_gte))
            
        if tijd_waarneming_in is not None:
            
            _query_params.append(('tijdWaarneming[in]', tijd_waarneming_in))
            
        if tijd_waarneming_isnull is not None:
            
            _query_params.append(('tijdWaarneming[isnull]', tijd_waarneming_isnull))
            
        if tijd_waarneming_lt is not None:
            
            _query_params.append(('tijdWaarneming[lt]', tijd_waarneming_lt))
            
        if tijd_waarneming_lte is not None:
            
            _query_params.append(('tijdWaarneming[lte]', tijd_waarneming_lte))
            
        if tijd_waarneming_not is not None:
            
            _query_params.append(('tijdWaarneming[not]', tijd_waarneming_not))
            
        if type_waarneming is not None:
            
            _query_params.append(('typeWaarneming', type_waarneming))
            
        if type_waarneming_in is not None:
            
            _query_params.append(('typeWaarneming[in]', type_waarneming_in))
            
        if type_waarneming_isempty is not None:
            
            _query_params.append(('typeWaarneming[isempty]', type_waarneming_isempty))
            
        if type_waarneming_isnull is not None:
            
            _query_params.append(('typeWaarneming[isnull]', type_waarneming_isnull))
            
        if type_waarneming_like is not None:
            
            _query_params.append(('typeWaarneming[like]', type_waarneming_like))
            
        if type_waarneming_not is not None:
            
            _query_params.append(('typeWaarneming[not]', type_waarneming_not))
            
        if veegvuil is not None:
            
            _query_params.append(('veegvuil', veegvuil))
            
        if veegvuil_isnull is not None:
            
            _query_params.append(('veegvuil[isnull]', veegvuil_isnull))
            
        if waarde_handhaving is not None:
            
            _query_params.append(('waardeHandhaving', waarde_handhaving))
            
        if waarde_handhaving_in is not None:
            
            _query_params.append(('waardeHandhaving[in]', waarde_handhaving_in))
            
        if waarde_handhaving_isempty is not None:
            
            _query_params.append(('waardeHandhaving[isempty]', waarde_handhaving_isempty))
            
        if waarde_handhaving_isnull is not None:
            
            _query_params.append(('waardeHandhaving[isnull]', waarde_handhaving_isnull))
            
        if waarde_handhaving_like is not None:
            
            _query_params.append(('waardeHandhaving[like]', waarde_handhaving_like))
            
        if waarde_handhaving_not is not None:
            
            _query_params.append(('waardeHandhaving[not]', waarde_handhaving_not))
            
        if waarnemer_rol is not None:
            
            _query_params.append(('waarnemerRol', waarnemer_rol))
            
        if waarnemer_rol_in is not None:
            
            _query_params.append(('waarnemerRol[in]', waarnemer_rol_in))
            
        if waarnemer_rol_isempty is not None:
            
            _query_params.append(('waarnemerRol[isempty]', waarnemer_rol_isempty))
            
        if waarnemer_rol_isnull is not None:
            
            _query_params.append(('waarnemerRol[isnull]', waarnemer_rol_isnull))
            
        if waarnemer_rol_like is not None:
            
            _query_params.append(('waarnemerRol[like]', waarnemer_rol_like))
            
        if waarnemer_rol_not is not None:
            
            _query_params.append(('waarnemerRol[not]', waarnemer_rol_not))
            
        if zwerfafval is not None:
            
            _query_params.append(('zwerfafval', zwerfafval))
            
        if zwerfafval_isnull is not None:
            
            _query_params.append(('zwerfafval[isnull]', zwerfafval_isnull))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bijplaatsingen/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


